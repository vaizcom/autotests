{"uid":"ead7a1a26ed6a2da","name":"test_task_indexing_in_group[empty_group_index_10]","fullName":"tests.test_backend.task.test_task_indexing_in_group#test_task_indexing_in_group","historyId":"ecdd626b1a43c9b3f63d628ece745dcb","time":{"start":1759909346161,"stop":1759909363797,"duration":17636},"description":"\n    Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n    ","descriptionHtml":"<pre><code>Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e615e40354864d83fed360']","statusTrace":"request = <FixtureRequest for <Function test_task_indexing_in_group[empty_group_index_10]>>\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fb0b44caac0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ninitial_tasks = 0, create_index = 10, expected_position = 0\ntitle = 'Пустая группа, индекс=10'\n\n    @pytest.mark.parametrize(\n        \"initial_tasks, create_index, expected_position, title\",\n        [\n            (0, None, 0, \"Пустая группа, индекс не указан\"),\n            (0, 10, 0, \"Пустая группа, индекс=10\"),\n            (10, 2, 2, \"Группа из 10 тасок, индекс=2\"),\n            (10, 999, 10, \"Группа из 10 тасок, индекс=999\"),\n            (10, 0, 0, \"Группа из 10 тасок, индекс=0\"),\n            (10, 10,10, \"Группа из 10 тасок, индекс=10\"),\n            (10,9,9, \"Группа из 10 тасок, индекс=9\")\n        ],\n        ids=[\n            \"empty_group_no_index\",\n            \"empty_group_index_10\",\n            \"ten_tasks_index_2\",\n            \"ten_tasks_index_999\",\n            \"ten_tasks_index_0\",\n            \"ten_tasks_index_10\",\n            \"ten_tasks_index_9\"\n        ]\n    )\n    def test_task_indexing_in_group(\n        request, create_task_in_main, main_space, main_board, initial_tasks, create_index, expected_position, title,\n    ):\n        \"\"\"\n        Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n        \"\"\"\n    \n        with allure.step(\"Получить ID первой группы на доске\"):\n            client = request.getfixturevalue(\"owner_client\")\n            resp = client.post(**get_board_endpoint(main_board, main_space))\n            group_id = resp.json()[\"payload\"][\"board\"][\"groups\"][0][\"_id\"]\n    \n        with allure.step(\"Очистить все задачи в выбранной группе\"):\n            safe_delete_all_tasks_in_group(client, main_board, main_space, group_id)\n            wait_group_empty(client, main_board, main_space, group_id)\n    \n        try:\n            with allure.step(\"Убедиться, что группа действительно пуста\"):\n                for try_num in range(5):\n                    board = client.post(**get_board_endpoint(main_board, main_space)).json()[\"payload\"][\"board\"]\n                    task_ids = board[\"taskOrderByGroups\"].get(group_id, [])\n                    if not task_ids:\n                        break\n                    time.sleep(1)\n                assert not task_ids, f\"Группа не пуста после очистки! Остались: {task_ids}\"\n    \n            with allure.step(\"Добавить стартовые задачи в группу (если требуется по сценарию)\"):\n                for i in range(initial_tasks):\n                    create_task_in_main(\n                        client_fixture=\"owner_client\",\n                        group=group_id,\n                        index=i,\n                        name=f\"Initial Task #{i}\"\n                    )\n    \n            with allure.step(f\"Создать новую тестовую задачу: {title}\"):\n                params = {\n                    \"client_fixture\": \"owner_client\",\n                    \"group\": group_id,\n                    \"name\": \"Target Task!!!!\",\n                    \"index\": create_index,\n                }\n                target_task = create_task_in_main(**params)\n                target_task_id = target_task[\"_id\"]\n                time.sleep(1)\n    \n            with allure.step(\"Запросить список задач группы и проверить корректность порядка\"):\n                board = client.post(**get_board_endpoint(main_board, main_space)).json()[\"payload\"][\"board\"]\n                task_ids = board[\"taskOrderByGroups\"][group_id]\n                assert target_task_id in task_ids, \"Задача должна быть в списке задач группы\"\n                actual_position = task_ids.index(target_task_id)\n>               assert actual_position == expected_position, (\n                    f\"Задача в позиции {actual_position}, ожидалось {expected_position}. Список: {task_ids}\"\n                )\nE               AssertionError: Задача в позиции 3, ожидалось 0. Список: ['68e615e40354864d83fed384', '68e615e40354864d83fed407', '68e615e50354864d83fed45d', '68e615e40354864d83fed360']\nE               assert 3 == 0\n\ntests/test_backend/task/test_task_indexing_in_group.py:82: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_task_indexing_in_group[empty_group_index_10]>>\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fb0b44caac0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ninitial_tasks = 0, create_index = 10, expected_position = 0\ntitle = 'Пустая группа, индекс=10'\n\n    @pytest.mark.parametrize(\n        \"initial_tasks, create_index, expected_position, title\",\n        [\n            (0, None, 0, \"Пустая группа, индекс не указан\"),\n            (0, 10, 0, \"Пустая группа, индекс=10\"),\n            (10, 2, 2, \"Группа из 10 тасок, индекс=2\"),\n            (10, 999, 10, \"Группа из 10 тасок, индекс=999\"),\n            (10, 0, 0, \"Группа из 10 тасок, индекс=0\"),\n            (10, 10,10, \"Группа из 10 тасок, индекс=10\"),\n            (10,9,9, \"Группа из 10 тасок, индекс=9\")\n        ],\n        ids=[\n            \"empty_group_no_index\",\n            \"empty_group_index_10\",\n            \"ten_tasks_index_2\",\n            \"ten_tasks_index_999\",\n            \"ten_tasks_index_0\",\n            \"ten_tasks_index_10\",\n            \"ten_tasks_index_9\"\n        ]\n    )\n    def test_task_indexing_in_group(\n        request, create_task_in_main, main_space, main_board, initial_tasks, create_index, expected_position, title,\n    ):\n        \"\"\"\n        Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n        \"\"\"\n    \n        with allure.step(\"Получить ID первой группы на доске\"):\n            client = request.getfixturevalue(\"owner_client\")\n            resp = client.post(**get_board_endpoint(main_board, main_space))\n            group_id = resp.json()[\"payload\"][\"board\"][\"groups\"][0][\"_id\"]\n    \n        with allure.step(\"Очистить все задачи в выбранной группе\"):\n            safe_delete_all_tasks_in_group(client, main_board, main_space, group_id)\n            wait_group_empty(client, main_board, main_space, group_id)\n    \n        try:\n            with allure.step(\"Убедиться, что группа действительно пуста\"):\n                for try_num in range(5):\n                    board = client.post(**get_board_endpoint(main_board, main_space)).json()[\"payload\"][\"board\"]\n                    task_ids = board[\"taskOrderByGroups\"].get(group_id, [])\n                    if not task_ids:\n                        break\n                    time.sleep(1)\n                assert not task_ids, f\"Группа не пуста после очистки! Остались: {task_ids}\"\n    \n            with allure.step(\"Добавить стартовые задачи в группу (если требуется по сценарию)\"):\n                for i in range(initial_tasks):\n                    create_task_in_main(\n                        client_fixture=\"owner_client\",\n                        group=group_id,\n                        index=i,\n                        name=f\"Initial Task #{i}\"\n                    )\n    \n            with allure.step(f\"Создать новую тестовую задачу: {title}\"):\n                params = {\n                    \"client_fixture\": \"owner_client\",\n                    \"group\": group_id,\n                    \"name\": \"Target Task!!!!\",\n                    \"index\": create_index,\n                }\n                target_task = create_task_in_main(**params)\n                target_task_id = target_task[\"_id\"]\n                time.sleep(1)\n    \n            with allure.step(\"Запросить список задач группы и проверить корректность порядка\"):\n                board = client.post(**get_board_endpoint(main_board, main_space)).json()[\"payload\"][\"board\"]\n                task_ids = board[\"taskOrderByGroups\"][group_id]\n                assert target_task_id in task_ids, \"Задача должна быть в списке задач группы\"\n                actual_position = task_ids.index(target_task_id)\n                assert actual_position == expected_position, (\n                    f\"Задача в позиции {actual_position}, ожидалось {expected_position}. Список: {task_ids}\"\n                )\n    \n            # Проверка количества задач: всегда должно быть initial_tasks + 1\n                expected_count = initial_tasks + 1\n                assert len(task_ids) == expected_count, (\n                    f\"Ожидалось задач: {expected_count}, получено: {len(task_ids)}.\\n\"\n                    f\"Список задач: {task_ids}\"\n                )\n                if expected_count == 1:\n                    assert actual_position == 0, \"Если задача единственная, её индекс должен быть 0\"\n                    assert task_ids == [target_task_id], (\n                        f\"Единственная задача должна быть именно той, что создана сейчас. Получено: {task_ids}\"\n                    )\n        finally:\n            with allure.step(\"Финальная очистка группы после завершения теста\"):\n                safe_delete_all_tasks_in_group(client, main_board, main_space, group_id)\n>               wait_group_empty(client, main_board, main_space, group_id)\n\ntests/test_backend/task/test_task_indexing_in_group.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nclient = <tests.core.client.APIClient object at 0x7fb0b4884f10>\nboard_id = '6866731185fb8d104544e826', space_id = '6866309d85fb8d104544a61e'\ngroup_id = '6866731185fb8d104544e827', timeout = 10, poll_interval = 0.5\n\n    def wait_group_empty(client, board_id, space_id, group_id, timeout=10, poll_interval=0.5):\n        \"\"\"Ожидает, пока группа не станет пустой, либо истекает timeout (сек)\"\"\"\n        start_time = time.time()\n        while time.time() - start_time < timeout:\n            board = client.post(**get_board_endpoint(board_id, space_id)).json()[\"payload\"][\"board\"]\n            tasks = board[\"taskOrderByGroups\"].get(group_id, [])\n            if not tasks:\n                return\n            time.sleep(poll_interval)\n        # Если tasks не пуст — значит, что-то не так\n>       raise AssertionError(f\"Группа {group_id} осталась не пустой: {tasks}\")\nE       AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e615e40354864d83fed360']\n\ntests/test_backend/task/utils.py:214: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"main_client","time":{"start":1759908910502,"stop":1759908910958,"duration":456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759908910958,"stop":1759908911429,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1759908911429,"stop":1759908911673,"duration":244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759908911674,"stop":1759908912143,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1759908916299,"stop":1759908916703,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_task_in_main","time":{"start":1759909346161,"stop":1759909346161,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n    ","status":"failed","statusMessage":"AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e615e40354864d83fed360']","statusTrace":"request = <FixtureRequest for <Function test_task_indexing_in_group[empty_group_index_10]>>\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fb0b44caac0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ninitial_tasks = 0, create_index = 10, expected_position = 0\ntitle = 'Пустая группа, индекс=10'\n\n    @pytest.mark.parametrize(\n        \"initial_tasks, create_index, expected_position, title\",\n        [\n            (0, None, 0, \"Пустая группа, индекс не указан\"),\n            (0, 10, 0, \"Пустая группа, индекс=10\"),\n            (10, 2, 2, \"Группа из 10 тасок, индекс=2\"),\n            (10, 999, 10, \"Группа из 10 тасок, индекс=999\"),\n            (10, 0, 0, \"Группа из 10 тасок, индекс=0\"),\n            (10, 10,10, \"Группа из 10 тасок, индекс=10\"),\n            (10,9,9, \"Группа из 10 тасок, индекс=9\")\n        ],\n        ids=[\n            \"empty_group_no_index\",\n            \"empty_group_index_10\",\n            \"ten_tasks_index_2\",\n            \"ten_tasks_index_999\",\n            \"ten_tasks_index_0\",\n            \"ten_tasks_index_10\",\n            \"ten_tasks_index_9\"\n        ]\n    )\n    def test_task_indexing_in_group(\n        request, create_task_in_main, main_space, main_board, initial_tasks, create_index, expected_position, title,\n    ):\n        \"\"\"\n        Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n        \"\"\"\n    \n        with allure.step(\"Получить ID первой группы на доске\"):\n            client = request.getfixturevalue(\"owner_client\")\n            resp = client.post(**get_board_endpoint(main_board, main_space))\n            group_id = resp.json()[\"payload\"][\"board\"][\"groups\"][0][\"_id\"]\n    \n        with allure.step(\"Очистить все задачи в выбранной группе\"):\n            safe_delete_all_tasks_in_group(client, main_board, main_space, group_id)\n            wait_group_empty(client, main_board, main_space, group_id)\n    \n        try:\n            with allure.step(\"Убедиться, что группа действительно пуста\"):\n                for try_num in range(5):\n                    board = client.post(**get_board_endpoint(main_board, main_space)).json()[\"payload\"][\"board\"]\n                    task_ids = board[\"taskOrderByGroups\"].get(group_id, [])\n                    if not task_ids:\n                        break\n                    time.sleep(1)\n                assert not task_ids, f\"Группа не пуста после очистки! Остались: {task_ids}\"\n    \n            with allure.step(\"Добавить стартовые задачи в группу (если требуется по сценарию)\"):\n                for i in range(initial_tasks):\n                    create_task_in_main(\n                        client_fixture=\"owner_client\",\n                        group=group_id,\n                        index=i,\n                        name=f\"Initial Task #{i}\"\n                    )\n    \n            with allure.step(f\"Создать новую тестовую задачу: {title}\"):\n                params = {\n                    \"client_fixture\": \"owner_client\",\n                    \"group\": group_id,\n                    \"name\": \"Target Task!!!!\",\n                    \"index\": create_index,\n                }\n                target_task = create_task_in_main(**params)\n                target_task_id = target_task[\"_id\"]\n                time.sleep(1)\n    \n            with allure.step(\"Запросить список задач группы и проверить корректность порядка\"):\n                board = client.post(**get_board_endpoint(main_board, main_space)).json()[\"payload\"][\"board\"]\n                task_ids = board[\"taskOrderByGroups\"][group_id]\n                assert target_task_id in task_ids, \"Задача должна быть в списке задач группы\"\n                actual_position = task_ids.index(target_task_id)\n>               assert actual_position == expected_position, (\n                    f\"Задача в позиции {actual_position}, ожидалось {expected_position}. Список: {task_ids}\"\n                )\nE               AssertionError: Задача в позиции 3, ожидалось 0. Список: ['68e615e40354864d83fed384', '68e615e40354864d83fed407', '68e615e50354864d83fed45d', '68e615e40354864d83fed360']\nE               assert 3 == 0\n\ntests/test_backend/task/test_task_indexing_in_group.py:82: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_task_indexing_in_group[empty_group_index_10]>>\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fb0b44caac0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ninitial_tasks = 0, create_index = 10, expected_position = 0\ntitle = 'Пустая группа, индекс=10'\n\n    @pytest.mark.parametrize(\n        \"initial_tasks, create_index, expected_position, title\",\n        [\n            (0, None, 0, \"Пустая группа, индекс не указан\"),\n            (0, 10, 0, \"Пустая группа, индекс=10\"),\n            (10, 2, 2, \"Группа из 10 тасок, индекс=2\"),\n            (10, 999, 10, \"Группа из 10 тасок, индекс=999\"),\n            (10, 0, 0, \"Группа из 10 тасок, индекс=0\"),\n            (10, 10,10, \"Группа из 10 тасок, индекс=10\"),\n            (10,9,9, \"Группа из 10 тасок, индекс=9\")\n        ],\n        ids=[\n            \"empty_group_no_index\",\n            \"empty_group_index_10\",\n            \"ten_tasks_index_2\",\n            \"ten_tasks_index_999\",\n            \"ten_tasks_index_0\",\n            \"ten_tasks_index_10\",\n            \"ten_tasks_index_9\"\n        ]\n    )\n    def test_task_indexing_in_group(\n        request, create_task_in_main, main_space, main_board, initial_tasks, create_index, expected_position, title,\n    ):\n        \"\"\"\n        Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n        \"\"\"\n    \n        with allure.step(\"Получить ID первой группы на доске\"):\n            client = request.getfixturevalue(\"owner_client\")\n            resp = client.post(**get_board_endpoint(main_board, main_space))\n            group_id = resp.json()[\"payload\"][\"board\"][\"groups\"][0][\"_id\"]\n    \n        with allure.step(\"Очистить все задачи в выбранной группе\"):\n            safe_delete_all_tasks_in_group(client, main_board, main_space, group_id)\n            wait_group_empty(client, main_board, main_space, group_id)\n    \n        try:\n            with allure.step(\"Убедиться, что группа действительно пуста\"):\n                for try_num in range(5):\n                    board = client.post(**get_board_endpoint(main_board, main_space)).json()[\"payload\"][\"board\"]\n                    task_ids = board[\"taskOrderByGroups\"].get(group_id, [])\n                    if not task_ids:\n                        break\n                    time.sleep(1)\n                assert not task_ids, f\"Группа не пуста после очистки! Остались: {task_ids}\"\n    \n            with allure.step(\"Добавить стартовые задачи в группу (если требуется по сценарию)\"):\n                for i in range(initial_tasks):\n                    create_task_in_main(\n                        client_fixture=\"owner_client\",\n                        group=group_id,\n                        index=i,\n                        name=f\"Initial Task #{i}\"\n                    )\n    \n            with allure.step(f\"Создать новую тестовую задачу: {title}\"):\n                params = {\n                    \"client_fixture\": \"owner_client\",\n                    \"group\": group_id,\n                    \"name\": \"Target Task!!!!\",\n                    \"index\": create_index,\n                }\n                target_task = create_task_in_main(**params)\n                target_task_id = target_task[\"_id\"]\n                time.sleep(1)\n    \n            with allure.step(\"Запросить список задач группы и проверить корректность порядка\"):\n                board = client.post(**get_board_endpoint(main_board, main_space)).json()[\"payload\"][\"board\"]\n                task_ids = board[\"taskOrderByGroups\"][group_id]\n                assert target_task_id in task_ids, \"Задача должна быть в списке задач группы\"\n                actual_position = task_ids.index(target_task_id)\n                assert actual_position == expected_position, (\n                    f\"Задача в позиции {actual_position}, ожидалось {expected_position}. Список: {task_ids}\"\n                )\n    \n            # Проверка количества задач: всегда должно быть initial_tasks + 1\n                expected_count = initial_tasks + 1\n                assert len(task_ids) == expected_count, (\n                    f\"Ожидалось задач: {expected_count}, получено: {len(task_ids)}.\\n\"\n                    f\"Список задач: {task_ids}\"\n                )\n                if expected_count == 1:\n                    assert actual_position == 0, \"Если задача единственная, её индекс должен быть 0\"\n                    assert task_ids == [target_task_id], (\n                        f\"Единственная задача должна быть именно той, что создана сейчас. Получено: {task_ids}\"\n                    )\n        finally:\n            with allure.step(\"Финальная очистка группы после завершения теста\"):\n                safe_delete_all_tasks_in_group(client, main_board, main_space, group_id)\n>               wait_group_empty(client, main_board, main_space, group_id)\n\ntests/test_backend/task/test_task_indexing_in_group.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nclient = <tests.core.client.APIClient object at 0x7fb0b4884f10>\nboard_id = '6866731185fb8d104544e826', space_id = '6866309d85fb8d104544a61e'\ngroup_id = '6866731185fb8d104544e827', timeout = 10, poll_interval = 0.5\n\n    def wait_group_empty(client, board_id, space_id, group_id, timeout=10, poll_interval=0.5):\n        \"\"\"Ожидает, пока группа не станет пустой, либо истекает timeout (сек)\"\"\"\n        start_time = time.time()\n        while time.time() - start_time < timeout:\n            board = client.post(**get_board_endpoint(board_id, space_id)).json()[\"payload\"][\"board\"]\n            tasks = board[\"taskOrderByGroups\"].get(group_id, [])\n            if not tasks:\n                return\n            time.sleep(poll_interval)\n        # Если tasks не пуст — значит, что-то не так\n>       raise AssertionError(f\"Группа {group_id} осталась не пустой: {tasks}\")\nE       AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e615e40354864d83fed360']\n\ntests/test_backend/task/utils.py:214: AssertionError","steps":[{"name":"Получить ID первой группы на доске","time":{"start":1759909346161,"stop":1759909346377,"duration":216},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Очистить все задачи в выбранной группе","time":{"start":1759909346377,"stop":1759909347596,"duration":1219},"status":"passed","steps":[{"name":"Удаляем все задачи из группы 6866731185fb8d104544e827 (безаварийно)","time":{"start":1759909346377,"stop":1759909346595,"duration":218},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Убедиться, что группа действительно пуста","time":{"start":1759909347596,"stop":1759909347864,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Добавить стартовые задачи в группу (если требуется по сценарию)","time":{"start":1759909347864,"stop":1759909347864,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создать новую тестовую задачу: Пустая группа, индекс=10","time":{"start":1759909347864,"stop":1759909349190,"duration":1326},"status":"passed","steps":[{"name":"Получение клиента для owner_client","time":{"start":1759909347864,"stop":1759909347864,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Запросить список задач группы и проверить корректность порядка","time":{"start":1759909349190,"stop":1759909349505,"duration":315},"status":"failed","statusMessage":"AssertionError: Задача в позиции 3, ожидалось 0. Список: ['68e615e40354864d83fed384', '68e615e40354864d83fed407', '68e615e50354864d83fed45d', '68e615e40354864d83fed360']\nassert 3 == 0\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/test_task_indexing_in_group.py\", line 82, in test_task_indexing_in_group\n    assert actual_position == expected_position, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Финальная очистка группы после завершения теста","time":{"start":1759909349505,"stop":1759909363795,"duration":14290},"status":"failed","statusMessage":"AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e615e40354864d83fed360']\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/test_task_indexing_in_group.py\", line 100, in test_task_indexing_in_group\n    wait_group_empty(client, main_board, main_space, group_id)\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/utils.py\", line 214, in wait_group_empty\n    raise AssertionError(f\"Группа {group_id} осталась не пустой: {tasks}\")\n","steps":[{"name":"Удаляем все задачи из группы 6866731185fb8d104544e827 (безаварийно)","time":{"start":1759909349506,"stop":1759909353331,"duration":3825},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":10,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.task"},{"name":"suite","value":"test_task_indexing_in_group"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2548-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task.test_task_indexing_in_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"create_index","value":"10"},{"name":"expected_position","value":"0"},{"name":"initial_tasks","value":"0"},{"name":"title","value":"'Пустая группа, индекс=10'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["backend"]},"source":"ead7a1a26ed6a2da.json","parameterValues":["10","0","0","'Пустая группа, индекс=10'"]}