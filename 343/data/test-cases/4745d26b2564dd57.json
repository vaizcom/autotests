{"uid":"4745d26b2564dd57","name":"Проверка доступа к siblings Space-документа: создатель - manager, просматривающий - owner","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_project_and_space_siblings_docs_access_by_roles","historyId":"106b17742737af278b17ce6eed628d38","time":{"start":1759767444963,"stop":1759767446167,"duration":1204},"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n- Типа документа (Space/Project)\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-manager_docs_by_owner_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'owner_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n                    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n    \n                    # Проверка дополнительных полей в siblings\n                    for sibling in [payload['prevSibling'], payload['nextSibling']]:\n                        assert 'title' in sibling, 'Отсутствует поле title в siblings'\n                        assert 'kind' in sibling, 'Отсутствует поле kind в siblings'\n                        assert sibling['kind'] == kind, f'Некорректный kind в siblings: {sibling[\"kind\"]}, ожидался: {kind}'\n    \n        with allure.step('Архивация созданных документов'):\n            for doc_id in doc_ids:\n                archive_resp = creator.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>               assert archive_resp.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:118: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767260767,"stop":1759767261300,"duration":533},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767261301,"stop":1759767261750,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759767262154,"stop":1759767262666,"duration":512},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767263179,"stop":1759767263448,"duration":269},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-manager_docs_by_owner_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'owner_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n                    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n    \n                    # Проверка дополнительных полей в siblings\n                    for sibling in [payload['prevSibling'], payload['nextSibling']]:\n                        assert 'title' in sibling, 'Отсутствует поле title в siblings'\n                        assert 'kind' in sibling, 'Отсутствует поле kind в siblings'\n                        assert sibling['kind'] == kind, f'Некорректный kind в siblings: {sibling[\"kind\"]}, ожидался: {kind}'\n    \n        with allure.step('Архивация созданных документов'):\n            for doc_id in doc_ids:\n                archive_resp = creator.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>               assert archive_resp.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:118: AssertionError","steps":[{"name":"Создание трёх Space-документов пользователем manager","time":{"start":1759767444964,"stop":1759767445736,"duration":772},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Попытка получения siblings для среднего документа пользователем owner","time":{"start":1759767445736,"stop":1759767445947,"duration":211},"status":"passed","steps":[{"name":"Проверка корректности данных siblings","time":{"start":1759767445947,"stop":1759767445947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Архивация созданных документов","time":{"start":1759767445947,"stop":1759767446167,"duration":220},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 118, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2672-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"creator_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":32,"unknown":0,"total":34},"items":[{"uid":"77d16c05a2c6df81","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/77d16c05a2c6df81","status":"passed","time":{"start":1759753904232,"stop":1759753905981,"duration":1749}},{"uid":"49536c6dc6646324","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/49536c6dc6646324","status":"passed","time":{"start":1759743867692,"stop":1759743869753,"duration":2061}},{"uid":"2a208a5400166b5d","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/2a208a5400166b5d","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485533658,"stop":1759485533658,"duration":0}},{"uid":"c70a62e0662d8355","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/c70a62e0662d8355","status":"passed","time":{"start":1759232493479,"stop":1759232495221,"duration":1742}},{"uid":"28413de7d2283253","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/28413de7d2283253","status":"passed","time":{"start":1759140774873,"stop":1759140776556,"duration":1683}},{"uid":"eb57d0e79f1e3926","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/eb57d0e79f1e3926","status":"passed","time":{"start":1758891844005,"stop":1758891846203,"duration":2198}},{"uid":"a35cac328367baac","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/a35cac328367baac","status":"passed","time":{"start":1758807795284,"stop":1758807797457,"duration":2173}},{"uid":"74d940b6de3f6884","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/74d940b6de3f6884","status":"passed","time":{"start":1758806669212,"stop":1758806671429,"duration":2217}},{"uid":"3d81cc93392c5bb1","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/3d81cc93392c5bb1","status":"passed","time":{"start":1758791248388,"stop":1758791250720,"duration":2332}},{"uid":"10fd146c69aca73d","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/10fd146c69aca73d","status":"passed","time":{"start":1758540559219,"stop":1758540561220,"duration":2001}},{"uid":"2bc04c2d68a52b3a","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/2bc04c2d68a52b3a","status":"passed","time":{"start":1758289187998,"stop":1758289190388,"duration":2390}},{"uid":"c9119b349f7a3d3b","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/c9119b349f7a3d3b","status":"passed","time":{"start":1755852360492,"stop":1755852363127,"duration":2635}},{"uid":"ee7808e0628b7136","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/ee7808e0628b7136","status":"passed","time":{"start":1755851868766,"stop":1755851871194,"duration":2428}},{"uid":"5f2bd512cf0387b4","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/5f2bd512cf0387b4","status":"passed","time":{"start":1755848007691,"stop":1755848009722,"duration":2031}},{"uid":"9d72d202e999a3d4","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/9d72d202e999a3d4","status":"passed","time":{"start":1755777872269,"stop":1755777874567,"duration":2298}},{"uid":"906ce3ccaa81614e","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/906ce3ccaa81614e","status":"passed","time":{"start":1755774510623,"stop":1755774512737,"duration":2114}},{"uid":"e0970d223b6ce831","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/e0970d223b6ce831","status":"passed","time":{"start":1755694640372,"stop":1755694642692,"duration":2320}},{"uid":"309cf1a396da4989","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/309cf1a396da4989","status":"passed","time":{"start":1755694072564,"stop":1755694074440,"duration":1876}},{"uid":"13495cdf446a2f8f","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/13495cdf446a2f8f","status":"passed","time":{"start":1755687143129,"stop":1755687144914,"duration":1785}},{"uid":"96f5188c134054d2","reportUrl":"https://vaizcom.github.io/autotests/321//#testresult/96f5188c134054d2","status":"passed","time":{"start":1755682890274,"stop":1755682892195,"duration":1921}}]},"tags":["backend"]},"source":"4745d26b2564dd57.json","parameterValues":["'owner_client'","'main_space'","'manager_client'","200","'Space'"]}