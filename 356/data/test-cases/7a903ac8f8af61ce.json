{"uid":"7a903ac8f8af61ce","name":"Повторный запрос одного и того же документа (kind=Project)","fullName":"tests.test_backend.document.test_get_document#test_get_document_multiple_requests","historyId":"183203b8a3dd55f80ec67ccc67f4ca22","time":{"start":1759837457374,"stop":1759837457541,"duration":167},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\nrequest = <FixtureRequest for <Function test_get_document_multiple_requests[project]>>\ntemp_space = '68e4fbe2e49ce50caff67b74', kind = 'Project'\nfixture_name = 'temp_project'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_document_multiple_requests(owner_client, request, temp_space, kind, fixture_name):\n        kind_id = request.getfixturevalue(fixture_name)\n        allure.dynamic.title(f'Повторный запрос одного и того же документа (kind={kind})')\n    \n        with allure.step('Создание документа'):\n            resp = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Repeat test doc')\n            )\n>           assert resp.status_code == 200\nE           assert 503 == 200\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_document.py:111: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1759837155711,"stop":1759837156205,"duration":494},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\nrequest = <FixtureRequest for <Function test_get_document_multiple_requests[project]>>\ntemp_space = '68e4fbe2e49ce50caff67b74', kind = 'Project'\nfixture_name = 'temp_project'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_document_multiple_requests(owner_client, request, temp_space, kind, fixture_name):\n        kind_id = request.getfixturevalue(fixture_name)\n        allure.dynamic.title(f'Повторный запрос одного и того же документа (kind={kind})')\n    \n        with allure.step('Создание документа'):\n            resp = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Repeat test doc')\n            )\n>           assert resp.status_code == 200\nE           assert 503 == 200\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_document.py:111: AssertionError","steps":[{"name":"Создание документа","time":{"start":1759837457374,"stop":1759837457541,"duration":167},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_document.py\", line 111, in test_get_document_multiple_requests\n    assert resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_project::0","time":{"start":1759837469359,"stop":1759837469359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"fixture_name","value":"'temp_project'"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"b9764e3fe8a521bc","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/b9764e3fe8a521bc","status":"passed","time":{"start":1759836301311,"stop":1759836302286,"duration":975}},{"uid":"e3a187156d438b66","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/e3a187156d438b66","status":"passed","time":{"start":1759835651180,"stop":1759835651810,"duration":630}},{"uid":"dc221d4dc03579ae","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/dc221d4dc03579ae","status":"passed","time":{"start":1759834766550,"stop":1759834767392,"duration":842}}]},"tags":["backend"]},"source":"7a903ac8f8af61ce.json","parameterValues":["'temp_project'","'Project'"]}