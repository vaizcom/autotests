{"uid":"b4bd633b55b82ce2","name":"Тест создания доски: клиент=owner_client, ожидаемый статус=200","fullName":"tests.test_backend.board.access_board.test_create_board#test_create_board_access_by_roles","historyId":"4a7ed2ad41947245e4ff9b507189b109","time":{"start":1761745632792,"stop":1761745633124,"duration":332},"status":"failed","statusMessage":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_board_access_by_roles[owner]>>\nclient_fixture = 'owner_client', expected_status = 200\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 403),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_board_access_by_roles(request, client_fixture, expected_status, main_project, main_space):\n        allure.dynamic.title(f'Тест создания доски: клиент={client_fixture}, ожидаемый статус={expected_status}')\n    \n        with allure.step(f'Получение клиента: {client_fixture}'):\n            client = request.getfixturevalue(client_fixture)\n    \n        with allure.step('Генерация уникального имени доски'):\n            board_name = f'board_{uuid.uuid4().hex[:8]}'\n            allure.attach(board_name, name='Сгенерированное имя доски', attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(f\"Отправка запроса на создание доски с именем '{board_name}'\"):\n            payload = create_board_endpoint(\n                name=board_name,\n                project=main_project,\n                space_id=main_space,\n                groups=[],\n                typesList=[],\n                customFields=[],\n            )\n            response = client.post(**payload)\n    \n        with allure.step(f'Проверка статус-кода: ожидаемый {expected_status}'):\n>           assert response.status_code == expected_status, response.text\nE           AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/board/access_board/test_create_board.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761745632604,"stop":1761745632791,"duration":187},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_board_access_by_roles[owner]>>\nclient_fixture = 'owner_client', expected_status = 200\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 403),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_board_access_by_roles(request, client_fixture, expected_status, main_project, main_space):\n        allure.dynamic.title(f'Тест создания доски: клиент={client_fixture}, ожидаемый статус={expected_status}')\n    \n        with allure.step(f'Получение клиента: {client_fixture}'):\n            client = request.getfixturevalue(client_fixture)\n    \n        with allure.step('Генерация уникального имени доски'):\n            board_name = f'board_{uuid.uuid4().hex[:8]}'\n            allure.attach(board_name, name='Сгенерированное имя доски', attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(f\"Отправка запроса на создание доски с именем '{board_name}'\"):\n            payload = create_board_endpoint(\n                name=board_name,\n                project=main_project,\n                space_id=main_space,\n                groups=[],\n                typesList=[],\n                customFields=[],\n            )\n            response = client.post(**payload)\n    \n        with allure.step(f'Проверка статус-кода: ожидаемый {expected_status}'):\n>           assert response.status_code == expected_status, response.text\nE           AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/board/access_board/test_create_board.py:45: AssertionError","steps":[{"name":"Получение клиента: owner_client","time":{"start":1761745632792,"stop":1761745632792,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Генерация уникального имени доски","time":{"start":1761745632792,"stop":1761745632792,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"971ae068c9f83f35","name":"Сгенерированное имя доски","source":"971ae068c9f83f35.txt","type":"text/plain","size":14}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Отправка запроса на создание доски с именем 'board_664f4701'","time":{"start":1761745632792,"stop":1761745633123,"duration":331},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статус-кода: ожидаемый 200","time":{"start":1761745633123,"stop":1761745633123,"duration":0},"status":"failed","statusMessage":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/board/access_board/test_create_board.py\", line 45, in test_create_board_access_by_roles\n    assert response.status_code == expected_status, response.text\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.board.access_board"},{"name":"suite","value":"test_create_board"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.board.access_board.test_create_board"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"dc9b8d101e210fbf","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/dc9b8d101e210fbf","status":"passed","time":{"start":1761576474049,"stop":1761576474525,"duration":476}},{"uid":"5558dc6d17a434ac","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/5558dc6d17a434ac","status":"passed","time":{"start":1761557132102,"stop":1761557133222,"duration":1120}},{"uid":"ff281cfa6a28f95","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/ff281cfa6a28f95","status":"passed","time":{"start":1761308356468,"stop":1761308357811,"duration":1343}},{"uid":"37e6872bcb60592","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/37e6872bcb60592","status":"passed","time":{"start":1761306502925,"stop":1761306504095,"duration":1170}},{"uid":"f2e60aa706de970f","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/f2e60aa706de970f","status":"passed","time":{"start":1761136795996,"stop":1761136797029,"duration":1033}},{"uid":"999112148dfc6c9a","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/999112148dfc6c9a","status":"passed","time":{"start":1761135444854,"stop":1761135446354,"duration":1500}},{"uid":"43d7d9e2cfbd8ee1","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/43d7d9e2cfbd8ee1","status":"passed","time":{"start":1761133914135,"stop":1761133915283,"duration":1148}},{"uid":"adc50e7a96033f05","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/adc50e7a96033f05","status":"passed","time":{"start":1761128210366,"stop":1761128211548,"duration":1182}},{"uid":"73f8fc128e9e6b66","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/73f8fc128e9e6b66","status":"passed","time":{"start":1761124314838,"stop":1761124315755,"duration":917}},{"uid":"a067e19ba62702c","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/a067e19ba62702c","status":"passed","time":{"start":1761119171159,"stop":1761119172321,"duration":1162}},{"uid":"157fc779b62f0ad6","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/157fc779b62f0ad6","status":"passed","time":{"start":1761053216831,"stop":1761053218109,"duration":1278}},{"uid":"57eb3b43156318a2","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/57eb3b43156318a2","status":"passed","time":{"start":1761047101462,"stop":1761047102466,"duration":1004}},{"uid":"4bcff06e7cd0143d","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/4bcff06e7cd0143d","status":"passed","time":{"start":1760614505865,"stop":1760614507038,"duration":1173}},{"uid":"e5deda06c50f7b92","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/e5deda06c50f7b92","status":"passed","time":{"start":1760599308879,"stop":1760599310306,"duration":1427}},{"uid":"835069285f5f438f","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/835069285f5f438f","status":"passed","time":{"start":1760535347023,"stop":1760535347779,"duration":756}},{"uid":"b2077c802564d912","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/b2077c802564d912","status":"passed","time":{"start":1760533779548,"stop":1760533781675,"duration":2127}},{"uid":"f5ea6d7cf223de1a","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/f5ea6d7cf223de1a","status":"passed","time":{"start":1760532380161,"stop":1760532381310,"duration":1149}},{"uid":"b1986da3c061accf","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/b1986da3c061accf","status":"passed","time":{"start":1760529206327,"stop":1760529207301,"duration":974}},{"uid":"e9c505778281895b","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/e9c505778281895b","status":"passed","time":{"start":1760510566977,"stop":1760510568485,"duration":1508}},{"uid":"5944c7d7f7cc5d01","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/5944c7d7f7cc5d01","status":"passed","time":{"start":1760449104241,"stop":1760449105561,"duration":1320}}]},"tags":["backend"]},"source":"b4bd633b55b82ce2.json","parameterValues":["'owner_client'","200"]}