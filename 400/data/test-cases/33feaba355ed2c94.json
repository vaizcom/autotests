{"uid":"33feaba355ed2c94","name":"Создание Project-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_project_doc_access_by_roles","historyId":"0d0a3e9396dfba82a041484969c56ee3","time":{"start":1761909876990,"stop":1761909877165,"duration":175},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:77: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761909856376,"stop":1761909856684,"duration":308},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761909860625,"stop":1761909861236,"duration":611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761909861236,"stop":1761909861504,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761909861504,"stop":1761909861763,"duration":259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:77: AssertionError","steps":[{"name":"owner создаёт Project-документ, 200","time":{"start":1761909876990,"stop":1761909877164,"duration":174},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 77, in test_create_and_archive_project_doc_access_by_roles\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2551-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":50},"items":[{"uid":"18aad3a28a0d33bf","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/18aad3a28a0d33bf","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899911083,"stop":1761899911265,"duration":182}},{"uid":"662934054fe9ce80","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/662934054fe9ce80","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834956872,"stop":1761834956994,"duration":122}},{"uid":"94e5e025ae7ab414","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/94e5e025ae7ab414","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834509652,"stop":1761834509843,"duration":191}},{"uid":"5df72ef129e7ce84","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/5df72ef129e7ce84","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833338528,"stop":1761833338994,"duration":466}},{"uid":"bdc69e74714304ec","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/bdc69e74714304ec","status":"passed","time":{"start":1761821518525,"stop":1761821518981,"duration":456}},{"uid":"3e6971ceede15ef9","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/3e6971ceede15ef9","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818638829,"stop":1761818639001,"duration":172}},{"uid":"f7a6c522b5663ab9","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/f7a6c522b5663ab9","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748521059,"stop":1761748521181,"duration":122}},{"uid":"838d4f7fe7797fee","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/838d4f7fe7797fee","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747781959,"stop":1761747782175,"duration":216}},{"uid":"81223d51ef99efab","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/81223d51ef99efab","status":"passed","time":{"start":1761746638948,"stop":1761746639619,"duration":671}},{"uid":"73f23cb49c91a21e","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/73f23cb49c91a21e","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745644507,"stop":1761745644637,"duration":130}},{"uid":"ae872ef7c8baf033","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ae872ef7c8baf033","status":"passed","time":{"start":1761576511444,"stop":1761576512451,"duration":1007}},{"uid":"b5cece90b8f0a6ac","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/b5cece90b8f0a6ac","status":"passed","time":{"start":1761557168699,"stop":1761557169178,"duration":479}},{"uid":"c495b023330c5d10","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/c495b023330c5d10","status":"passed","time":{"start":1761308392417,"stop":1761308392877,"duration":460}},{"uid":"b15f46b9aef56ae9","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/b15f46b9aef56ae9","status":"passed","time":{"start":1761306539985,"stop":1761306540792,"duration":807}},{"uid":"4d8c620ff663dc","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/4d8c620ff663dc","status":"passed","time":{"start":1761136835399,"stop":1761136835883,"duration":484}},{"uid":"232f3894ccec4b49","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/232f3894ccec4b49","status":"passed","time":{"start":1761135490565,"stop":1761135491134,"duration":569}},{"uid":"3f02aed619c28f74","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/3f02aed619c28f74","status":"passed","time":{"start":1761133951802,"stop":1761133952317,"duration":515}},{"uid":"d2525831e4132bba","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/d2525831e4132bba","status":"passed","time":{"start":1761128255438,"stop":1761128256017,"duration":579}},{"uid":"41fadb0e5f802a04","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/41fadb0e5f802a04","status":"passed","time":{"start":1761124363068,"stop":1761124363637,"duration":569}},{"uid":"60e59d5d73812327","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/60e59d5d73812327","status":"passed","time":{"start":1761119209358,"stop":1761119209853,"duration":495}}]},"tags":["backend"]},"source":"33feaba355ed2c94.json","parameterValues":["'owner_client'","200"]}