{"uid":"7ee35cf882a5675d","name":"Проверка доступа к siblings персонального документа: создатель - owner, просматривающий - guest","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_personal_siblings_docs_access_by_roles","historyId":"3664f872c9ebc20cd9868cd137c8c8a4","time":{"start":1761833449955,"stop":1761833450142,"duration":187},"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n\nОсобенность: к персональным документам имеет доступ только их владелец\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[owner_docs_by_guest_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', client_fixture = 'guest_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n>               assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\nE               AssertionError: Ошибка при создании документа 0: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:199: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761833315304,"stop":1761833315305,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761833315304,"stop":1761833315304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761833315305,"stop":1761833315305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761833315305,"stop":1761833315978,"duration":673},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761833315305,"stop":1761833315305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761833319617,"stop":1761833319920,"duration":303},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761833319920,"stop":1761833320230,"duration":310},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761833323076,"stop":1761833323713,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761833331842,"stop":1761833332433,"duration":591},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[owner_docs_by_guest_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', client_fixture = 'guest_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n>               assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\nE               AssertionError: Ошибка при создании документа 0: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:199: AssertionError","steps":[{"name":"Создание трёх персональных документов пользователем owner","time":{"start":1761833449955,"stop":1761833450142,"duration":187},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 199, in test_get_personal_siblings_docs_access_by_roles\n    assert (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2570-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"creator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":46},"items":[{"uid":"30dcec887c409ecd","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/30dcec887c409ecd","status":"passed","time":{"start":1761821676391,"stop":1761821677995,"duration":1604}},{"uid":"f4bb5c36dd45fe81","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/f4bb5c36dd45fe81","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818742750,"stop":1761818742920,"duration":170}},{"uid":"35646b72841389d5","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/35646b72841389d5","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748608204,"stop":1761748608335,"duration":131}},{"uid":"85e513c73e65a87","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/85e513c73e65a87","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747880140,"stop":1761747880321,"duration":181}},{"uid":"6593730b747f462c","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/6593730b747f462c","status":"passed","time":{"start":1761746834875,"stop":1761746837037,"duration":2162}},{"uid":"375a817c2d0a6b80","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/375a817c2d0a6b80","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745719704,"stop":1761745719822,"duration":118}},{"uid":"c1b2dc03e1d94ac4","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c1b2dc03e1d94ac4","status":"passed","time":{"start":1761576679381,"stop":1761576681030,"duration":1649}},{"uid":"a313a22999f4c20d","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/a313a22999f4c20d","status":"passed","time":{"start":1761557332325,"stop":1761557333840,"duration":1515}},{"uid":"4e417e38e42c3b2c","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/4e417e38e42c3b2c","status":"passed","time":{"start":1761308556693,"stop":1761308558223,"duration":1530}},{"uid":"4a497a5d77e26dc7","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/4a497a5d77e26dc7","status":"passed","time":{"start":1761306715937,"stop":1761306717619,"duration":1682}},{"uid":"5ef3b2690a62b7a0","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/5ef3b2690a62b7a0","status":"passed","time":{"start":1761137010216,"stop":1761137012090,"duration":1874}},{"uid":"b437e870a4a502d6","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/b437e870a4a502d6","status":"passed","time":{"start":1761135682804,"stop":1761135684734,"duration":1930}},{"uid":"10da2842206d74e8","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/10da2842206d74e8","status":"passed","time":{"start":1761134116424,"stop":1761134118049,"duration":1625}},{"uid":"545209c74ea59702","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/545209c74ea59702","status":"passed","time":{"start":1761128466877,"stop":1761128468883,"duration":2006}},{"uid":"f8e9c2080ce9276d","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/f8e9c2080ce9276d","status":"passed","time":{"start":1761124578466,"stop":1761124580558,"duration":2092}},{"uid":"6653cce7dd86bf1c","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/6653cce7dd86bf1c","status":"passed","time":{"start":1761119392173,"stop":1761119393842,"duration":1669}},{"uid":"52e9e0d8f108c01d","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/52e9e0d8f108c01d","status":"passed","time":{"start":1761053422671,"stop":1761053424170,"duration":1499}},{"uid":"8c0118971634d157","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/8c0118971634d157","status":"passed","time":{"start":1761047321163,"stop":1761047322945,"duration":1782}},{"uid":"86124c1b7cacef27","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/86124c1b7cacef27","status":"passed","time":{"start":1760614739585,"stop":1760614741604,"duration":2019}},{"uid":"ba1dba03d0dd5dec","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/ba1dba03d0dd5dec","status":"passed","time":{"start":1760599542509,"stop":1760599544353,"duration":1844}}]},"tags":["backend"]},"source":"7ee35cf882a5675d.json","parameterValues":["'guest_client'","'owner_client'","403"]}