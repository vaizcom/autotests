{"uid":"92f02df669ff016b","name":"Создание Space-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_space_doc_access_by_roles","historyId":"d9ef71fb375b91e3448c594aa8e7af45","time":{"start":1752234294102,"stop":1752234294687,"duration":585},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n            assert resp.status_code == expected_status\n    \n            if expected_status == 200:\n                doc_id = resp.json()['payload']['document']['_id']\n                with allure.step('Созданный Space-документ содержит title'):\n                    assert resp.json()['payload']['document']['title'] == title\n    \n                with allure.step('Архивация Space-документа'):\n                    archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>                   assert archive_resp.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1752234256305,"stop":1752234256305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752234256305,"stop":1752234256305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752234256305,"stop":1752234256305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752234256305,"stop":1752234256819,"duration":514},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752234256305,"stop":1752234256305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752234281745,"stop":1752234282019,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752234282019,"stop":1752234282520,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n            assert resp.status_code == expected_status\n    \n            if expected_status == 200:\n                doc_id = resp.json()['payload']['document']['_id']\n                with allure.step('Созданный Space-документ содержит title'):\n                    assert resp.json()['payload']['document']['title'] == title\n    \n                with allure.step('Архивация Space-документа'):\n                    archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>                   assert archive_resp.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","steps":[{"name":"owner создаёт Space-документ, 200","time":{"start":1752234294102,"stop":1752234294687,"duration":585},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 41, in test_create_and_archive_space_doc_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[{"name":"Созданный Space-документ содержит title","time":{"start":1752234294443,"stop":1752234294443,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Space-документа","time":{"start":1752234294443,"stop":1752234294686,"duration":243},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 41, in test_create_and_archive_space_doc_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2527-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":16,"unknown":0,"total":17},"items":[{"uid":"8a0cfa215e71e155","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/8a0cfa215e71e155","status":"passed","time":{"start":1752233470244,"stop":1752233471010,"duration":766}},{"uid":"607160b67a2657b7","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/607160b67a2657b7","status":"passed","time":{"start":1752232549606,"stop":1752232550188,"duration":582}},{"uid":"a3cf24580ef3d9f1","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/a3cf24580ef3d9f1","status":"passed","time":{"start":1752232080798,"stop":1752232081490,"duration":692}},{"uid":"2166b052bb1be43f","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/2166b052bb1be43f","status":"passed","time":{"start":1752223492610,"stop":1752223493121,"duration":511}},{"uid":"d66d54b7dd8bfa3","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/d66d54b7dd8bfa3","status":"passed","time":{"start":1752218255097,"stop":1752218255607,"duration":510}},{"uid":"b0fedec0e82f536","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/b0fedec0e82f536","status":"passed","time":{"start":1752151021201,"stop":1752151021806,"duration":605}},{"uid":"f7b265f5fd861069","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/f7b265f5fd861069","status":"passed","time":{"start":1752148897122,"stop":1752148897602,"duration":480}},{"uid":"ff527958bb3e5af3","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/ff527958bb3e5af3","status":"passed","time":{"start":1752138383046,"stop":1752138383616,"duration":570}},{"uid":"adec7f5dad7eb9aa","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/adec7f5dad7eb9aa","status":"passed","time":{"start":1752137258634,"stop":1752137259192,"duration":558}},{"uid":"dac9d177ff5936c","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/dac9d177ff5936c","status":"passed","time":{"start":1752133890208,"stop":1752133890948,"duration":740}},{"uid":"a1a7a17d745b5d35","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/a1a7a17d745b5d35","status":"passed","time":{"start":1752066487214,"stop":1752066487732,"duration":518}},{"uid":"fe31b11040bdeb9b","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/fe31b11040bdeb9b","status":"passed","time":{"start":1752065492843,"stop":1752065493564,"duration":721}},{"uid":"1d2672f01f5e9f8f","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/1d2672f01f5e9f8f","status":"passed","time":{"start":1752064707207,"stop":1752064708098,"duration":891}},{"uid":"f9317f107da4f430","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/f9317f107da4f430","status":"passed","time":{"start":1752062492065,"stop":1752062492638,"duration":573}},{"uid":"aa7fe8776839df40","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/aa7fe8776839df40","status":"passed","time":{"start":1752060632386,"stop":1752060632898,"duration":512}},{"uid":"630754ffcb663417","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/630754ffcb663417","status":"passed","time":{"start":1752059603311,"stop":1752059604023,"duration":712}}]},"tags":["backend"]},"source":"92f02df669ff016b.json","parameterValues":["'owner_client'","200"]}