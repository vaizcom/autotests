{"uid":"3f8924c6f4f8d033","name":"Редактирование Personal-документа: создание owner, редактирование manager","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_personal_doc_different_roles","historyId":"7ba21790f72d27d53ae29912c3e1a2f5","time":{"start":1761747832563,"stop":1761747832753,"duration":190},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[owner_personal_by_manager]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', editor_fixture = 'manager_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:197: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761747760278,"stop":1761747760278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761747760278,"stop":1761747760906,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761747765139,"stop":1761747765458,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761747765458,"stop":1761747765749,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761747766550,"stop":1761747766846,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761747777032,"stop":1761747777311,"duration":279},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[owner_personal_by_manager]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', editor_fixture = 'manager_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:197: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью owner","time":{"start":1761747832564,"stop":1761747832753,"duration":189},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 197, in test_edit_personal_doc_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"editor_fixture","value":"'manager_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"eb0524e50e6fa231","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/eb0524e50e6fa231","status":"passed","time":{"start":1761746729323,"stop":1761746730265,"duration":942}},{"uid":"dd9fbf1fa417b156","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/dd9fbf1fa417b156","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745684277,"stop":1761745684396,"duration":119}},{"uid":"cc0275f328ff6bd4","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/cc0275f328ff6bd4","status":"passed","time":{"start":1761576587243,"stop":1761576587909,"duration":666}},{"uid":"6a179442a85a0bd2","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/6a179442a85a0bd2","status":"passed","time":{"start":1761557244005,"stop":1761557245078,"duration":1073}},{"uid":"58b583a8e51c915b","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/58b583a8e51c915b","status":"passed","time":{"start":1761308469327,"stop":1761308469962,"duration":635}},{"uid":"5f77353555a1c0be","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/5f77353555a1c0be","status":"passed","time":{"start":1761306617695,"stop":1761306618450,"duration":755}},{"uid":"4534662566932a93","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/4534662566932a93","status":"passed","time":{"start":1761136915183,"stop":1761136915875,"duration":692}},{"uid":"520431093f4a0471","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/520431093f4a0471","status":"passed","time":{"start":1761135577671,"stop":1761135578710,"duration":1039}},{"uid":"9fb2355047eea776","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/9fb2355047eea776","status":"passed","time":{"start":1761134026622,"stop":1761134027279,"duration":657}},{"uid":"2b2c88422d6b50f1","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/2b2c88422d6b50f1","status":"passed","time":{"start":1761128351879,"stop":1761128352730,"duration":851}},{"uid":"25c51a27b0671910","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/25c51a27b0671910","status":"passed","time":{"start":1761124460399,"stop":1761124461228,"duration":829}},{"uid":"89af9c544cd68685","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/89af9c544cd68685","status":"passed","time":{"start":1761119292160,"stop":1761119293480,"duration":1320}},{"uid":"c614dcffb37c03c","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/c614dcffb37c03c","status":"passed","time":{"start":1761053329743,"stop":1761053330397,"duration":654}},{"uid":"fd00a32c7e6ee18e","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/fd00a32c7e6ee18e","status":"passed","time":{"start":1761047220399,"stop":1761047221122,"duration":723}},{"uid":"de69e6c02470fc0a","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/de69e6c02470fc0a","status":"passed","time":{"start":1760614636038,"stop":1760614636809,"duration":771}},{"uid":"5b34be955c36eb83","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/5b34be955c36eb83","status":"passed","time":{"start":1760599433689,"stop":1760599434416,"duration":727}},{"uid":"fe9fe193bda7ad1d","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/fe9fe193bda7ad1d","status":"passed","time":{"start":1760535466861,"stop":1760535467534,"duration":673}},{"uid":"f5f266d3ff44b05c","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/f5f266d3ff44b05c","status":"passed","time":{"start":1760533936089,"stop":1760533936922,"duration":833}},{"uid":"9b79a77874702087","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/9b79a77874702087","status":"passed","time":{"start":1760532503264,"stop":1760532503901,"duration":637}},{"uid":"60f38955e526ffec","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/60f38955e526ffec","status":"passed","time":{"start":1760529318040,"stop":1760529318679,"duration":639}}]},"tags":["backend"]},"source":"3f8924c6f4f8d033.json","parameterValues":["'owner_client'","'manager_client'","403"]}