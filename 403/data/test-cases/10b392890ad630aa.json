{"uid":"10b392890ad630aa","name":"Проверка доступа к списку документов в Project для роли guest","fullName":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles#test_get_project_and_space_docs_access_by_roles","historyId":"6f3854d14f38620fad053a7907961e42","time":{"start":1761911244687,"stop":1761911244866,"duration":179},"description":"\n    Проверяем что разные роли могут получить списки документов из пространства и проекта.\n    Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n\n    Проверяется получение и наличие в ответе всех созданных документов с учетом\n    ожидаемого статуса запроса для каждой роли.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить списки документов из пространства и проекта.\nТест параметризован для проверки разных типов клиентов и контейнеров документов.\n\nПроверяется получение и наличие в ответе всех созданных документов с учетом\nожидаемого статуса запроса для каждой роли.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_docs_access_by_roles[project_docs-guest]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'guest_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7fbc8f32c180>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_project_and_space_docs_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить списки документов из пространства и проекта.\n        Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n    \n        Проверяется получение и наличие в ответе всех созданных документов с учетом\n        ожидаемого статуса запроса для каждой роли.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документам в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            space_id = request.getfixturevalue('main_space')\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к списку документов в {kind} для роли {role}')\n    \n        # Создаем документы с помощью фикстуры\n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n>       created_docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761911162887,"stop":1761911162887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761911162888,"stop":1761911163517,"duration":629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761911166774,"stop":1761911167100,"duration":326},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761911167101,"stop":1761911167366,"duration":265},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761911167366,"stop":1761911167640,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761911170179,"stop":1761911170486,"duration":307},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761911244687,"stop":1761911244687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить списки документов из пространства и проекта.\n    Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n\n    Проверяется получение и наличие в ответе всех созданных документов с учетом\n    ожидаемого статуса запроса для каждой роли.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_docs_access_by_roles[project_docs-guest]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'guest_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7fbc8f32c180>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_project_and_space_docs_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить списки документов из пространства и проекта.\n        Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n    \n        Проверяется получение и наличие в ответе всех созданных документов с учетом\n        ожидаемого статуса запроса для каждой роли.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документам в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            space_id = request.getfixturevalue('main_space')\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к списку документов в {kind} для роли {role}')\n    \n        # Создаем документы с помощью фикстуры\n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n>       created_docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документам в Project","time":{"start":1761911244687,"stop":1761911244687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Project разными ролями","time":{"start":1761911244687,"stop":1761911244865,"duration":178},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1761911244687,"stop":1761911244865,"duration":178},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761911244874,"stop":1761911244874,"duration":0},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761911244874,"stop":1761911244874,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_docs_list_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2557-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"container_fixture","value":"'main_project'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":53},"items":[{"uid":"7a92919beeb5df9e","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/7a92919beeb5df9e","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910864568,"stop":1761910864693,"duration":125}},{"uid":"9d9e440d08ed9d34","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/9d9e440d08ed9d34","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910565447,"stop":1761910565562,"duration":115}},{"uid":"b9c01de2dc534202","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/b9c01de2dc534202","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909945346,"stop":1761909945521,"duration":175}},{"uid":"bd49a2f1e9b4b6c1","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/bd49a2f1e9b4b6c1","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899976113,"stop":1761899976288,"duration":175}},{"uid":"b551ccccf4e4d460","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/b551ccccf4e4d460","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835010493,"stop":1761835010617,"duration":124}},{"uid":"b21537f3fae2014","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/b21537f3fae2014","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834577875,"stop":1761834578057,"duration":182}},{"uid":"294f4bf232ab0fe0","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/294f4bf232ab0fe0","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833413274,"stop":1761833413452,"duration":178}},{"uid":"9e2aef077a8ce750","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/9e2aef077a8ce750","status":"passed","time":{"start":1761821627708,"stop":1761821628606,"duration":898}},{"uid":"7d721e12fadc7375","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/7d721e12fadc7375","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818709262,"stop":1761818709436,"duration":174}},{"uid":"e25cc36a56a5fe75","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/e25cc36a56a5fe75","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748577911,"stop":1761748578029,"duration":118}},{"uid":"1b89fc0e05ecac99","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/1b89fc0e05ecac99","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747846367,"stop":1761747846554,"duration":187}},{"uid":"d9a287dd0368f609","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/d9a287dd0368f609","status":"passed","time":{"start":1761746776402,"stop":1761746777463,"duration":1061}},{"uid":"dc7113c44345173d","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/dc7113c44345173d","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745694169,"stop":1761745694295,"duration":126}},{"uid":"a0cdd5d1581803cf","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/a0cdd5d1581803cf","status":"passed","time":{"start":1761576627974,"stop":1761576628942,"duration":968}},{"uid":"6544491b97a7d478","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/6544491b97a7d478","status":"passed","time":{"start":1761557283029,"stop":1761557284065,"duration":1036}},{"uid":"76a807477d3a23ee","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/76a807477d3a23ee","status":"passed","time":{"start":1761308508172,"stop":1761308509050,"duration":878}},{"uid":"f7a6364d33e25e93","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/f7a6364d33e25e93","status":"passed","time":{"start":1761306659819,"stop":1761306661160,"duration":1341}},{"uid":"530bd4feb6a2b5f","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/530bd4feb6a2b5f","status":"passed","time":{"start":1761136957203,"stop":1761136958378,"duration":1175}},{"uid":"224cb8a21a9668e4","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/224cb8a21a9668e4","status":"passed","time":{"start":1761135624355,"stop":1761135625723,"duration":1368}},{"uid":"f30369e752be0d21","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/f30369e752be0d21","status":"passed","time":{"start":1761134065846,"stop":1761134066822,"duration":976}}]},"tags":["backend"]},"source":"10b392890ad630aa.json","parameterValues":["'guest_client'","'main_project'","200","'Project'"]}