{"uid":"d089250b083b2a51","name":"Просмотр соседей Space-документа для роли manager (без создания)","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_space_doc_siblings_view_only_access","historyId":"03d6a65ad566d18700c716a826251c02","time":{"start":1752501064110,"stop":1752501065576,"duration":1466},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_view_only_access[manager]>>\nmain_space = '6866309d85fb8d104544a61e'\nmember_client = <tests.core.client.APIClient object at 0x7fd33ced8690>\nclient_fixture = 'manager_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_view_only_access(request, main_space, member_client, client_fixture, expected_status):\n        role = client_fixture.replace('_client', '')\n        api_client = request.getfixturevalue(client_fixture)\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Просмотр соседей Space-документа для роли {role} (без создания)')\n    \n        with allure.step('Создание документов (в рандомной роли) для теста просмотра siblings'):\n            random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n            doc_ids = []\n            for index in range(3):\n                title = f'{current_date}_member_create_Sibling Test Doc {index}'\n                create_resp = random_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n>               assert create_resp.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:94: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500916493,"stop":1752500917294,"duration":801},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500917294,"stop":1752500918389,"duration":1095},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752500924480,"stop":1752500924955,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752500927469,"stop":1752500927992,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_view_only_access[manager]>>\nmain_space = '6866309d85fb8d104544a61e'\nmember_client = <tests.core.client.APIClient object at 0x7fd33ced8690>\nclient_fixture = 'manager_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_view_only_access(request, main_space, member_client, client_fixture, expected_status):\n        role = client_fixture.replace('_client', '')\n        api_client = request.getfixturevalue(client_fixture)\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Просмотр соседей Space-документа для роли {role} (без создания)')\n    \n        with allure.step('Создание документов (в рандомной роли) для теста просмотра siblings'):\n            random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n            doc_ids = []\n            for index in range(3):\n                title = f'{current_date}_member_create_Sibling Test Doc {index}'\n                create_resp = random_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n>               assert create_resp.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:94: AssertionError","steps":[{"name":"Создание документов (в рандомной роли) для теста просмотра siblings","time":{"start":1752501064110,"stop":1752501065576,"duration":1466},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 94, in test_get_space_doc_siblings_view_only_access\n    assert create_resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":42,"unknown":0,"total":44},"items":[{"uid":"3bb2bcc5d305faa5","reportUrl":"https://vaizcom.github.io/autotests/295//#testresult/3bb2bcc5d305faa5","status":"failed","statusDetails":"AssertionError: Некорректный правый сосед\nassert '687509ca61182a5aefebae1a' == '687509cb61182a5aefebaea9'\n  \n  - 687509cb61182a5aefebaea9\n  ?        ^               -\n  + 687509ca61182a5aefebae1a\n  ?        ^              +","time":{"start":1752500681082,"stop":1752500684496,"duration":3414}},{"uid":"74e8607f831e5476","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/74e8607f831e5476","status":"passed","time":{"start":1752499358092,"stop":1752499362405,"duration":4313}},{"uid":"8760a530add0ef4","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/8760a530add0ef4","status":"passed","time":{"start":1752498291100,"stop":1752498292863,"duration":1763}},{"uid":"8f85353a843dd440","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/8f85353a843dd440","status":"passed","time":{"start":1752496641490,"stop":1752496643749,"duration":2259}},{"uid":"f9fce18a011cca42","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/f9fce18a011cca42","status":"passed","time":{"start":1752481742138,"stop":1752481743922,"duration":1784}},{"uid":"97866011afd59641","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/97866011afd59641","status":"passed","time":{"start":1752479787270,"stop":1752479789761,"duration":2491}},{"uid":"3d3d889b9d5dbdbb","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/3d3d889b9d5dbdbb","status":"passed","time":{"start":1752477935506,"stop":1752477937182,"duration":1676}},{"uid":"9eeabcb7f4d69449","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/9eeabcb7f4d69449","status":"passed","time":{"start":1752236803123,"stop":1752236805115,"duration":1992}},{"uid":"2efbfad4f908a59d","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/2efbfad4f908a59d","status":"passed","time":{"start":1752236170834,"stop":1752236172946,"duration":2112}},{"uid":"567f451d1fa80343","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/567f451d1fa80343","status":"passed","time":{"start":1752235422352,"stop":1752235424567,"duration":2215}},{"uid":"44ef0423eeab12ff","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/44ef0423eeab12ff","status":"passed","time":{"start":1752235384417,"stop":1752235386373,"duration":1956}},{"uid":"867c2dd4a167d028","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/867c2dd4a167d028","status":"passed","time":{"start":1752234441400,"stop":1752234443706,"duration":2306}},{"uid":"2a1080cdd1769a31","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/2a1080cdd1769a31","status":"passed","time":{"start":1752234406648,"stop":1752234408727,"duration":2079}},{"uid":"26db96bd56eb2caa","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/26db96bd56eb2caa","status":"passed","time":{"start":1752233592515,"stop":1752233595175,"duration":2660}},{"uid":"845d71b432a8e8b1","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/845d71b432a8e8b1","status":"passed","time":{"start":1752232652592,"stop":1752232654716,"duration":2124}},{"uid":"d45e9976dd4aad9c","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/d45e9976dd4aad9c","status":"passed","time":{"start":1752232190533,"stop":1752232192696,"duration":2163}},{"uid":"6a252eb18f3100e","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/6a252eb18f3100e","status":"passed","time":{"start":1752223584485,"stop":1752223586148,"duration":1663}},{"uid":"5f844400f5214321","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/5f844400f5214321","status":"passed","time":{"start":1752218323823,"stop":1752218325911,"duration":2088}},{"uid":"c53a8bb724fc2ae0","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/c53a8bb724fc2ae0","status":"passed","time":{"start":1752151092023,"stop":1752151094346,"duration":2323}},{"uid":"691c645074359efe","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/691c645074359efe","status":"passed","time":{"start":1752148940906,"stop":1752148942540,"duration":1634}}]},"tags":["backend"]},"source":"d089250b083b2a51.json","parameterValues":["'manager_client'","200"]}