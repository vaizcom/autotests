{"uid":"8f4990792fa2d3dd","name":"Проверка доступа к siblings Space-документа: создатель - manager, просматривающий - guest","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_project_and_space_siblings_docs_access_by_roles","historyId":"e46a4e2376aeb2183db3c5299166dc87","time":{"start":1759767447487,"stop":1759767448455,"duration":968},"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n- Типа документа (Space/Project)\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '68e3eb987fd6ea7a1c48eaa7' == '68e3eb981140fad5d3ded85e'\n  \n  - 68e3eb981140fad5d3ded85e\n  + 68e3eb987fd6ea7a1c48eaa7","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-manager_docs_by_guest_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'guest_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n>                   assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\nE                   AssertionError: Некорректный правый сосед\nE                   assert '68e3eb987fd6ea7a1c48eaa7' == '68e3eb981140fad5d3ded85e'\nE                     \nE                     - 68e3eb981140fad5d3ded85e\nE                     + 68e3eb987fd6ea7a1c48eaa7\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:107: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767260767,"stop":1759767261300,"duration":533},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767261301,"stop":1759767261750,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767263179,"stop":1759767263448,"duration":269},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1759767264917,"stop":1759767265384,"duration":467},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '68e3eb987fd6ea7a1c48eaa7' == '68e3eb981140fad5d3ded85e'\n  \n  - 68e3eb981140fad5d3ded85e\n  + 68e3eb987fd6ea7a1c48eaa7","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-manager_docs_by_guest_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'guest_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n>                   assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\nE                   AssertionError: Некорректный правый сосед\nE                   assert '68e3eb987fd6ea7a1c48eaa7' == '68e3eb981140fad5d3ded85e'\nE                     \nE                     - 68e3eb981140fad5d3ded85e\nE                     + 68e3eb987fd6ea7a1c48eaa7\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:107: AssertionError","steps":[{"name":"Создание трёх Space-документов пользователем manager","time":{"start":1759767447487,"stop":1759767448253,"duration":766},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Попытка получения siblings для среднего документа пользователем guest","time":{"start":1759767448253,"stop":1759767448454,"duration":201},"status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '68e3eb987fd6ea7a1c48eaa7' == '68e3eb981140fad5d3ded85e'\n  \n  - 68e3eb981140fad5d3ded85e\n  + 68e3eb987fd6ea7a1c48eaa7\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 107, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n","steps":[{"name":"Проверка корректности данных siblings","time":{"start":1759767448454,"stop":1759767448454,"duration":0},"status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '68e3eb987fd6ea7a1c48eaa7' == '68e3eb981140fad5d3ded85e'\n  \n  - 68e3eb981140fad5d3ded85e\n  + 68e3eb987fd6ea7a1c48eaa7\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 107, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2672-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"creator_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":32,"unknown":0,"total":34},"items":[{"uid":"e5fac30152f6d32d","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/e5fac30152f6d32d","status":"passed","time":{"start":1759753909439,"stop":1759753911136,"duration":1697}},{"uid":"8658b8858e5cea06","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/8658b8858e5cea06","status":"passed","time":{"start":1759743873576,"stop":1759743875336,"duration":1760}},{"uid":"edcdfe602fe2c9a5","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/edcdfe602fe2c9a5","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485533983,"stop":1759485533983,"duration":0}},{"uid":"6a23d34f332313d7","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/6a23d34f332313d7","status":"passed","time":{"start":1759232498626,"stop":1759232500430,"duration":1804}},{"uid":"26731ce0a110fa88","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/26731ce0a110fa88","status":"passed","time":{"start":1759140779886,"stop":1759140781889,"duration":2003}},{"uid":"f7ef8cdf0e12142d","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/f7ef8cdf0e12142d","status":"passed","time":{"start":1758891850490,"stop":1758891852573,"duration":2083}},{"uid":"c935d6c4ea1ad784","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/c935d6c4ea1ad784","status":"passed","time":{"start":1758807802081,"stop":1758807804341,"duration":2260}},{"uid":"3a06b257d0e276f7","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/3a06b257d0e276f7","status":"passed","time":{"start":1758806675601,"stop":1758806677663,"duration":2062}},{"uid":"f7fc6028eb812cdb","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/f7fc6028eb812cdb","status":"passed","time":{"start":1758791255253,"stop":1758791257517,"duration":2264}},{"uid":"75766faf21920618","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/75766faf21920618","status":"passed","time":{"start":1758540565097,"stop":1758540566935,"duration":1838}},{"uid":"b54314e19170dc87","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/b54314e19170dc87","status":"passed","time":{"start":1758289195125,"stop":1758289197368,"duration":2243}},{"uid":"c1ca5a2572b6c0b7","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/c1ca5a2572b6c0b7","status":"passed","time":{"start":1755852366701,"stop":1755852368530,"duration":1829}},{"uid":"6978e2bb26c1f473","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/6978e2bb26c1f473","status":"passed","time":{"start":1755851874806,"stop":1755851876667,"duration":1861}},{"uid":"81f6f782329360e9","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/81f6f782329360e9","status":"passed","time":{"start":1755848013847,"stop":1755848015713,"duration":1866}},{"uid":"5b21c467b47ad047","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/5b21c467b47ad047","status":"passed","time":{"start":1755777878792,"stop":1755777880787,"duration":1995}},{"uid":"6fcc345044a87535","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/6fcc345044a87535","status":"passed","time":{"start":1755774516499,"stop":1755774518424,"duration":1925}},{"uid":"237b61238b878da8","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/237b61238b878da8","status":"passed","time":{"start":1755694647579,"stop":1755694649754,"duration":2175}},{"uid":"7209c4ab5ea97b05","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/7209c4ab5ea97b05","status":"passed","time":{"start":1755694078290,"stop":1755694080154,"duration":1864}},{"uid":"cb29362befb7408c","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/cb29362befb7408c","status":"passed","time":{"start":1755687149191,"stop":1755687151132,"duration":1941}},{"uid":"65ac6139ff5b1192","reportUrl":"https://vaizcom.github.io/autotests/321//#testresult/65ac6139ff5b1192","status":"passed","time":{"start":1755682896502,"stop":1755682898297,"duration":1795}}]},"tags":["backend"]},"source":"8f4990792fa2d3dd.json","parameterValues":["'guest_client'","'main_space'","'manager_client'","200","'Space'"]}