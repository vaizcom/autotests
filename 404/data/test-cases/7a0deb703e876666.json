{"uid":"7a0deb703e876666","name":"test_cross_kind_isolation","fullName":"tests.test_backend.document.test_get_documents#test_cross_kind_isolation","historyId":"83c937f202cbbba3cdcaf51e2b41d1c3","time":{"start":1761921880219,"stop":1761921880219,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fc7d133bfd0>\n\n    @pytest.fixture(scope='session')\n    def temp_space(owner_client):\n        client = owner_client\n        name = generate_space_name()\n        response = client.post(**create_space_endpoint(name=name))\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:135: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1761921773063,"stop":1761921773182,"duration":119},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 135, in temp_space\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_documents"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_documents"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":55},"items":[{"uid":"52637562d6810a04","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/52637562d6810a04","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912191234,"stop":1761912191234,"duration":0}},{"uid":"4ce3015c9a59883d","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/4ce3015c9a59883d","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911304197,"stop":1761911304197,"duration":0}},{"uid":"f841571db3b0e2a","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/f841571db3b0e2a","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910914898,"stop":1761910914898,"duration":0}},{"uid":"a622de1104a72e35","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/a622de1104a72e35","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910616021,"stop":1761910616021,"duration":0}},{"uid":"a3882a4edbf791b9","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/a3882a4edbf791b9","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910009159,"stop":1761910009159,"duration":0}},{"uid":"1799428fa95a2ea","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/1799428fa95a2ea","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761900040271,"stop":1761900040271,"duration":0}},{"uid":"1b565c31b4f069c4","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/1b565c31b4f069c4","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835060420,"stop":1761835060420,"duration":0}},{"uid":"d0456a2d9f020c5e","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/d0456a2d9f020c5e","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834645574,"stop":1761834645574,"duration":0}},{"uid":"82be2b063d69f636","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/82be2b063d69f636","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833481951,"stop":1761833481951,"duration":0}},{"uid":"5069f0073072a441","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/5069f0073072a441","status":"passed","time":{"start":1761821762045,"stop":1761821762682,"duration":637}},{"uid":"8c9046fcfaf61106","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/8c9046fcfaf61106","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818770081,"stop":1761818770081,"duration":0}},{"uid":"2d2489e41a3147e","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/2d2489e41a3147e","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748633372,"stop":1761748633372,"duration":0}},{"uid":"b5b911a1b9561d7e","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/b5b911a1b9561d7e","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747909670,"stop":1761747909670,"duration":0}},{"uid":"1dfe7ef5fde95567","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/1dfe7ef5fde95567","status":"passed","time":{"start":1761746951002,"stop":1761746952015,"duration":1013}},{"uid":"4a43dfc42e659fe4","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/4a43dfc42e659fe4","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745741503,"stop":1761745741503,"duration":0}},{"uid":"e7cdc10405c2bb34","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/e7cdc10405c2bb34","status":"passed","time":{"start":1761576780557,"stop":1761576781689,"duration":1132}},{"uid":"dfa502ed0da7153d","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/dfa502ed0da7153d","status":"passed","time":{"start":1761557415726,"stop":1761557416383,"duration":657}},{"uid":"34b877467dc543f2","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/34b877467dc543f2","status":"passed","time":{"start":1761308635558,"stop":1761308636178,"duration":620}},{"uid":"1b7d167a71afcf86","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/1b7d167a71afcf86","status":"passed","time":{"start":1761306799784,"stop":1761306800503,"duration":719}},{"uid":"de9f5a85bf752714","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/de9f5a85bf752714","status":"passed","time":{"start":1761137095426,"stop":1761137096142,"duration":716}}]},"tags":["backend"]},"source":"7a0deb703e876666.json","parameterValues":[]}