{"uid":"49e9314272645634","name":"Негативный кейс: documentId=abc","fullName":"tests.test_backend.document.test_get_document#test_get_document_invalid_input","historyId":"c6b522f8332615cfb42defd5dabf9579","time":{"start":1759837456824,"stop":1759837456992,"duration":168},"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74', document_id = 'abc'\nexpected_status = 400, expected_error_code = 'InvalidForm'\n\n    @pytest.mark.parametrize(\n        'document_id, expected_status, expected_error_code',\n        [\n            ('nonexistent_id', 400, 'InvalidForm'),\n            (None, 400, 'InvalidForm'),\n            ('', 400, 'InvalidForm'),\n            (123, 400, 'InvalidForm'),\n            ('abc', 400, 'InvalidForm'),\n            ('!@#$', 400, 'InvalidForm'),\n            ({'id': '123'}, 400, 'InvalidForm'),\n        ],\n        ids=['invalid-id', 'missing-id', 'empty-string', 'int-id', 'short-str', 'special-chars', 'json-object'],\n    )\n    def test_get_document_invalid_input(owner_client, temp_space, document_id, expected_status, expected_error_code):\n        allure.dynamic.title(f'Негативный кейс: documentId={document_id}')\n    \n        with allure.step('Отправка запроса с некорректным или отсутствующим documentId'):\n            payload = {'documentId': document_id} if document_id is not None else {}\n            resp = owner_client.post(\n                path='/GetDocument',\n                json=payload,\n                headers={'Content-Type': 'application/json', 'Current-Space-Id': temp_space},\n            )\n>           assert resp.status_code == expected_status\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_document.py:64: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74', document_id = 'abc'\nexpected_status = 400, expected_error_code = 'InvalidForm'\n\n    @pytest.mark.parametrize(\n        'document_id, expected_status, expected_error_code',\n        [\n            ('nonexistent_id', 400, 'InvalidForm'),\n            (None, 400, 'InvalidForm'),\n            ('', 400, 'InvalidForm'),\n            (123, 400, 'InvalidForm'),\n            ('abc', 400, 'InvalidForm'),\n            ('!@#$', 400, 'InvalidForm'),\n            ({'id': '123'}, 400, 'InvalidForm'),\n        ],\n        ids=['invalid-id', 'missing-id', 'empty-string', 'int-id', 'short-str', 'special-chars', 'json-object'],\n    )\n    def test_get_document_invalid_input(owner_client, temp_space, document_id, expected_status, expected_error_code):\n        allure.dynamic.title(f'Негативный кейс: documentId={document_id}')\n    \n        with allure.step('Отправка запроса с некорректным или отсутствующим documentId'):\n            payload = {'documentId': document_id} if document_id is not None else {}\n            resp = owner_client.post(\n                path='/GetDocument',\n                json=payload,\n                headers={'Content-Type': 'application/json', 'Current-Space-Id': temp_space},\n            )\n>           assert resp.status_code == expected_status\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_document.py:64: AssertionError","steps":[{"name":"Отправка запроса с некорректным или отсутствующим documentId","time":{"start":1759837456824,"stop":1759837456991,"duration":167},"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_document.py\", line 64, in test_get_document_invalid_input\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"document_id","value":"'abc'"},{"name":"expected_error_code","value":"'InvalidForm'"},{"name":"expected_status","value":"400"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"3e4a0dde09a1a27c","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/3e4a0dde09a1a27c","status":"passed","time":{"start":1759836299189,"stop":1759836299421,"duration":232}},{"uid":"86895530a5381da0","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/86895530a5381da0","status":"passed","time":{"start":1759835649443,"stop":1759835649619,"duration":176}},{"uid":"cc6c4c7afdbc1bb0","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/cc6c4c7afdbc1bb0","status":"passed","time":{"start":1759834764373,"stop":1759834764609,"duration":236}}]},"tags":["backend"]},"source":"49e9314272645634.json","parameterValues":["'abc'","'InvalidForm'","400"]}