{"uid":"e8ba93104721592","name":"Архивирование Space-документа для роли manager","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_space_doc","historyId":"5e7c8af1758830173e4e2d42e4b077e5","time":{"start":1761747772579,"stop":1761747772778,"duration":199},"description":"\n    Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\n    Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n    и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n    Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n    Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n    с использованием случайного клиента с повышенными правами.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\nТест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\nи оценивает возможность архивации документа на основе предоставленной роли client_fixture.\nПроверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\nДополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\nс использованием случайного клиента с повышенными правами.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[manager]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n    \n        Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n        и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n        Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n        Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n        с использованием случайного клиента с повышенными правами.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:56: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761747760278,"stop":1761747760278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761747760278,"stop":1761747760906,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761747765139,"stop":1761747765458,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761747765458,"stop":1761747765749,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761747766550,"stop":1761747766846,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\n    Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n    и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n    Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n    Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n    с использованием случайного клиента с повышенными правами.\n    ","status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[manager]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n    \n        Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n        и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n        Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n        Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n        с использованием случайного клиента с повышенными правами.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:56: AssertionError","steps":[{"name":"Случайный клиент(owner_client) создаёт Space-документ для архивации (title = 29.10_14:22:52 Space Doc For Archive Check)","time":{"start":1761747772579,"stop":1761747772778,"duration":199},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 56, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки списка","time":{"start":1761747772778,"stop":1761747772778,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 56, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"68de796d00c80e88","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/68de796d00c80e88","status":"passed","time":{"start":1761746627365,"stop":1761746628438,"duration":1073}},{"uid":"f2d891e720ad5518","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/f2d891e720ad5518","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761745637968,"stop":1761745638088,"duration":120}},{"uid":"dba0c04f2c688ee7","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/dba0c04f2c688ee7","status":"passed","time":{"start":1761576501557,"stop":1761576502178,"duration":621}},{"uid":"a91f814b8b5cf092","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/a91f814b8b5cf092","status":"passed","time":{"start":1761557157577,"stop":1761557158387,"duration":810}},{"uid":"81a17c47662972d5","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/81a17c47662972d5","status":"passed","time":{"start":1761308382323,"stop":1761308383148,"duration":825}},{"uid":"7369891bb7427cea","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/7369891bb7427cea","status":"passed","time":{"start":1761306530145,"stop":1761306530830,"duration":685}},{"uid":"5a4069d4491d8423","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/5a4069d4491d8423","status":"passed","time":{"start":1761136824578,"stop":1761136825282,"duration":704}},{"uid":"6347175ffa4de87a","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/6347175ffa4de87a","status":"passed","time":{"start":1761135477730,"stop":1761135478796,"duration":1066}},{"uid":"4e7611833f1d63f6","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/4e7611833f1d63f6","status":"passed","time":{"start":1761133941917,"stop":1761133942631,"duration":714}},{"uid":"7f9e3f77698b20f5","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/7f9e3f77698b20f5","status":"passed","time":{"start":1761128242737,"stop":1761128243891,"duration":1154}},{"uid":"908a0871c1dfdd3d","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/908a0871c1dfdd3d","status":"passed","time":{"start":1761124348146,"stop":1761124349332,"duration":1186}},{"uid":"d7dca70d6dbf67a7","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/d7dca70d6dbf67a7","status":"passed","time":{"start":1761119198829,"stop":1761119199712,"duration":883}},{"uid":"9c1b5a5006fe8f8f","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/9c1b5a5006fe8f8f","status":"passed","time":{"start":1761053241163,"stop":1761053242363,"duration":1200}},{"uid":"99fd0b9b6f7dbac9","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/99fd0b9b6f7dbac9","status":"passed","time":{"start":1761047129707,"stop":1761047130633,"duration":926}},{"uid":"2e80dd616c983673","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/2e80dd616c983673","status":"passed","time":{"start":1760614536203,"stop":1760614537243,"duration":1040}},{"uid":"b3ac9567ff5d9381","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/b3ac9567ff5d9381","status":"passed","time":{"start":1760599338488,"stop":1760599339243,"duration":755}},{"uid":"8dc3a33f73da7810","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/8dc3a33f73da7810","status":"passed","time":{"start":1760535374006,"stop":1760535374701,"duration":695}},{"uid":"872c0a5990e8e1b","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/872c0a5990e8e1b","status":"passed","time":{"start":1760533815661,"stop":1760533817256,"duration":1595}},{"uid":"ad94af897f17b3fe","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/ad94af897f17b3fe","status":"passed","time":{"start":1760532409392,"stop":1760532410444,"duration":1052}},{"uid":"5cb14f902a7941e2","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/5cb14f902a7941e2","status":"passed","time":{"start":1760529232965,"stop":1760529233818,"duration":853}}]},"tags":["backend"]},"source":"e8ba93104721592.json","parameterValues":["'manager_client'","200"]}