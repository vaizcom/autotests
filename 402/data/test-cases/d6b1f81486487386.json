{"uid":"d6b1f81486487386","name":"Проверка доступа к siblings персонального документа: создатель - owner, просматривающий - member","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_personal_siblings_docs_access_by_roles","historyId":"a692220a4aa26f27a10ba4cd9f06135f","time":{"start":1761910892834,"stop":1761910892953,"duration":119},"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n\nОсобенность: к персональным документам имеет доступ только их владелец\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[owner_docs_by_member_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', client_fixture = 'member_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n>               assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\nE               AssertionError: Ошибка при создании документа 0: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:199: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761910792963,"stop":1761910793391,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761910796070,"stop":1761910796305,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761910796305,"stop":1761910796513,"duration":208},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761910797905,"stop":1761910798334,"duration":429},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761910804951,"stop":1761910805196,"duration":245},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[owner_docs_by_member_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', client_fixture = 'member_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n>               assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\nE               AssertionError: Ошибка при создании документа 0: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:199: AssertionError","steps":[{"name":"Создание трёх персональных документов пользователем owner","time":{"start":1761910892834,"stop":1761910892953,"duration":119},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 199, in test_get_personal_siblings_docs_access_by_roles\n    assert (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2545-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"creator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":52},"items":[{"uid":"c826efc46c495477","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/c826efc46c495477","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910593469,"stop":1761910593586,"duration":117}},{"uid":"95c5a53ea4bac880","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/95c5a53ea4bac880","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909979467,"stop":1761909979645,"duration":178}},{"uid":"39239c424053038c","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/39239c424053038c","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761900011239,"stop":1761900011417,"duration":178}},{"uid":"14f84ee737e83fbd","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/14f84ee737e83fbd","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835038508,"stop":1761835038633,"duration":125}},{"uid":"dc379f663515e332","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/dc379f663515e332","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834615680,"stop":1761834615863,"duration":183}},{"uid":"74f20418138065a1","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/74f20418138065a1","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833449765,"stop":1761833449948,"duration":183}},{"uid":"91ed1fc82e085f8e","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/91ed1fc82e085f8e","status":"passed","time":{"start":1761821674986,"stop":1761821676388,"duration":1402}},{"uid":"38903fa07364eb51","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/38903fa07364eb51","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818742572,"stop":1761818742743,"duration":171}},{"uid":"eedccbe276a13ddc","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/eedccbe276a13ddc","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748608073,"stop":1761748608196,"duration":123}},{"uid":"ea7aa99bf1959e1a","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ea7aa99bf1959e1a","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747879948,"stop":1761747880133,"duration":185}},{"uid":"c0598350ed1aee2a","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c0598350ed1aee2a","status":"passed","time":{"start":1761746832651,"stop":1761746834873,"duration":2222}},{"uid":"c5f7bc4b7bba594d","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/c5f7bc4b7bba594d","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745719584,"stop":1761745719697,"duration":113}},{"uid":"417e4aa5d8e1adda","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/417e4aa5d8e1adda","status":"passed","time":{"start":1761576677753,"stop":1761576679379,"duration":1626}},{"uid":"6ac11b93ae69e254","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/6ac11b93ae69e254","status":"passed","time":{"start":1761557330433,"stop":1761557332323,"duration":1890}},{"uid":"2b8a3a14b79502b4","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/2b8a3a14b79502b4","status":"passed","time":{"start":1761308555201,"stop":1761308556691,"duration":1490}},{"uid":"22d8fceeb3fd766f","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/22d8fceeb3fd766f","status":"passed","time":{"start":1761306713631,"stop":1761306715935,"duration":2304}},{"uid":"31eeb23e5e702258","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/31eeb23e5e702258","status":"passed","time":{"start":1761137008541,"stop":1761137010213,"duration":1672}},{"uid":"19398b8d857a693c","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/19398b8d857a693c","status":"passed","time":{"start":1761135680861,"stop":1761135682802,"duration":1941}},{"uid":"3ab9137e4288ec89","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/3ab9137e4288ec89","status":"passed","time":{"start":1761134114785,"stop":1761134116422,"duration":1637}},{"uid":"b5a35e8c3bddad02","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/b5a35e8c3bddad02","status":"passed","time":{"start":1761128464859,"stop":1761128466874,"duration":2015}}]},"tags":["backend"]},"source":"d6b1f81486487386.json","parameterValues":["'member_client'","'owner_client'","403"]}