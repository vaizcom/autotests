{"uid":"35caa443e6f0c77f","name":"Архивирование Project-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"35008ddad71ffbcff153f0d17b4a1f7b","time":{"start":1752501037260,"stop":1752501037944,"duration":684},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[member]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:94: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500916493,"stop":1752500917294,"duration":801},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500917294,"stop":1752500918389,"duration":1095},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752500918390,"stop":1752500918918,"duration":528},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1752500918918,"stop":1752500919269,"duration":351},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752500927469,"stop":1752500927992,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[member]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:94: AssertionError","steps":[{"name":"Случайный клиент (owner_client) создаёт Project-документ для архивации (title: 14.07_13:50:37 Project Doc For archive Check)","time":{"start":1752501037260,"stop":1752501037943,"duration":683},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 94, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки архивирования","time":{"start":1752501037943,"stop":1752501037943,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 94, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"ee41742a7f696aeb","reportUrl":"https://vaizcom.github.io/autotests/295//#testresult/ee41742a7f696aeb","status":"passed","time":{"start":1752500650167,"stop":1752500651755,"duration":1588}},{"uid":"346ad3dd78621a0e","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/346ad3dd78621a0e","status":"passed","time":{"start":1752499336211,"stop":1752499338017,"duration":1806}},{"uid":"d140a3c540dfd3a3","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/d140a3c540dfd3a3","status":"passed","time":{"start":1752498153965,"stop":1752498154626,"duration":661}},{"uid":"40a356bdf71810bb","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/40a356bdf71810bb","status":"passed","time":{"start":1752496484756,"stop":1752496485433,"duration":677}},{"uid":"e16f43d2202ab3c1","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/e16f43d2202ab3c1","status":"passed","time":{"start":1752481629277,"stop":1752481629945,"duration":668}},{"uid":"23d3d6b98e09e211","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/23d3d6b98e09e211","status":"passed","time":{"start":1752479658688,"stop":1752479659302,"duration":614}},{"uid":"4396062ecfebf66e","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/4396062ecfebf66e","status":"passed","time":{"start":1752477803286,"stop":1752477803950,"duration":664}},{"uid":"97c1ecb244d0efc0","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/97c1ecb244d0efc0","status":"passed","time":{"start":1752236684598,"stop":1752236685599,"duration":1001}},{"uid":"3b87e98b05bb8274","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/3b87e98b05bb8274","status":"passed","time":{"start":1752236060562,"stop":1752236061102,"duration":540}},{"uid":"3d9a1b5c46746017","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/3d9a1b5c46746017","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1752235251949,"stop":1752235252682,"duration":733}},{"uid":"2731dcd2e2ebb542","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/2731dcd2e2ebb542","status":"passed","time":{"start":1752235240756,"stop":1752235241631,"duration":875}},{"uid":"f0b38fb78d13b425","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/f0b38fb78d13b425","status":"passed","time":{"start":1752234298751,"stop":1752234299692,"duration":941}},{"uid":"999a78938d068518","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/999a78938d068518","status":"passed","time":{"start":1752234288875,"stop":1752234289679,"duration":804}},{"uid":"21d1aeb67c871820","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/21d1aeb67c871820","status":"passed","time":{"start":1752233463277,"stop":1752233464190,"duration":913}},{"uid":"bc81c714e71444fc","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/bc81c714e71444fc","status":"passed","time":{"start":1752232544560,"stop":1752232545164,"duration":604}},{"uid":"a3bab897362d9595","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/a3bab897362d9595","status":"passed","time":{"start":1752232075724,"stop":1752232076397,"duration":673}},{"uid":"7b148b4860a365c2","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/7b148b4860a365c2","status":"passed","time":{"start":1752223488459,"stop":1752223489039,"duration":580}},{"uid":"5bba935f6d12d3d2","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/5bba935f6d12d3d2","status":"passed","time":{"start":1752218250091,"stop":1752218250813,"duration":722}},{"uid":"289e9fbe54ae4c0c","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/289e9fbe54ae4c0c","status":"passed","time":{"start":1752151015164,"stop":1752151016046,"duration":882}},{"uid":"958ae67c47e1688d","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/958ae67c47e1688d","status":"passed","time":{"start":1752148892967,"stop":1752148893544,"duration":577}}]},"tags":["backend"]},"source":"35caa443e6f0c77f.json","parameterValues":["'member_client'","200"]}