{"uid":"edcac2d70fc7e637","name":"Получение списка недавних Project-документов ролью owner","fullName":"tests.test_backend.document.access_doc.test_get_recent_documents_access_by_roles#test_get_recent_documents_access_by_roles","historyId":"6097827ccd2413125c06e2ec59fcd869","time":{"start":1753090089089,"stop":1753090099033,"duration":9944},"description":"\n    Проверяем доступ к списку недавних документов для ролей owner, manager, member, guest.\n    Создаются тестовые документы, проверяется их доступность\n    и корректный порядок отображения после повторной маркировки.\n    ","descriptionHtml":"<pre><code>Проверяем доступ к списку недавних документов для ролей owner, manager, member, guest.\nСоздаются тестовые документы, проверяется их доступность\nи корректный порядок отображения после повторной маркировки.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Порядок документов после повторной маркировки неверный\nassert ['687e0829a27...2adb4a2', ...] == ['687e082ba27...2adb46e', ...]\n  \n  At index 0 diff: '687e0829a27240a982adb41e' != '687e082ba27240a982adb4ed'\n  \n  Full diff:\n    [\n  +     '687e0829a27240a982adb41e',\n  +     '687e0829a27240a982adb439',\n  +     '687e0829a27240a982adb454',\n  +     '687e082aa27240a982adb46e',\n  +     '687e082aa27240a982adb488',\n  +     '687e082aa27240a982adb4a2',\n  +     '687e082ba27240a982adb4bb',\n  +     '687e082ba27240a982adb4d4',\n        '687e082ba27240a982adb4ed',\n  -     '687e082ba27240a982adb4d4',\n  -     '687e082ba27240a982adb4bb',\n  -     '687e082aa27240a982adb4a2',\n  -     '687e082aa27240a982adb488',\n  -     '687e082aa27240a982adb46e',\n  -     '687e0829a27240a982adb454',\n  -     '687e0829a27240a982adb439',\n  -     '687e0829a27240a982adb41e',\n    ]","statusTrace":"request = <FixtureRequest for <Function test_get_recent_documents_access_by_roles[project_docs-owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200, kind = 'Project', container_fixture = 'main_project'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest']\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_recent_documents_access_by_roles(\n        request,\n        main_space,\n        client_fixture,\n        expected_status,\n        kind,\n        container_fixture\n    ):\n        \"\"\"\n        Проверяем доступ к списку недавних документов для ролей owner, manager, member, guest.\n        Создаются тестовые документы, проверяется их доступность\n        и корректный порядок отображения после повторной маркировки.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n        EXPECTED_DOCS_COUNT = 9\n    \n        allure.dynamic.title(f'Получение списка недавних {kind}-документов ролью {role}')\n    \n        created_docs = []\n    \n        with allure.step(f'Создание {EXPECTED_DOCS_COUNT} тестовых {kind}-документов'):\n            # Создаем по 3 документа от каждой роли\n            for creator_role in ['owner', 'manager', 'member']:\n                creator = request.getfixturevalue(f'{creator_role}_client')\n                for i in range(3):\n                    title = f\"Recent document {i+1} by {creator_role}\"\n                    create_resp = creator.post(\n                        **create_document_endpoint(\n                            kind=kind,\n                            kind_id=container_id,\n                            space_id=main_space,\n                            title=title\n                        )\n                    )\n                    assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа: статус {create_resp.status_code}'\n                    )\n                    doc_id = create_resp.json()['payload']['document']['_id']\n                    created_docs.append({\n                        'id': doc_id,\n                        'title': title,\n                        'creator': creator,\n                        'creator_role': creator_role\n                    })\n    \n        try:\n            docs_count = len(created_docs)\n            assert docs_count == EXPECTED_DOCS_COUNT, (\n                f'Неверное количество созданных документов: {docs_count}, ожидалось: {EXPECTED_DOCS_COUNT}'\n            )\n    \n            with allure.step('Маркировка документов как недавних'):\n                for doc in created_docs:\n                    mark_resp = api_client.post(\n                        **mark_recent_document_endpoint(document_id=doc['id'], space_id=main_space)\n                    )\n                    assert mark_resp.status_code == 200, (\n                        f'Не удалось пометить документ {doc[\"id\"]} как недавний: '\n                        f'статус {mark_resp.status_code}'\n                    )\n    \n            with allure.step(f'Получение списка недавних документов ролью {role}'):\n                recent_resp = api_client.post(**get_recent_documents_endpoint(space_id=main_space))\n                assert recent_resp.status_code == expected_status\n    \n                if expected_status == 200:\n                    recent_docs = recent_resp.json()['payload']['recentDocuments']\n    \n                    with allure.step('Проверка структуры и содержимого ответа'):\n                        assert isinstance(recent_docs, list), 'recentDocuments должен быть списком'\n                        assert recent_docs, 'Список недавних документов не должен быть пустым'\n                        received_count = len(recent_docs)\n                        assert received_count == EXPECTED_DOCS_COUNT, (\n                            f'Неверное количество документов в ответе: {received_count}, '\n                            f'ожидалось: {EXPECTED_DOCS_COUNT}'\n                        )\n    \n                        recent_doc_ids = {doc['_id'] for doc in recent_docs}\n                        created_doc_ids = {doc['id'] for doc in created_docs}\n                        missing_docs = created_doc_ids - recent_doc_ids\n                        assert not missing_docs, (\n                            f'Не все документы найдены в списке недавних. '\n                            f'Отсутствуют документы с ID: {missing_docs}'\n                        )\n    \n                        required_fields = {'_id', 'title', 'kind'}\n                        for doc in recent_docs:\n                            missing_fields = required_fields - doc.keys()\n                            assert not missing_fields, f'Отсутствуют обязательные поля: {missing_fields}'\n    \n                        # Проверяем порядок документов только если создано ожидаемое количество\n                        if received_count == EXPECTED_DOCS_COUNT:\n                            original_ids = [doc['_id'] for doc in recent_docs]\n    \n                            with allure.step('Повторная маркировка документов для проверки порядка'):\n                                for doc in recent_docs[::-1]:\n                                    mark_resp = api_client.post(\n                                        **mark_recent_document_endpoint(document_id=doc['_id'], space_id=main_space)\n                                    )\n                                    assert mark_resp.status_code == 200\n    \n                            updated_resp = api_client.post(**get_recent_documents_endpoint(space_id=main_space))\n                            updated_docs = updated_resp.json()['payload']['recentDocuments']\n                            updated_ids = [doc['_id'] for doc in updated_docs]\n    \n                            # TODO: BUG: APP-3037 mark_recent_document_endpoint не перемещает документ на верх списка recent\n                            # Когда баг будет исправлен — ожидаем, что порядок изменится на обратный:\n                            # assert updated_ids == original_ids[::-1]\n                            # Пока баг не исправлен, этот ассерт падает — оставляем для контроля\n>                           assert updated_ids == original_ids[::-1], (\n                                'Порядок документов после повторной маркировки неверный'\n                            )\nE                           AssertionError: Порядок документов после повторной маркировки неверный\nE                           assert ['687e0829a27...2adb4a2', ...] == ['687e082ba27...2adb46e', ...]\nE                             \nE                             At index 0 diff: '687e0829a27240a982adb41e' != '687e082ba27240a982adb4ed'\nE                             \nE                             Full diff:\nE                               [\nE                             +     '687e0829a27240a982adb41e',\nE                             +     '687e0829a27240a982adb439',\nE                             +     '687e0829a27240a982adb454',\nE                             +     '687e082aa27240a982adb46e',\nE                             +     '687e082aa27240a982adb488',\nE                             +     '687e082aa27240a982adb4a2',\nE                             +     '687e082ba27240a982adb4bb',\nE                             +     '687e082ba27240a982adb4d4',\nE                                   '687e082ba27240a982adb4ed',\nE                             -     '687e082ba27240a982adb4d4',\nE                             -     '687e082ba27240a982adb4bb',\nE                             -     '687e082aa27240a982adb4a2',\nE                             -     '687e082aa27240a982adb488',\nE                             -     '687e082aa27240a982adb46e',\nE                             -     '687e0829a27240a982adb454',\nE                             -     '687e0829a27240a982adb439',\nE                             -     '687e0829a27240a982adb41e',\nE                               ]\n\ntests/test_backend/document/access_doc/test_get_recent_documents_access_by_roles.py:142: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1753089877938,"stop":1753089877938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1753089877938,"stop":1753089877938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1753089877938,"stop":1753089877938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1753089877938,"stop":1753089877938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1753089877938,"stop":1753089878403,"duration":465},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1753089900396,"stop":1753089900848,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1753089900848,"stop":1753089901104,"duration":256},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1753089901769,"stop":1753089902237,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1753089902237,"stop":1753089902709,"duration":472},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1753089905890,"stop":1753089906280,"duration":390},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем доступ к списку недавних документов для ролей owner, manager, member, guest.\n    Создаются тестовые документы, проверяется их доступность\n    и корректный порядок отображения после повторной маркировки.\n    ","status":"failed","statusMessage":"AssertionError: Порядок документов после повторной маркировки неверный\nassert ['687e0829a27...2adb4a2', ...] == ['687e082ba27...2adb46e', ...]\n  \n  At index 0 diff: '687e0829a27240a982adb41e' != '687e082ba27240a982adb4ed'\n  \n  Full diff:\n    [\n  +     '687e0829a27240a982adb41e',\n  +     '687e0829a27240a982adb439',\n  +     '687e0829a27240a982adb454',\n  +     '687e082aa27240a982adb46e',\n  +     '687e082aa27240a982adb488',\n  +     '687e082aa27240a982adb4a2',\n  +     '687e082ba27240a982adb4bb',\n  +     '687e082ba27240a982adb4d4',\n        '687e082ba27240a982adb4ed',\n  -     '687e082ba27240a982adb4d4',\n  -     '687e082ba27240a982adb4bb',\n  -     '687e082aa27240a982adb4a2',\n  -     '687e082aa27240a982adb488',\n  -     '687e082aa27240a982adb46e',\n  -     '687e0829a27240a982adb454',\n  -     '687e0829a27240a982adb439',\n  -     '687e0829a27240a982adb41e',\n    ]","statusTrace":"request = <FixtureRequest for <Function test_get_recent_documents_access_by_roles[project_docs-owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200, kind = 'Project', container_fixture = 'main_project'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest']\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_recent_documents_access_by_roles(\n        request,\n        main_space,\n        client_fixture,\n        expected_status,\n        kind,\n        container_fixture\n    ):\n        \"\"\"\n        Проверяем доступ к списку недавних документов для ролей owner, manager, member, guest.\n        Создаются тестовые документы, проверяется их доступность\n        и корректный порядок отображения после повторной маркировки.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n        EXPECTED_DOCS_COUNT = 9\n    \n        allure.dynamic.title(f'Получение списка недавних {kind}-документов ролью {role}')\n    \n        created_docs = []\n    \n        with allure.step(f'Создание {EXPECTED_DOCS_COUNT} тестовых {kind}-документов'):\n            # Создаем по 3 документа от каждой роли\n            for creator_role in ['owner', 'manager', 'member']:\n                creator = request.getfixturevalue(f'{creator_role}_client')\n                for i in range(3):\n                    title = f\"Recent document {i+1} by {creator_role}\"\n                    create_resp = creator.post(\n                        **create_document_endpoint(\n                            kind=kind,\n                            kind_id=container_id,\n                            space_id=main_space,\n                            title=title\n                        )\n                    )\n                    assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа: статус {create_resp.status_code}'\n                    )\n                    doc_id = create_resp.json()['payload']['document']['_id']\n                    created_docs.append({\n                        'id': doc_id,\n                        'title': title,\n                        'creator': creator,\n                        'creator_role': creator_role\n                    })\n    \n        try:\n            docs_count = len(created_docs)\n            assert docs_count == EXPECTED_DOCS_COUNT, (\n                f'Неверное количество созданных документов: {docs_count}, ожидалось: {EXPECTED_DOCS_COUNT}'\n            )\n    \n            with allure.step('Маркировка документов как недавних'):\n                for doc in created_docs:\n                    mark_resp = api_client.post(\n                        **mark_recent_document_endpoint(document_id=doc['id'], space_id=main_space)\n                    )\n                    assert mark_resp.status_code == 200, (\n                        f'Не удалось пометить документ {doc[\"id\"]} как недавний: '\n                        f'статус {mark_resp.status_code}'\n                    )\n    \n            with allure.step(f'Получение списка недавних документов ролью {role}'):\n                recent_resp = api_client.post(**get_recent_documents_endpoint(space_id=main_space))\n                assert recent_resp.status_code == expected_status\n    \n                if expected_status == 200:\n                    recent_docs = recent_resp.json()['payload']['recentDocuments']\n    \n                    with allure.step('Проверка структуры и содержимого ответа'):\n                        assert isinstance(recent_docs, list), 'recentDocuments должен быть списком'\n                        assert recent_docs, 'Список недавних документов не должен быть пустым'\n                        received_count = len(recent_docs)\n                        assert received_count == EXPECTED_DOCS_COUNT, (\n                            f'Неверное количество документов в ответе: {received_count}, '\n                            f'ожидалось: {EXPECTED_DOCS_COUNT}'\n                        )\n    \n                        recent_doc_ids = {doc['_id'] for doc in recent_docs}\n                        created_doc_ids = {doc['id'] for doc in created_docs}\n                        missing_docs = created_doc_ids - recent_doc_ids\n                        assert not missing_docs, (\n                            f'Не все документы найдены в списке недавних. '\n                            f'Отсутствуют документы с ID: {missing_docs}'\n                        )\n    \n                        required_fields = {'_id', 'title', 'kind'}\n                        for doc in recent_docs:\n                            missing_fields = required_fields - doc.keys()\n                            assert not missing_fields, f'Отсутствуют обязательные поля: {missing_fields}'\n    \n                        # Проверяем порядок документов только если создано ожидаемое количество\n                        if received_count == EXPECTED_DOCS_COUNT:\n                            original_ids = [doc['_id'] for doc in recent_docs]\n    \n                            with allure.step('Повторная маркировка документов для проверки порядка'):\n                                for doc in recent_docs[::-1]:\n                                    mark_resp = api_client.post(\n                                        **mark_recent_document_endpoint(document_id=doc['_id'], space_id=main_space)\n                                    )\n                                    assert mark_resp.status_code == 200\n    \n                            updated_resp = api_client.post(**get_recent_documents_endpoint(space_id=main_space))\n                            updated_docs = updated_resp.json()['payload']['recentDocuments']\n                            updated_ids = [doc['_id'] for doc in updated_docs]\n    \n                            # TODO: BUG: APP-3037 mark_recent_document_endpoint не перемещает документ на верх списка recent\n                            # Когда баг будет исправлен — ожидаем, что порядок изменится на обратный:\n                            # assert updated_ids == original_ids[::-1]\n                            # Пока баг не исправлен, этот ассерт падает — оставляем для контроля\n>                           assert updated_ids == original_ids[::-1], (\n                                'Порядок документов после повторной маркировки неверный'\n                            )\nE                           AssertionError: Порядок документов после повторной маркировки неверный\nE                           assert ['687e0829a27...2adb4a2', ...] == ['687e082ba27...2adb46e', ...]\nE                             \nE                             At index 0 diff: '687e0829a27240a982adb41e' != '687e082ba27240a982adb4ed'\nE                             \nE                             Full diff:\nE                               [\nE                             +     '687e0829a27240a982adb41e',\nE                             +     '687e0829a27240a982adb439',\nE                             +     '687e0829a27240a982adb454',\nE                             +     '687e082aa27240a982adb46e',\nE                             +     '687e082aa27240a982adb488',\nE                             +     '687e082aa27240a982adb4a2',\nE                             +     '687e082ba27240a982adb4bb',\nE                             +     '687e082ba27240a982adb4d4',\nE                                   '687e082ba27240a982adb4ed',\nE                             -     '687e082ba27240a982adb4d4',\nE                             -     '687e082ba27240a982adb4bb',\nE                             -     '687e082aa27240a982adb4a2',\nE                             -     '687e082aa27240a982adb488',\nE                             -     '687e082aa27240a982adb46e',\nE                             -     '687e0829a27240a982adb454',\nE                             -     '687e0829a27240a982adb439',\nE                             -     '687e0829a27240a982adb41e',\nE                               ]\n\ntests/test_backend/document/access_doc/test_get_recent_documents_access_by_roles.py:142: AssertionError","steps":[{"name":"Создание 9 тестовых Project-документов","time":{"start":1753090089089,"stop":1753090091901,"duration":2812},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Маркировка документов как недавних","time":{"start":1753090091901,"stop":1753090093748,"duration":1847},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получение списка недавних документов ролью owner","time":{"start":1753090093748,"stop":1753090096160,"duration":2412},"status":"failed","statusMessage":"AssertionError: Порядок документов после повторной маркировки неверный\nassert ['687e0829a27...2adb4a2', ...] == ['687e082ba27...2adb46e', ...]\n  \n  At index 0 diff: '687e0829a27240a982adb41e' != '687e082ba27240a982adb4ed'\n  \n  Full diff:\n    [\n  +     '687e0829a27240a982adb41e',\n  +     '687e0829a27240a982adb439',\n  +     '687e0829a27240a982adb454',\n  +     '687e082aa27240a982adb46e',\n  +     '687e082aa27240a982adb488',\n  +     '687e082aa27240a982adb4a2',\n  +     '687e082ba27240a982adb4bb',\n  +     '687e082ba27240a982adb4d4',\n        '687e082ba27240a982adb4ed',\n  -     '687e082ba27240a982adb4d4',\n  -     '687e082ba27240a982adb4bb',\n  -     '687e082aa27240a982adb4a2',\n  -     '687e082aa27240a982adb488',\n  -     '687e082aa27240a982adb46e',\n  -     '687e0829a27240a982adb454',\n  -     '687e0829a27240a982adb439',\n  -     '687e0829a27240a982adb41e',\n    ]\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_recent_documents_access_by_roles.py\", line 142, in test_get_recent_documents_access_by_roles\n    assert updated_ids == original_ids[::-1], (\n","steps":[{"name":"Проверка структуры и содержимого ответа","time":{"start":1753090093970,"stop":1753090096159,"duration":2189},"status":"failed","statusMessage":"AssertionError: Порядок документов после повторной маркировки неверный\nassert ['687e0829a27...2adb4a2', ...] == ['687e082ba27...2adb46e', ...]\n  \n  At index 0 diff: '687e0829a27240a982adb41e' != '687e082ba27240a982adb4ed'\n  \n  Full diff:\n    [\n  +     '687e0829a27240a982adb41e',\n  +     '687e0829a27240a982adb439',\n  +     '687e0829a27240a982adb454',\n  +     '687e082aa27240a982adb46e',\n  +     '687e082aa27240a982adb488',\n  +     '687e082aa27240a982adb4a2',\n  +     '687e082ba27240a982adb4bb',\n  +     '687e082ba27240a982adb4d4',\n        '687e082ba27240a982adb4ed',\n  -     '687e082ba27240a982adb4d4',\n  -     '687e082ba27240a982adb4bb',\n  -     '687e082aa27240a982adb4a2',\n  -     '687e082aa27240a982adb488',\n  -     '687e082aa27240a982adb46e',\n  -     '687e0829a27240a982adb454',\n  -     '687e0829a27240a982adb439',\n  -     '687e0829a27240a982adb41e',\n    ]\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_recent_documents_access_by_roles.py\", line 142, in test_get_recent_documents_access_by_roles\n    assert updated_ids == original_ids[::-1], (\n","steps":[{"name":"Повторная маркировка документов для проверки порядка","time":{"start":1753090093970,"stop":1753090095952,"duration":1982},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true},{"name":"Удаление тестовых документов","time":{"start":1753090096160,"stop":1753090099033,"duration":2873},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_recent_documents_access_by_roles"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2528-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_recent_documents_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"container_fixture","value":"'main_project'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":4,"unknown":0,"total":5},"items":[{"uid":"34b3bd4b45ea2ae4","reportUrl":"https://vaizcom.github.io/autotests/314//#testresult/34b3bd4b45ea2ae4","status":"passed","time":{"start":1752836983583,"stop":1752836994833,"duration":11250}},{"uid":"6f977fde8ac734ff","reportUrl":"https://vaizcom.github.io/autotests/313//#testresult/6f977fde8ac734ff","status":"passed","time":{"start":1752836108215,"stop":1752836122286,"duration":14071}},{"uid":"f738ed1f516c3e57","reportUrl":"https://vaizcom.github.io/autotests/312//#testresult/f738ed1f516c3e57","status":"passed","time":{"start":1752827410553,"stop":1752827412391,"duration":1838}},{"uid":"c00fc0d5cdc7e1ad","reportUrl":"https://vaizcom.github.io/autotests/311//#testresult/c00fc0d5cdc7e1ad","status":"passed","time":{"start":1752738347240,"stop":1752738349322,"duration":2082}}]},"tags":["backend"]},"source":"edcac2d70fc7e637.json","parameterValues":["'owner_client'","'main_project'","200","'Project'"]}