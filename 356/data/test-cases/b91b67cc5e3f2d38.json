{"uid":"b91b67cc5e3f2d38","name":"test_archive_all_documents[project_docs]","fullName":"tests.test_backend.document.test_archive_all_docs#test_archive_all_documents","historyId":"81a733a0986e34e9cc5f1634f12b9c7a","time":{"start":1759837445419,"stop":1759837445593,"duration":174},"description":"\n    Проверяем удаление всех документов в пространстве и проекте.\n    ","descriptionHtml":"<pre><code>Проверяем удаление всех документов в пространстве и проекте.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_all_documents[project_docs]>>\nowner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\nkind = 'Project', container_fixture = 'main_project'\nmain_space = '6866309d85fb8d104544a61e'\nexcluded_documents = {'68a5b3f4a136528e28f58d65', '68a81156e503a7ab645236c1'}\n\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_archive_all_documents(request, owner_client, kind, container_fixture, main_space, excluded_documents):\n        \"\"\"\n        Проверяем удаление всех документов в пространстве и проекте.\n        \"\"\"\n        with allure.step(f'Подготовка к удалению документов в {kind}'):\n            container_id = request.getfixturevalue(container_fixture)\n    \n        with allure.step(f'Получение списка документов в {kind}'):\n            docs_resp = owner_client.post(**get_documents_endpoint(space_id=main_space, kind=kind, kind_id=container_id))\n>           assert docs_resp.status_code == 200, 'Не удалось получить список документов'\nE           AssertionError: Не удалось получить список документов\nE           assert 503 == 200\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_archive_all_docs.py:36: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759837145756,"stop":1759837146498,"duration":742},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759837146498,"stop":1759837146894,"duration":396},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1759837146894,"stop":1759837147178,"duration":284},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space_doc","time":{"start":1759837443413,"stop":1759837443413,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project_doc","time":{"start":1759837443413,"stop":1759837443413,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"excluded_documents","time":{"start":1759837445233,"stop":1759837445233,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем удаление всех документов в пространстве и проекте.\n    ","status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_all_documents[project_docs]>>\nowner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\nkind = 'Project', container_fixture = 'main_project'\nmain_space = '6866309d85fb8d104544a61e'\nexcluded_documents = {'68a5b3f4a136528e28f58d65', '68a81156e503a7ab645236c1'}\n\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_archive_all_documents(request, owner_client, kind, container_fixture, main_space, excluded_documents):\n        \"\"\"\n        Проверяем удаление всех документов в пространстве и проекте.\n        \"\"\"\n        with allure.step(f'Подготовка к удалению документов в {kind}'):\n            container_id = request.getfixturevalue(container_fixture)\n    \n        with allure.step(f'Получение списка документов в {kind}'):\n            docs_resp = owner_client.post(**get_documents_endpoint(space_id=main_space, kind=kind, kind_id=container_id))\n>           assert docs_resp.status_code == 200, 'Не удалось получить список документов'\nE           AssertionError: Не удалось получить список документов\nE           assert 503 == 200\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_archive_all_docs.py:36: AssertionError","steps":[{"name":"Подготовка к удалению документов в Project","time":{"start":1759837445419,"stop":1759837445419,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получение списка документов в Project","time":{"start":1759837445419,"stop":1759837445593,"duration":174},"status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 503 == 200\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_archive_all_docs.py\", line 36, in test_archive_all_documents\n    assert docs_resp.status_code == 200, 'Не удалось получить список документов'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_archive_all_docs"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_archive_all_docs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"container_fixture","value":"'main_project'"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"ebb99792ecc41010","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/ebb99792ecc41010","status":"passed","time":{"start":1759836235973,"stop":1759836243529,"duration":7556}},{"uid":"41105e352ec7d352","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/41105e352ec7d352","status":"passed","time":{"start":1759835607783,"stop":1759835607978,"duration":195}},{"uid":"d695c5303adf6dbb","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/d695c5303adf6dbb","status":"passed","time":{"start":1759834715339,"stop":1759834715840,"duration":501}}]},"tags":["backend"]},"source":"b91b67cc5e3f2d38.json","parameterValues":["'main_project'","'Project'"]}