{"uid":"caf816a6520f0f85","name":"Проверка доступа к siblings персонального документа: создатель - owner, просматривающий - manager","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_personal_siblings_docs_access_by_roles","historyId":"23f99f7ee2afa56145649ae2b5f2d6eb","time":{"start":1761900011054,"stop":1761900011231,"duration":177},"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n\nОсобенность: к персональным документам имеет доступ только их владелец\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[owner_docs_by_manager_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', client_fixture = 'manager_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n>               assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\nE               AssertionError: Ошибка при создании документа 0: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:199: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761899890641,"stop":1761899890641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761899890642,"stop":1761899891240,"duration":598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761899894466,"stop":1761899894790,"duration":324},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761899894790,"stop":1761899895081,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761899895860,"stop":1761899896156,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761899905935,"stop":1761899906218,"duration":283},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[owner_docs_by_manager_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', client_fixture = 'manager_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n>               assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\nE               AssertionError: Ошибка при создании документа 0: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:199: AssertionError","steps":[{"name":"Создание трёх персональных документов пользователем owner","time":{"start":1761900011055,"stop":1761900011231,"duration":176},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 199, in test_get_personal_siblings_docs_access_by_roles\n    assert (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2554-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"creator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":49},"items":[{"uid":"9852a61b03ec751d","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/9852a61b03ec751d","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835038357,"stop":1761835038486,"duration":129}},{"uid":"2565ef6b11a2a2a7","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/2565ef6b11a2a2a7","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834615488,"stop":1761834615672,"duration":184}},{"uid":"e647528361f8019c","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/e647528361f8019c","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833449567,"stop":1761833449758,"duration":191}},{"uid":"388a709f362ea8a7","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/388a709f362ea8a7","status":"passed","time":{"start":1761821673402,"stop":1761821674984,"duration":1582}},{"uid":"3770e17d14cc8d1a","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/3770e17d14cc8d1a","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818742395,"stop":1761818742565,"duration":170}},{"uid":"320e2c3b8a842456","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/320e2c3b8a842456","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748607936,"stop":1761748608065,"duration":129}},{"uid":"e3670fdbc4c3306b","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/e3670fdbc4c3306b","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747879758,"stop":1761747879941,"duration":183}},{"uid":"3be5dfc5404d38b5","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/3be5dfc5404d38b5","status":"passed","time":{"start":1761746830311,"stop":1761746832648,"duration":2337}},{"uid":"51e6d1f68428195","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/51e6d1f68428195","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа 0: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745719464,"stop":1761745719577,"duration":113}},{"uid":"2ff0e483b9d39ec4","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2ff0e483b9d39ec4","status":"passed","time":{"start":1761576676131,"stop":1761576677750,"duration":1619}},{"uid":"2d9fd9dace02586a","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/2d9fd9dace02586a","status":"passed","time":{"start":1761557328937,"stop":1761557330431,"duration":1494}},{"uid":"11f1fe7f7b7d7ef2","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/11f1fe7f7b7d7ef2","status":"passed","time":{"start":1761308553617,"stop":1761308555198,"duration":1581}},{"uid":"dc7576385b73ea32","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/dc7576385b73ea32","status":"passed","time":{"start":1761306711288,"stop":1761306713629,"duration":2341}},{"uid":"6f60e1503c27ade","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/6f60e1503c27ade","status":"passed","time":{"start":1761137006915,"stop":1761137008539,"duration":1624}},{"uid":"bc3f40ebb0178a48","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/bc3f40ebb0178a48","status":"passed","time":{"start":1761135678926,"stop":1761135680859,"duration":1933}},{"uid":"f0bcbf0a4a716c46","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/f0bcbf0a4a716c46","status":"passed","time":{"start":1761134113181,"stop":1761134114783,"duration":1602}},{"uid":"e048cf5319801735","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/e048cf5319801735","status":"passed","time":{"start":1761128462873,"stop":1761128464857,"duration":1984}},{"uid":"16d3ce508690cd42","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/16d3ce508690cd42","status":"passed","time":{"start":1761124573289,"stop":1761124576338,"duration":3049}},{"uid":"384dda7c36703ca7","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/384dda7c36703ca7","status":"passed","time":{"start":1761119388262,"stop":1761119389886,"duration":1624}},{"uid":"571ada0cf5fed067","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/571ada0cf5fed067","status":"passed","time":{"start":1761053419532,"stop":1761053421109,"duration":1577}}]},"tags":["backend"]},"source":"caf816a6520f0f85.json","parameterValues":["'manager_client'","'owner_client'","403"]}