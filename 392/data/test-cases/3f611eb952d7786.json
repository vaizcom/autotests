{"uid":"3f611eb952d7786","name":"test_archive_all_documents[project_docs]","fullName":"tests.test_backend.document.test_archive_all_docs#test_archive_all_documents","historyId":"81a733a0986e34e9cc5f1634f12b9c7a","time":{"start":1761745738131,"stop":1761745738252,"duration":121},"description":"\n    Проверяем удаление всех документов в пространстве и проекте.\n    ","descriptionHtml":"<pre><code>Проверяем удаление всех документов в пространстве и проекте.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_all_documents[project_docs]>>\nowner_client = <tests.core.client.APIClient object at 0x7fd40394d290>\nkind = 'Project', container_fixture = 'main_project'\nmain_space = '6866309d85fb8d104544a61e'\nexcluded_documents = {'68a5b3f4a136528e28f58d65', '68a81156e503a7ab645236c1'}\n\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_archive_all_documents(request, owner_client, kind, container_fixture, main_space, excluded_documents):\n        \"\"\"\n        Проверяем удаление всех документов в пространстве и проекте.\n        \"\"\"\n        with allure.step(f'Подготовка к удалению документов в {kind}'):\n            container_id = request.getfixturevalue(container_fixture)\n    \n        with allure.step(f'Получение списка документов в {kind}'):\n            docs_resp = owner_client.post(**get_documents_endpoint(space_id=main_space, kind=kind, kind_id=container_id))\n>           assert docs_resp.status_code == 200, 'Не удалось получить список документов'\nE           AssertionError: Не удалось получить список документов\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/test_archive_all_docs.py:36: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761745632604,"stop":1761745632791,"duration":187},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project_doc","time":{"start":1761745736044,"stop":1761745736044,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space_doc","time":{"start":1761745736044,"stop":1761745736044,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"excluded_documents","time":{"start":1761745738006,"stop":1761745738006,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем удаление всех документов в пространстве и проекте.\n    ","status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_all_documents[project_docs]>>\nowner_client = <tests.core.client.APIClient object at 0x7fd40394d290>\nkind = 'Project', container_fixture = 'main_project'\nmain_space = '6866309d85fb8d104544a61e'\nexcluded_documents = {'68a5b3f4a136528e28f58d65', '68a81156e503a7ab645236c1'}\n\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_archive_all_documents(request, owner_client, kind, container_fixture, main_space, excluded_documents):\n        \"\"\"\n        Проверяем удаление всех документов в пространстве и проекте.\n        \"\"\"\n        with allure.step(f'Подготовка к удалению документов в {kind}'):\n            container_id = request.getfixturevalue(container_fixture)\n    \n        with allure.step(f'Получение списка документов в {kind}'):\n            docs_resp = owner_client.post(**get_documents_endpoint(space_id=main_space, kind=kind, kind_id=container_id))\n>           assert docs_resp.status_code == 200, 'Не удалось получить список документов'\nE           AssertionError: Не удалось получить список документов\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/test_archive_all_docs.py:36: AssertionError","steps":[{"name":"Подготовка к удалению документов в Project","time":{"start":1761745738131,"stop":1761745738131,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получение списка документов в Project","time":{"start":1761745738131,"stop":1761745738252,"duration":121},"status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_archive_all_docs.py\", line 36, in test_archive_all_documents\n    assert docs_resp.status_code == 200, 'Не удалось получить список документов'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_archive_all_docs"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_archive_all_docs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"container_fixture","value":"'main_project'"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":38,"unknown":0,"total":40},"items":[{"uid":"7a3f4a3e01491d43","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/7a3f4a3e01491d43","status":"passed","time":{"start":1761576712235,"stop":1761576712459,"duration":224}},{"uid":"b8a9b31347921306","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/b8a9b31347921306","status":"passed","time":{"start":1761557362618,"stop":1761557362813,"duration":195}},{"uid":"cde77d8dd7732664","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/cde77d8dd7732664","status":"passed","time":{"start":1761308586786,"stop":1761308586978,"duration":192}},{"uid":"5149822fe8a0e006","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/5149822fe8a0e006","status":"passed","time":{"start":1761306748253,"stop":1761306748462,"duration":209}},{"uid":"29c4cf4bc2b3c398","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/29c4cf4bc2b3c398","status":"passed","time":{"start":1761137041236,"stop":1761137041447,"duration":211}},{"uid":"455ef10148df230c","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/455ef10148df230c","status":"passed","time":{"start":1761135718401,"stop":1761135718641,"duration":240}},{"uid":"a5956a04457af4a0","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/a5956a04457af4a0","status":"passed","time":{"start":1761134145788,"stop":1761134145974,"duration":186}},{"uid":"f4725eb342e7b79f","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/f4725eb342e7b79f","status":"passed","time":{"start":1761128506806,"stop":1761128507071,"duration":265}},{"uid":"2d6ccd3b5e6b70a0","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/2d6ccd3b5e6b70a0","status":"passed","time":{"start":1761124619230,"stop":1761124619495,"duration":265}},{"uid":"210f89186ea5fba4","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/210f89186ea5fba4","status":"passed","time":{"start":1761119431703,"stop":1761119431923,"duration":220}},{"uid":"d93af933b6e149f4","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/d93af933b6e149f4","status":"passed","time":{"start":1761053452380,"stop":1761053452603,"duration":223}},{"uid":"56a8a69e5dbc873a","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/56a8a69e5dbc873a","status":"passed","time":{"start":1761047355173,"stop":1761047355387,"duration":214}},{"uid":"e867887fc7bda45c","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/e867887fc7bda45c","status":"passed","time":{"start":1760614775811,"stop":1760614776562,"duration":751}},{"uid":"ea23e3154e678598","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/ea23e3154e678598","status":"passed","time":{"start":1760599582751,"stop":1760599582974,"duration":223}},{"uid":"8d21691df68608fb","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/8d21691df68608fb","status":"passed","time":{"start":1760535593211,"stop":1760535593417,"duration":206}},{"uid":"e14fe9ce54162af0","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/e14fe9ce54162af0","status":"passed","time":{"start":1760534095561,"stop":1760534096578,"duration":1017}},{"uid":"f7de5233a7beb1f0","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/f7de5233a7beb1f0","status":"passed","time":{"start":1760532632722,"stop":1760532632923,"duration":201}},{"uid":"a72e197f0fde2f47","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/a72e197f0fde2f47","status":"passed","time":{"start":1760529445684,"stop":1760529445897,"duration":213}},{"uid":"ac5ff7a94e8251aa","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/ac5ff7a94e8251aa","status":"passed","time":{"start":1760510847632,"stop":1760510847873,"duration":241}},{"uid":"e0cf7faed185156","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/e0cf7faed185156","status":"passed","time":{"start":1760449326807,"stop":1760449326987,"duration":180}}]},"tags":["backend"]},"source":"3f611eb952d7786.json","parameterValues":["'main_project'","'Project'"]}