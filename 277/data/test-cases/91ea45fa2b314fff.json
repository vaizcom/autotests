{"uid":"91ea45fa2b314fff","name":"Создание документа — кейс: [empty string] (ожидается 200)","fullName":"tests.test_backend.document.test_create_document#test_document_title_validation","historyId":"3138287b64859e2cf0b114948ec5f7a3","time":{"start":1752218330554,"stop":1752218330808,"duration":254},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f848cb91250>\ntemp_space = '6870ba6b0c9b6e0ea50fa44b'\ntemp_project = '6870ba6c0c9b6e0ea50fa4bf', title = '', expected_status = 200\nexpected_actual_title = ''\nrequest = <FixtureRequest for <Function test_document_title_validation[empty string]>>\n\n    @pytest.mark.parametrize(\n        'title, expected_status, expected_actual_title',\n        [\n            (None, 200, 'Untitled document'),\n            ('', 200, ''),\n            (' ', 200, ' '),\n            ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),\n            ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),\n            # Дополнительно:\n            (123, 400, None),\n            (True, 400, None),\n            ([], 400, None),\n            ('Документ', 200, 'Документ'),\n            ('\uD83D\uDE0A\uD83D\uDCC4✨', 200, '\uD83D\uDE0A\uD83D\uDCC4✨'),\n            ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),\n            ('Title with & < > \" \\'', 200, 'Title with & < > \" \\''),\n        ],\n        ids=[\n            'None',\n            'empty string',\n            'single space',\n            'title = MAX length (2048)',\n            'title > MAX length (2049)',\n            'int as title',\n            'bool as title',\n            'list as title',\n            'cyrillic',\n            'emoji',\n            'html injection',\n            'special chars',\n        ],\n    )\n    @allure.title('Создание документа с различными значениями title — ожидаемый статус {expected_status}')\n    def test_document_title_validation(\n        owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request\n    ):\n        allure.dynamic.title(f'Создание документа — кейс: [{request.node.callspec.id}] (ожидается {expected_status})')\n    \n        with allure.step(f'Отправка запроса [{request.node.callspec.id}] (ожидается {expected_status})'):\n            response = owner_client.post(\n                **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)\n            )\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status}'):\n>           assert response.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/test_create_document.py:80: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1752218218540,"stop":1752218218540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752218218540,"stop":1752218218540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752218218540,"stop":1752218218540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752218218540,"stop":1752218218540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752218218540,"stop":1752218219081,"duration":541},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1752218219081,"stop":1752218220088,"duration":1007},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1752218220088,"stop":1752218221181,"duration":1093},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f848cb91250>\ntemp_space = '6870ba6b0c9b6e0ea50fa44b'\ntemp_project = '6870ba6c0c9b6e0ea50fa4bf', title = '', expected_status = 200\nexpected_actual_title = ''\nrequest = <FixtureRequest for <Function test_document_title_validation[empty string]>>\n\n    @pytest.mark.parametrize(\n        'title, expected_status, expected_actual_title',\n        [\n            (None, 200, 'Untitled document'),\n            ('', 200, ''),\n            (' ', 200, ' '),\n            ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),\n            ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),\n            # Дополнительно:\n            (123, 400, None),\n            (True, 400, None),\n            ([], 400, None),\n            ('Документ', 200, 'Документ'),\n            ('\uD83D\uDE0A\uD83D\uDCC4✨', 200, '\uD83D\uDE0A\uD83D\uDCC4✨'),\n            ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),\n            ('Title with & < > \" \\'', 200, 'Title with & < > \" \\''),\n        ],\n        ids=[\n            'None',\n            'empty string',\n            'single space',\n            'title = MAX length (2048)',\n            'title > MAX length (2049)',\n            'int as title',\n            'bool as title',\n            'list as title',\n            'cyrillic',\n            'emoji',\n            'html injection',\n            'special chars',\n        ],\n    )\n    @allure.title('Создание документа с различными значениями title — ожидаемый статус {expected_status}')\n    def test_document_title_validation(\n        owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request\n    ):\n        allure.dynamic.title(f'Создание документа — кейс: [{request.node.callspec.id}] (ожидается {expected_status})')\n    \n        with allure.step(f'Отправка запроса [{request.node.callspec.id}] (ожидается {expected_status})'):\n            response = owner_client.post(\n                **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)\n            )\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status}'):\n>           assert response.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/test_create_document.py:80: AssertionError","steps":[{"name":"Отправка запроса [empty string] (ожидается 200)","time":{"start":1752218330554,"stop":1752218330807,"duration":253},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что статус ответа = 200","time":{"start":1752218330807,"stop":1752218330807,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_create_document.py\", line 80, in test_document_title_validation\n    assert response.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_project::0","time":{"start":1752218473536,"stop":1752218473536,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1752218473536,"stop":1752218474121,"duration":585},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_create_document"},{"name":"host","value":"fv-az816-346"},{"name":"thread","value":"2486-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_create_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_actual_title","value":"''"},{"name":"expected_status","value":"200"},{"name":"title","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":22},"items":[{"uid":"7ed18e8915c39f5d","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/7ed18e8915c39f5d","status":"passed","time":{"start":1752151100038,"stop":1752151100374,"duration":336}},{"uid":"8740bd93f3bf38a","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/8740bd93f3bf38a","status":"passed","time":{"start":1752148946766,"stop":1752148947074,"duration":308}},{"uid":"ad9080822cb22711","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/ad9080822cb22711","status":"passed","time":{"start":1752138424448,"stop":1752138424791,"duration":343}},{"uid":"ea45cea47fe7ddfc","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/ea45cea47fe7ddfc","status":"passed","time":{"start":1752137298641,"stop":1752137299017,"duration":376}},{"uid":"981f86310fb9a8b6","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/981f86310fb9a8b6","status":"passed","time":{"start":1752133936859,"stop":1752133937225,"duration":366}},{"uid":"ec0850bdadec90d9","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/ec0850bdadec90d9","status":"passed","time":{"start":1752066521243,"stop":1752066521544,"duration":301}},{"uid":"7cc5367248a87923","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/7cc5367248a87923","status":"passed","time":{"start":1752065528032,"stop":1752065528377,"duration":345}},{"uid":"a1d9dadd6e639282","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/a1d9dadd6e639282","status":"passed","time":{"start":1752064747215,"stop":1752064747546,"duration":331}},{"uid":"4ad89390aee08ce3","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/4ad89390aee08ce3","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752062530430,"stop":1752062530727,"duration":297}},{"uid":"2e04bdf0d05ad5de","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/2e04bdf0d05ad5de","status":"passed","time":{"start":1752060667635,"stop":1752060667995,"duration":360}},{"uid":"39b48cf233fe493c","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/39b48cf233fe493c","status":"passed","time":{"start":1752059643692,"stop":1752059644072,"duration":380}},{"uid":"b355ca8622ca45aa","reportUrl":"https://vaizcom.github.io/autotests/265//#testresult/b355ca8622ca45aa","status":"passed","time":{"start":1752050819506,"stop":1752050819823,"duration":317}},{"uid":"eae97c92bc348bba","reportUrl":"https://vaizcom.github.io/autotests/264//#testresult/eae97c92bc348bba","status":"passed","time":{"start":1752049417770,"stop":1752049418079,"duration":309}},{"uid":"3ad705301f4382c6","reportUrl":"https://vaizcom.github.io/autotests/263//#testresult/3ad705301f4382c6","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752047997848,"stop":1752047997848,"duration":0}},{"uid":"f60e16066cf5ef00","reportUrl":"https://vaizcom.github.io/autotests/262//#testresult/f60e16066cf5ef00","status":"passed","time":{"start":1752046684083,"stop":1752046684436,"duration":353}},{"uid":"f14c67c965be23db","reportUrl":"https://vaizcom.github.io/autotests/261//#testresult/f14c67c965be23db","status":"passed","time":{"start":1752044686075,"stop":1752044686478,"duration":403}},{"uid":"6985c55ed862466","reportUrl":"https://vaizcom.github.io/autotests/260//#testresult/6985c55ed862466","status":"passed","time":{"start":1751982692446,"stop":1751982692762,"duration":316}},{"uid":"502a59e3c4036723","reportUrl":"https://vaizcom.github.io/autotests/259//#testresult/502a59e3c4036723","status":"passed","time":{"start":1751976163390,"stop":1751976163689,"duration":299}},{"uid":"6cd4c7a3700a4cd4","reportUrl":"https://vaizcom.github.io/autotests/258//#testresult/6cd4c7a3700a4cd4","status":"passed","time":{"start":1751975117913,"stop":1751975118307,"duration":394}},{"uid":"34d12d4bd18fbaf8","reportUrl":"https://vaizcom.github.io/autotests/257//#testresult/34d12d4bd18fbaf8","status":"passed","time":{"start":1751973406916,"stop":1751973407235,"duration":319}}]},"tags":["backend"]},"source":"91ea45fa2b314fff.json","parameterValues":["''","200","''"]}