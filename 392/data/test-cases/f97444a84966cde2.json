{"uid":"f97444a84966cde2","name":"Архивирование Personal-документа для роли owner, документ создан в роли Member","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_personal_doc","historyId":"201d62d71d932f29e744de7d89b72c90","time":{"start":1761745640796,"stop":1761745641140,"duration":344},"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_personal_doc[owner]>>\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 403\nmember_client = <tests.core.client.APIClient object at 0x7fd402059290>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 403),\n            ('manager_client', 403),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_personal_doc(request, main_personal, main_space, client_fixture, expected_status, member_client):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        personal_id = main_personal['member'][0]\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Personal-документа для роли {role}, документ создан в роли Member')\n    \n        with allure.step(f'member_client создаёт Personal-документ для архивации ({title})'):\n            create_resp = member_client.post(\n                **create_document_endpoint(kind='Member', kind_id=personal_id, space_id=main_space, title=title)\n            )\n    \n            assert create_resp.status_code == 200\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n        with allure.step(f'Архивация Personal-документа в роли {role}, {expected_status} (доступно только создателю доки)'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>           assert archive_resp.status_code == expected_status\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:164: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761745634098,"stop":1761745634516,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761745640561,"stop":1761745640795,"duration":234},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_personal_doc[owner]>>\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 403\nmember_client = <tests.core.client.APIClient object at 0x7fd402059290>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 403),\n            ('manager_client', 403),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_personal_doc(request, main_personal, main_space, client_fixture, expected_status, member_client):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        personal_id = main_personal['member'][0]\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Personal-документа для роли {role}, документ создан в роли Member')\n    \n        with allure.step(f'member_client создаёт Personal-документ для архивации ({title})'):\n            create_resp = member_client.post(\n                **create_document_endpoint(kind='Member', kind_id=personal_id, space_id=main_space, title=title)\n            )\n    \n            assert create_resp.status_code == 200\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n        with allure.step(f'Архивация Personal-документа в роли {role}, {expected_status} (доступно только создателю доки)'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>           assert archive_resp.status_code == expected_status\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:164: AssertionError","steps":[{"name":"member_client создаёт Personal-документ для архивации (29.10_13:47:20 Doc For archive Check)","time":{"start":1761745640796,"stop":1761745641017,"duration":221},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Personal-документа в роли owner, 403 (доступно только создателю доки)","time":{"start":1761745641017,"stop":1761745641140,"duration":123},"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 164, in test_archive_personal_doc\n    assert archive_resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"f6d2c0c9942a1f0c","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/f6d2c0c9942a1f0c","status":"passed","time":{"start":1761576506893,"stop":1761576507528,"duration":635}},{"uid":"40e40f2fb8d9f7b2","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/40e40f2fb8d9f7b2","status":"passed","time":{"start":1761557163682,"stop":1761557164394,"duration":712}},{"uid":"6924e10477d9d853","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/6924e10477d9d853","status":"passed","time":{"start":1761308388000,"stop":1761308388830,"duration":830}},{"uid":"ee49d43b3ee7447d","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/ee49d43b3ee7447d","status":"passed","time":{"start":1761306535348,"stop":1761306535988,"duration":640}},{"uid":"da33ad1a1b929021","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/da33ad1a1b929021","status":"passed","time":{"start":1761136830937,"stop":1761136831626,"duration":689}},{"uid":"1b26a6d1cadaea59","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/1b26a6d1cadaea59","status":"passed","time":{"start":1761135485042,"stop":1761135486031,"duration":989}},{"uid":"c024f3e87c476dca","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/c024f3e87c476dca","status":"passed","time":{"start":1761133947243,"stop":1761133947899,"duration":656}},{"uid":"b1868a63aff4003e","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/b1868a63aff4003e","status":"passed","time":{"start":1761128249878,"stop":1761128250765,"duration":887}},{"uid":"5abf4c8c219d2334","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/5abf4c8c219d2334","status":"passed","time":{"start":1761124356631,"stop":1761124357459,"duration":828}},{"uid":"7e9ea0e6e4ab0238","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/7e9ea0e6e4ab0238","status":"passed","time":{"start":1761119205124,"stop":1761119205827,"duration":703}},{"uid":"e32d0738eb2c9442","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/e32d0738eb2c9442","status":"passed","time":{"start":1761053246967,"stop":1761053247591,"duration":624}},{"uid":"73d30a1f90c97561","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/73d30a1f90c97561","status":"passed","time":{"start":1761047135585,"stop":1761047136246,"duration":661}},{"uid":"e65842a7b4fac671","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/e65842a7b4fac671","status":"passed","time":{"start":1760614542694,"stop":1760614543437,"duration":743}},{"uid":"5946bea287d54356","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/5946bea287d54356","status":"passed","time":{"start":1760599344841,"stop":1760599345845,"duration":1004}},{"uid":"3f1eb6934ae65b12","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/3f1eb6934ae65b12","status":"passed","time":{"start":1760535380559,"stop":1760535381419,"duration":860}},{"uid":"8c0c7620110ebc90","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/8c0c7620110ebc90","status":"passed","time":{"start":1760533824209,"stop":1760533825056,"duration":847}},{"uid":"f4515fb17d3775af","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/f4515fb17d3775af","status":"passed","time":{"start":1760532416157,"stop":1760532417063,"duration":906}},{"uid":"16bb8da8434a7617","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/16bb8da8434a7617","status":"passed","time":{"start":1760529238559,"stop":1760529239163,"duration":604}},{"uid":"8af3fd90a8d071e","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/8af3fd90a8d071e","status":"passed","time":{"start":1760510606184,"stop":1760510607293,"duration":1109}},{"uid":"911b66985f964751","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/911b66985f964751","status":"passed","time":{"start":1760449134541,"stop":1760449135152,"duration":611}}]},"tags":["backend"]},"source":"f97444a84966cde2.json","parameterValues":["'owner_client'","403"]}