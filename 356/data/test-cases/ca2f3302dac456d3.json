{"uid":"ca2f3302dac456d3","name":"Негативный кейс: invalid kindId","fullName":"tests.test_backend.document.test_get_documents#test_get_documents_invalid_inputs","historyId":"c5caae06a7e1393a96c99ab00f8e2a04","time":{"start":1759837458412,"stop":1759837458583,"duration":171},"status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 503\nassert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\ntemp_project = '68e4fbe4e49ce50caff67c06', kind = 'Project'\nkind_id = 'nonexistent-id', space_id = 'valid_space_id', expected_status = 400\ncase_id = 'invalid kindId'\n\n    @pytest.mark.parametrize(\n        'kind, kind_id, space_id, expected_status, case_id',\n        [\n            ('Project', 'nonexistent-id', 'valid_space_id', 400, 'invalid kindId'),\n            ('WrongKind', 'valid_project_id', 'valid_space_id', 400, 'invalid kind'),\n            (None, 'valid_project_id', 'valid_space_id', 400, 'missing kind'),\n            ('Project', None, 'valid_space_id', 400, 'missing kindId'),\n        ],\n        ids=['invalid kindId', 'invalid kind', 'missing kind', 'missing kindId'],\n    )\n    def test_get_documents_invalid_inputs(\n        owner_client, temp_space, temp_project, kind, kind_id, space_id, expected_status, case_id\n    ):\n        allure.dynamic.title(f'Негативный кейс: {case_id}')\n    \n        if kind_id == 'valid_project_id':\n            kind_id = temp_project\n    \n        with allure.step(f'Отправка запроса и проверка статуса {expected_status}, проверка ошибки \"InvalidForm\"'):\n            response = owner_client.post(**get_documents_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space))\n>           assert (\n                response.status_code == expected_status\n            ), f'Ожидался статус {expected_status}, но получен {response.status_code}'\nE           AssertionError: Ожидался статус 400, но получен 503\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_documents.py:76: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1759837155711,"stop":1759837156205,"duration":494},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 503\nassert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\ntemp_project = '68e4fbe4e49ce50caff67c06', kind = 'Project'\nkind_id = 'nonexistent-id', space_id = 'valid_space_id', expected_status = 400\ncase_id = 'invalid kindId'\n\n    @pytest.mark.parametrize(\n        'kind, kind_id, space_id, expected_status, case_id',\n        [\n            ('Project', 'nonexistent-id', 'valid_space_id', 400, 'invalid kindId'),\n            ('WrongKind', 'valid_project_id', 'valid_space_id', 400, 'invalid kind'),\n            (None, 'valid_project_id', 'valid_space_id', 400, 'missing kind'),\n            ('Project', None, 'valid_space_id', 400, 'missing kindId'),\n        ],\n        ids=['invalid kindId', 'invalid kind', 'missing kind', 'missing kindId'],\n    )\n    def test_get_documents_invalid_inputs(\n        owner_client, temp_space, temp_project, kind, kind_id, space_id, expected_status, case_id\n    ):\n        allure.dynamic.title(f'Негативный кейс: {case_id}')\n    \n        if kind_id == 'valid_project_id':\n            kind_id = temp_project\n    \n        with allure.step(f'Отправка запроса и проверка статуса {expected_status}, проверка ошибки \"InvalidForm\"'):\n            response = owner_client.post(**get_documents_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space))\n>           assert (\n                response.status_code == expected_status\n            ), f'Ожидался статус {expected_status}, но получен {response.status_code}'\nE           AssertionError: Ожидался статус 400, но получен 503\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_documents.py:76: AssertionError","steps":[{"name":"Отправка запроса и проверка статуса 400, проверка ошибки \"InvalidForm\"","time":{"start":1759837458412,"stop":1759837458583,"duration":171},"status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 503\nassert 503 == 400\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_documents.py\", line 76, in test_get_documents_invalid_inputs\n    assert (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_project::0","time":{"start":1759837469359,"stop":1759837469359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_documents"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_documents"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case_id","value":"'invalid kindId'"},{"name":"expected_status","value":"400"},{"name":"kind","value":"'Project'"},{"name":"kind_id","value":"'nonexistent-id'"},{"name":"space_id","value":"'valid_space_id'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"418ce8adac6315d2","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/418ce8adac6315d2","status":"passed","time":{"start":1759836308068,"stop":1759836308464,"duration":396}},{"uid":"c2c31eb3a505c4e3","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/c2c31eb3a505c4e3","status":"passed","time":{"start":1759835656410,"stop":1759835656588,"duration":178}},{"uid":"9447a73d66bb151d","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/9447a73d66bb151d","status":"passed","time":{"start":1759834773723,"stop":1759834774000,"duration":277}}]},"tags":["backend"]},"source":"ca2f3302dac456d3.json","parameterValues":["'invalid kindId'","400","'Project'","'nonexistent-id'","'valid_space_id'"]}