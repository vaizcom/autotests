{"uid":"282ea292c65ac4ae","name":"Создание Project-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_project_doc_access_by_roles","historyId":"0d0a3e9396dfba82a041484969c56ee3","time":{"start":1752235250034,"stop":1752235250957,"duration":923},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n            assert resp.status_code == expected_status\n    \n            if expected_status == 200:\n                with allure.step('Созданный Project-документ содержит title'):\n                    assert resp.json()['payload']['document']['title'] == title\n                    doc_id = resp.json()['payload']['document']['_id']\n                with allure.step(f'Архивация Project-документа, {expected_status}'):\n                    archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>                   assert archive_resp.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:76: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1752235198931,"stop":1752235198931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752235198931,"stop":1752235198931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752235198931,"stop":1752235198931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752235198931,"stop":1752235198931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752235198932,"stop":1752235199408,"duration":476},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752235231054,"stop":1752235232639,"duration":1585},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752235232639,"stop":1752235233118,"duration":479},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1752235238414,"stop":1752235238853,"duration":439},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n            assert resp.status_code == expected_status\n    \n            if expected_status == 200:\n                with allure.step('Созданный Project-документ содержит title'):\n                    assert resp.json()['payload']['document']['title'] == title\n                    doc_id = resp.json()['payload']['document']['_id']\n                with allure.step(f'Архивация Project-документа, {expected_status}'):\n                    archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>                   assert archive_resp.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:76: AssertionError","steps":[{"name":"owner создаёт Project-документ, 200","time":{"start":1752235250034,"stop":1752235250957,"duration":923},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 76, in test_create_and_archive_project_doc_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[{"name":"Созданный Project-документ содержит title","time":{"start":1752235250589,"stop":1752235250589,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Project-документа, 200","time":{"start":1752235250589,"stop":1752235250956,"duration":367},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 76, in test_create_and_archive_project_doc_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2615-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":18,"unknown":0,"total":19},"items":[{"uid":"dd5725551e7d5f0f","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/dd5725551e7d5f0f","status":"passed","time":{"start":1752234310979,"stop":1752234312047,"duration":1068}},{"uid":"72c516dd51620630","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/72c516dd51620630","status":"passed","time":{"start":1752234296473,"stop":1752234297081,"duration":608}},{"uid":"3f38cf2d9867730e","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/3f38cf2d9867730e","status":"passed","time":{"start":1752233472981,"stop":1752233473666,"duration":685}},{"uid":"567eeb41dbfe3a50","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/567eeb41dbfe3a50","status":"passed","time":{"start":1752232551592,"stop":1752232552226,"duration":634}},{"uid":"dfaf52230e3fbd0e","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/dfaf52230e3fbd0e","status":"passed","time":{"start":1752232083038,"stop":1752232083692,"duration":654}},{"uid":"f9e1f3d229998d5a","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/f9e1f3d229998d5a","status":"passed","time":{"start":1752223494607,"stop":1752223495487,"duration":880}},{"uid":"e2d5d56afd99cf2e","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/e2d5d56afd99cf2e","status":"passed","time":{"start":1752218257237,"stop":1752218257790,"duration":553}},{"uid":"37f6f45de2de7ccd","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/37f6f45de2de7ccd","status":"passed","time":{"start":1752151023247,"stop":1752151023983,"duration":736}},{"uid":"9bbb62337bfefc6f","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/9bbb62337bfefc6f","status":"passed","time":{"start":1752148898747,"stop":1752148899290,"duration":543}},{"uid":"dedf9252f749cbbe","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/dedf9252f749cbbe","status":"passed","time":{"start":1752138385162,"stop":1752138385821,"duration":659}},{"uid":"6496bbf4822f99d8","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/6496bbf4822f99d8","status":"passed","time":{"start":1752137260920,"stop":1752137261526,"duration":606}},{"uid":"ecbbd18f8d74aac","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/ecbbd18f8d74aac","status":"passed","time":{"start":1752133892418,"stop":1752133893051,"duration":633}},{"uid":"17196fe19046cfd9","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/17196fe19046cfd9","status":"passed","time":{"start":1752066489063,"stop":1752066489649,"duration":586}},{"uid":"95a3cde493abf8b","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/95a3cde493abf8b","status":"passed","time":{"start":1752065494817,"stop":1752065495361,"duration":544}},{"uid":"7fb808ad8813b802","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/7fb808ad8813b802","status":"passed","time":{"start":1752064709498,"stop":1752064710191,"duration":693}},{"uid":"8dd631f6ebba620","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/8dd631f6ebba620","status":"passed","time":{"start":1752062494191,"stop":1752062494843,"duration":652}},{"uid":"fdcd67181fce08df","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/fdcd67181fce08df","status":"passed","time":{"start":1752060634397,"stop":1752060634975,"duration":578}},{"uid":"4e7c08d06f75da6c","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/4e7c08d06f75da6c","status":"passed","time":{"start":1752059605466,"stop":1752059606141,"duration":675}}]},"tags":["backend"]},"source":"282ea292c65ac4ae.json","parameterValues":["'owner_client'","200"]}