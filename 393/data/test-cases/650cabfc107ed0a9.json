{"uid":"650cabfc107ed0a9","name":"Дублирование Personal-документа: создание manager, дублирование owner","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_personal_doc_different_roles","historyId":"559e4af47147bb70ec6a08ef91148780","time":{"start":1761747805211,"stop":1761747805925,"duration":714},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[manager_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'manager_client', duplicator_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа\n            with allure.step(\n                f'Дублирование документа пользователем с ролью {duplicator_role} (Нельзя дублировать чужие персональные документы)'\n            ):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:228: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761747760278,"stop":1761747760278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761747760278,"stop":1761747760906,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761747765139,"stop":1761747765458,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761747765458,"stop":1761747765749,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761747766550,"stop":1761747766846,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761747777032,"stop":1761747777311,"duration":279},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[manager_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'manager_client', duplicator_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа\n            with allure.step(\n                f'Дублирование документа пользователем с ролью {duplicator_role} (Нельзя дублировать чужие персональные документы)'\n            ):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:228: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью manager","time":{"start":1761747805211,"stop":1761747805478,"duration":267},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Дублирование документа пользователем с ролью owner (Нельзя дублировать чужие персональные документы)","time":{"start":1761747805478,"stop":1761747805658,"duration":180},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 228, in test_duplicate_personal_doc_different_roles\n    assert duplicate_response.status_code == expected_status, (\n","steps":[],"attachments":[{"uid":"107637ed0e90b0f1","name":"Response Body","source":"107637ed0e90b0f1.json","type":"application/json","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Архивация исходного документа","time":{"start":1761747805658,"stop":1761747805925,"duration":267},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'manager_client'"},{"name":"duplicator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"50613d7f5d60cb0a","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/50613d7f5d60cb0a","status":"passed","time":{"start":1761746679004,"stop":1761746679884,"duration":880}},{"uid":"15692b635afab106","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/15692b635afab106","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745662749,"stop":1761745663312,"duration":563}},{"uid":"3e654a13ae6e024c","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/3e654a13ae6e024c","status":"passed","time":{"start":1761576545951,"stop":1761576546639,"duration":688}},{"uid":"b0578072935d49d3","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/b0578072935d49d3","status":"passed","time":{"start":1761557202409,"stop":1761557203084,"duration":675}},{"uid":"5b9eeca176f5857a","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/5b9eeca176f5857a","status":"passed","time":{"start":1761308427338,"stop":1761308427998,"duration":660}},{"uid":"7a88eccccab7b67f","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/7a88eccccab7b67f","status":"passed","time":{"start":1761306574553,"stop":1761306575229,"duration":676}},{"uid":"dabacf8d5c3a4896","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/dabacf8d5c3a4896","status":"passed","time":{"start":1761136871188,"stop":1761136871930,"duration":742}},{"uid":"e62df2627b6d1248","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/e62df2627b6d1248","status":"passed","time":{"start":1761135529024,"stop":1761135529845,"duration":821}},{"uid":"6d3a507f681c02ce","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/6d3a507f681c02ce","status":"passed","time":{"start":1761133985453,"stop":1761133986107,"duration":654}},{"uid":"b826b3202f167e40","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/b826b3202f167e40","status":"passed","time":{"start":1761128298061,"stop":1761128298919,"duration":858}},{"uid":"49820a814c706beb","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/49820a814c706beb","status":"passed","time":{"start":1761124405145,"stop":1761124406705,"duration":1560}},{"uid":"3d85a07650cab6e4","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/3d85a07650cab6e4","status":"passed","time":{"start":1761119246432,"stop":1761119247142,"duration":710}},{"uid":"168e04c70a46027d","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/168e04c70a46027d","status":"passed","time":{"start":1761053287316,"stop":1761053287985,"duration":669}},{"uid":"ce6030d8cee10cf8","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/ce6030d8cee10cf8","status":"passed","time":{"start":1761047176695,"stop":1761047177428,"duration":733}},{"uid":"72b6005e96189180","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/72b6005e96189180","status":"passed","time":{"start":1760614585908,"stop":1760614586737,"duration":829}},{"uid":"b3a037ea9ac94d65","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/b3a037ea9ac94d65","status":"passed","time":{"start":1760599386717,"stop":1760599387537,"duration":820}},{"uid":"5addbe2d3a7190ab","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/5addbe2d3a7190ab","status":"passed","time":{"start":1760535422812,"stop":1760535423508,"duration":696}},{"uid":"a48ef94cabbc3045","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/a48ef94cabbc3045","status":"passed","time":{"start":1760533879546,"stop":1760533880440,"duration":894}},{"uid":"2b93cebc6b0ecb8e","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/2b93cebc6b0ecb8e","status":"passed","time":{"start":1760532458630,"stop":1760532459341,"duration":711}},{"uid":"c1c78232d1002e89","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/c1c78232d1002e89","status":"passed","time":{"start":1760529277194,"stop":1760529277839,"duration":645}}]},"tags":["backend"]},"source":"650cabfc107ed0a9.json","parameterValues":["'manager_client'","'owner_client'","403"]}