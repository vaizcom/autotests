{"uid":"a43d951cf5094184","name":"Тест: Проверка slug: уникальность до создания, неуникальность после создания, и ошибка при дубликате","fullName":"tests.test_backend.project.test_project#test_project_slug_unique","historyId":"afc5fc111fa94b83f0d65cdbb5fd27f8","time":{"start":1759837465942,"stop":1759837466115,"duration":173},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\n\n    @allure.title('Тест: Проверка slug: уникальность до создания, неуникальность после создания, и ошибка при дубликате')\n    def test_project_slug_unique(owner_client, temp_space):\n        client = owner_client\n        slug = generate_slug()\n        name = generate_project_name()\n        common_kwargs = {'color': 'blue', 'icon': 'Dot', 'description': 'test slug validation', 'space_id': temp_space}\n        with allure.step('Убедиться, что slug уникален'):\n            check_response_1 = client.post(**is_project_slug_unique_endpoint(slug=slug, space_id=temp_space))\n>       assert check_response_1.status_code == 200\nE       assert 503 == 200\nE        +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/project/test_project.py:29: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\n\n    @allure.title('Тест: Проверка slug: уникальность до создания, неуникальность после создания, и ошибка при дубликате')\n    def test_project_slug_unique(owner_client, temp_space):\n        client = owner_client\n        slug = generate_slug()\n        name = generate_project_name()\n        common_kwargs = {'color': 'blue', 'icon': 'Dot', 'description': 'test slug validation', 'space_id': temp_space}\n        with allure.step('Убедиться, что slug уникален'):\n            check_response_1 = client.post(**is_project_slug_unique_endpoint(slug=slug, space_id=temp_space))\n>       assert check_response_1.status_code == 200\nE       assert 503 == 200\nE        +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/project/test_project.py:29: AssertionError","steps":[{"name":"Убедиться, что slug уникален","time":{"start":1759837465942,"stop":1759837466115,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.project"},{"name":"suite","value":"test_project"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.project.test_project"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"c7fcaa7f53a76459","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/c7fcaa7f53a76459","status":"passed","time":{"start":1759836392766,"stop":1759836393715,"duration":949}},{"uid":"e10c306a34944879","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/e10c306a34944879","status":"passed","time":{"start":1759835724527,"stop":1759835725360,"duration":833}},{"uid":"65dcf30f899a71fd","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/65dcf30f899a71fd","status":"passed","time":{"start":1759834854438,"stop":1759834855481,"duration":1043}}]},"tags":["backend"]},"source":"a43d951cf5094184.json","parameterValues":[]}