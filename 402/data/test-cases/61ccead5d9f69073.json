{"uid":"61ccead5d9f69073","name":"Архивирование Space-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_space_doc","historyId":"caa1f26fa1c2a34ffa0bd86c8c25ea11","time":{"start":1761910802913,"stop":1761910803030,"duration":117},"description":"\n    Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\n    Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n    и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n    Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n    Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n    с использованием случайного клиента с повышенными правами.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\nТест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\nи оценивает возможность архивации документа на основе предоставленной роли client_fixture.\nПроверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\nДополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\nс использованием случайного клиента с повышенными правами.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n    \n        Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n        и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n        Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n        Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n        с использованием случайного клиента с повышенными правами.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:56: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761910792963,"stop":1761910793391,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761910796070,"stop":1761910796305,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761910796305,"stop":1761910796513,"duration":208},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761910797905,"stop":1761910798334,"duration":429},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\n    Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n    и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n    Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n    Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n    с использованием случайного клиента с повышенными правами.\n    ","status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n    \n        Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n        и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n        Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n        Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n        с использованием случайного клиента с повышенными правами.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:56: AssertionError","steps":[{"name":"Случайный клиент(owner_client) создаёт Space-документ для архивации (title = 31.10_11:40:02 Space Doc For Archive Check)","time":{"start":1761910802913,"stop":1761910803030,"duration":117},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 56, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки списка","time":{"start":1761910803030,"stop":1761910803030,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 56, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2545-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":47,"unknown":0,"total":52},"items":[{"uid":"4e39b6a7301fd1e6","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/4e39b6a7301fd1e6","status":"passed","time":{"start":1761910505455,"stop":1761910506039,"duration":584}},{"uid":"2db65eb1d3313c4b","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/2db65eb1d3313c4b","status":"passed","time":{"start":1761909868599,"stop":1761909869419,"duration":820}},{"uid":"75f28c3d60361c8d","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/75f28c3d60361c8d","status":"passed","time":{"start":1761899901892,"stop":1761899902680,"duration":788}},{"uid":"6f5d9e8b85e35d2","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/6f5d9e8b85e35d2","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761834950495,"stop":1761834950620,"duration":125}},{"uid":"f85332cee036fcab","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/f85332cee036fcab","status":"passed","time":{"start":1761834500083,"stop":1761834500997,"duration":914}},{"uid":"d5ee2f3d159a126f","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/d5ee2f3d159a126f","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761833328269,"stop":1761833328450,"duration":181}},{"uid":"5ba037be8d76cc21","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/5ba037be8d76cc21","status":"passed","time":{"start":1761821509760,"stop":1761821510365,"duration":605}},{"uid":"ec45ef1ea3721a1b","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/ec45ef1ea3721a1b","status":"passed","time":{"start":1761818629809,"stop":1761818630584,"duration":775}},{"uid":"1e4c3435eb09fcd0","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/1e4c3435eb09fcd0","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761748513576,"stop":1761748513702,"duration":126}},{"uid":"ff19b6c98e97a007","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ff19b6c98e97a007","status":"passed","time":{"start":1761747772784,"stop":1761747773898,"duration":1114}},{"uid":"38401df129deab57","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/38401df129deab57","status":"passed","time":{"start":1761746628440,"stop":1761746629853,"duration":1413}},{"uid":"eb6a4772adb81861","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/eb6a4772adb81861","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761745638094,"stop":1761745638214,"duration":120}},{"uid":"2b6b28b3faff4950","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2b6b28b3faff4950","status":"passed","time":{"start":1761576502181,"stop":1761576502810,"duration":629}},{"uid":"ba4509cbb1071e55","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/ba4509cbb1071e55","status":"passed","time":{"start":1761557158389,"stop":1761557159166,"duration":777}},{"uid":"e5f6f780b130805c","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/e5f6f780b130805c","status":"passed","time":{"start":1761308383150,"stop":1761308383954,"duration":804}},{"uid":"a5029c2d7c3a22ae","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/a5029c2d7c3a22ae","status":"passed","time":{"start":1761306530832,"stop":1761306531495,"duration":663}},{"uid":"68b4813e6ae871b5","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/68b4813e6ae871b5","status":"passed","time":{"start":1761136825284,"stop":1761136826213,"duration":929}},{"uid":"af83bce7e9178574","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/af83bce7e9178574","status":"passed","time":{"start":1761135478798,"stop":1761135479745,"duration":947}},{"uid":"29d868d0b04e46e9","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/29d868d0b04e46e9","status":"passed","time":{"start":1761133942633,"stop":1761133943272,"duration":639}},{"uid":"af01e5cd9626440f","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/af01e5cd9626440f","status":"passed","time":{"start":1761128243893,"stop":1761128244704,"duration":811}}]},"tags":["backend"]},"source":"61ccead5d9f69073.json","parameterValues":["'member_client'","200"]}