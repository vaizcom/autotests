{"uid":"5ba6068e16d341c","name":"Создание Space-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_space_doc_access_by_roles","historyId":"d9ef71fb375b91e3448c594aa8e7af45","time":{"start":1752565263853,"stop":1752565264182,"duration":329},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:32: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1752565125157,"stop":1752565125158,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752565125158,"stop":1752565125158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752565125158,"stop":1752565125158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752565125158,"stop":1752565125158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752565125158,"stop":1752565125791,"duration":633},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752565125791,"stop":1752565126241,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752565126243,"stop":1752565126749,"duration":506},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:32: AssertionError","steps":[{"name":"owner создаёт Space-документ, 200","time":{"start":1752565263853,"stop":1752565264182,"duration":329},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 32, in test_create_and_archive_space_doc_access_by_roles\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2579-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":27,"unknown":0,"total":33},"items":[{"uid":"b6e11488d73940e2","reportUrl":"https://vaizcom.github.io/autotests/298//#testresult/b6e11488d73940e2","status":"failed","statusDetails":"Failed: ScopeMismatch: You tried to access the function scoped fixture resource_lock with a session scoped request object. Requesting fixture stack:\ntests/conftest.py:68:  def main_space(main_client, resource_lock) -> str\nRequested fixture:\ntests/conftest.py:25:  def resource_lock()","time":{"start":1752563849060,"stop":1752563849060,"duration":0}},{"uid":"fa10623ab5d1503e","reportUrl":"https://vaizcom.github.io/autotests/297//#testresult/fa10623ab5d1503e","status":"failed","statusDetails":"Failed: ScopeMismatch: You tried to access the function scoped fixture resource_lock with a session scoped request object. Requesting fixture stack:\ntests/conftest.py:68:  def main_space(main_client, resource_lock) -> str\nRequested fixture:\ntests/conftest.py:25:  def resource_lock()","time":{"start":1752562435945,"stop":1752562435945,"duration":0}},{"uid":"e30440b86e56bbe3","reportUrl":"https://vaizcom.github.io/autotests/296//#testresult/e30440b86e56bbe3","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752501029246,"stop":1752501031244,"duration":1998}},{"uid":"30f9af468711e41","reportUrl":"https://vaizcom.github.io/autotests/295//#testresult/30f9af468711e41","status":"passed","time":{"start":1752500642384,"stop":1752500643850,"duration":1466}},{"uid":"d4ea4916a1696067","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/d4ea4916a1696067","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752499325523,"stop":1752499326157,"duration":634}},{"uid":"92e3b31d061aee0f","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/92e3b31d061aee0f","status":"passed","time":{"start":1752498158771,"stop":1752498159428,"duration":657}},{"uid":"a64b5cc36ae717fd","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/a64b5cc36ae717fd","status":"passed","time":{"start":1752496490714,"stop":1752496491420,"duration":706}},{"uid":"94c330b9cc696aa0","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/94c330b9cc696aa0","status":"passed","time":{"start":1752481634985,"stop":1752481635532,"duration":547}},{"uid":"e428cfedd38c0451","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/e428cfedd38c0451","status":"passed","time":{"start":1752479663619,"stop":1752479664186,"duration":567}},{"uid":"e9b2bb4ca976fc0b","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/e9b2bb4ca976fc0b","status":"passed","time":{"start":1752477808181,"stop":1752477825024,"duration":16843}},{"uid":"4d9b044702d93e6b","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/4d9b044702d93e6b","status":"passed","time":{"start":1752236690633,"stop":1752236691222,"duration":589}},{"uid":"8f8349e77281d64d","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/8f8349e77281d64d","status":"passed","time":{"start":1752236065587,"stop":1752236066189,"duration":602}},{"uid":"6644e7b1706656c","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/6644e7b1706656c","status":"passed","time":{"start":1752235260454,"stop":1752235261612,"duration":1158}},{"uid":"3adf90e91af2f324","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/3adf90e91af2f324","status":"passed","time":{"start":1752235247062,"stop":1752235247833,"duration":771}},{"uid":"808ccd38f3846d30","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/808ccd38f3846d30","status":"passed","time":{"start":1752234308040,"stop":1752234309000,"duration":960}},{"uid":"92f02df669ff016b","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/92f02df669ff016b","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752234294102,"stop":1752234294687,"duration":585}},{"uid":"8a0cfa215e71e155","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/8a0cfa215e71e155","status":"passed","time":{"start":1752233470244,"stop":1752233471010,"duration":766}},{"uid":"607160b67a2657b7","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/607160b67a2657b7","status":"passed","time":{"start":1752232549606,"stop":1752232550188,"duration":582}},{"uid":"a3cf24580ef3d9f1","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/a3cf24580ef3d9f1","status":"passed","time":{"start":1752232080798,"stop":1752232081490,"duration":692}},{"uid":"2166b052bb1be43f","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/2166b052bb1be43f","status":"passed","time":{"start":1752223492610,"stop":1752223493121,"duration":511}}]},"tags":["backend"]},"source":"5ba6068e16d341c.json","parameterValues":["'owner_client'","200"]}