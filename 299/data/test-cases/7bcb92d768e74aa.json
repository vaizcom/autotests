{"uid":"7bcb92d768e74aa","name":"Создание Project-документа для роли manager","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_project_doc_access_by_roles","historyId":"1b628a28e1e30098bb08b5d1d699ba83","time":{"start":1752565266910,"stop":1752565267181,"duration":271},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:68: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1752565125157,"stop":1752565125158,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752565125158,"stop":1752565125158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752565125158,"stop":1752565125158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752565125158,"stop":1752565125158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752565125158,"stop":1752565125791,"duration":633},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752565125791,"stop":1752565126241,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752565128332,"stop":1752565128829,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1752565151504,"stop":1752565151908,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:68: AssertionError","steps":[{"name":"manager создаёт Project-документ, 200","time":{"start":1752565266910,"stop":1752565267180,"duration":270},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 68, in test_create_and_archive_project_doc_access_by_roles\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2579-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":26,"unknown":0,"total":33},"items":[{"uid":"e821de3fbd3ceea6","reportUrl":"https://vaizcom.github.io/autotests/298//#testresult/e821de3fbd3ceea6","status":"failed","statusDetails":"Failed: ScopeMismatch: You tried to access the function scoped fixture resource_lock with a session scoped request object. Requesting fixture stack:\ntests/conftest.py:80:  def main_project(main_client, main_space, resource_lock)\ntests/conftest.py:68:  def main_space(main_client, resource_lock) -> str\nRequested fixture:\ntests/conftest.py:25:  def resource_lock()","time":{"start":1752563849079,"stop":1752563849079,"duration":0}},{"uid":"d0b282eb5fbd9c4f","reportUrl":"https://vaizcom.github.io/autotests/297//#testresult/d0b282eb5fbd9c4f","status":"failed","statusDetails":"Failed: ScopeMismatch: You tried to access the function scoped fixture resource_lock with a session scoped request object. Requesting fixture stack:\ntests/conftest.py:80:  def main_project(main_client, main_space, resource_lock)\ntests/conftest.py:68:  def main_space(main_client, resource_lock) -> str\nRequested fixture:\ntests/conftest.py:25:  def resource_lock()","time":{"start":1752562435964,"stop":1752562435964,"duration":0}},{"uid":"9760eeaac5c55395","reportUrl":"https://vaizcom.github.io/autotests/296//#testresult/9760eeaac5c55395","status":"passed","time":{"start":1752501035690,"stop":1752501037273,"duration":1583}},{"uid":"f458d7921e338c5a","reportUrl":"https://vaizcom.github.io/autotests/295//#testresult/f458d7921e338c5a","status":"passed","time":{"start":1752500649237,"stop":1752500651165,"duration":1928}},{"uid":"e950573406b5ebb8","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/e950573406b5ebb8","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752499331815,"stop":1752499333499,"duration":1684}},{"uid":"269540a7cee607aa","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/269540a7cee607aa","status":"passed","time":{"start":1752498162074,"stop":1752498162729,"duration":655}},{"uid":"6d3cba7ef077cb33","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/6d3cba7ef077cb33","status":"passed","time":{"start":1752496493622,"stop":1752496494348,"duration":726}},{"uid":"1f6c33415990cb0c","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/1f6c33415990cb0c","status":"passed","time":{"start":1752481637533,"stop":1752481638135,"duration":602}},{"uid":"2e97440bf376338","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/2e97440bf376338","status":"passed","time":{"start":1752479666364,"stop":1752479667171,"duration":807}},{"uid":"bb248f7e1f5f6c3c","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/bb248f7e1f5f6c3c","status":"passed","time":{"start":1752477827180,"stop":1752477827757,"duration":577}},{"uid":"1f800dcb93989f02","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/1f800dcb93989f02","status":"passed","time":{"start":1752236693738,"stop":1752236694358,"duration":620}},{"uid":"172d3e4818277f34","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/172d3e4818277f34","status":"passed","time":{"start":1752236068162,"stop":1752236068745,"duration":583}},{"uid":"bd692dc80bc7bded","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/bd692dc80bc7bded","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752235267977,"stop":1752235269285,"duration":1308}},{"uid":"7f00230caa1bbe08","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/7f00230caa1bbe08","status":"passed","time":{"start":1752235250990,"stop":1752235251958,"duration":968}},{"uid":"16003274aed66b87","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/16003274aed66b87","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752234312049,"stop":1752234312436,"duration":387}},{"uid":"358d58506756bf35","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/358d58506756bf35","status":"passed","time":{"start":1752234297083,"stop":1752234298011,"duration":928}},{"uid":"2f2713e23aae5c99","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/2f2713e23aae5c99","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752233473668,"stop":1752233474411,"duration":743}},{"uid":"5ee4778810dbece3","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/5ee4778810dbece3","status":"passed","time":{"start":1752232552228,"stop":1752232552842,"duration":614}},{"uid":"3753140beb23c5d1","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/3753140beb23c5d1","status":"passed","time":{"start":1752232083694,"stop":1752232084362,"duration":668}},{"uid":"adccd89bd5335e8f","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/adccd89bd5335e8f","status":"passed","time":{"start":1752223495489,"stop":1752223496045,"duration":556}}]},"tags":["backend"]},"source":"7bcb92d768e74aa.json","parameterValues":["'manager_client'","200"]}