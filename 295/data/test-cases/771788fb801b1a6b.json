{"uid":"771788fb801b1a6b","name":"Создание Project-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_project_doc_access_by_roles","historyId":"2ef5844bd51efe3912f7ae6388a0e8a0","time":{"start":1752500651168,"stop":1752500651743,"duration":575},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[member]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:68: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1752500528125,"stop":1752500528125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752500528125,"stop":1752500528125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500528125,"stop":1752500528780,"duration":655},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500528125,"stop":1752500528125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500528125,"stop":1752500528125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500528780,"stop":1752500529366,"duration":586},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752500533280,"stop":1752500534023,"duration":743},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1752500571778,"stop":1752500572178,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[member]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:68: AssertionError","steps":[{"name":"member создаёт Project-документ, 200","time":{"start":1752500651168,"stop":1752500651742,"duration":574},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 68, in test_create_and_archive_project_doc_access_by_roles\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":26,"unknown":0,"total":29},"items":[{"uid":"64f3fc74359022c8","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/64f3fc74359022c8","status":"passed","time":{"start":1752499333505,"stop":1752499334792,"duration":1287}},{"uid":"5f1b5335d9ddecfb","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/5f1b5335d9ddecfb","status":"passed","time":{"start":1752498162731,"stop":1752498163438,"duration":707}},{"uid":"b29cdd20b58546da","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/b29cdd20b58546da","status":"passed","time":{"start":1752496494350,"stop":1752496495046,"duration":696}},{"uid":"34e9466faff0bd27","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/34e9466faff0bd27","status":"passed","time":{"start":1752481638137,"stop":1752481638787,"duration":650}},{"uid":"479b01ece557d251","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/479b01ece557d251","status":"passed","time":{"start":1752479667173,"stop":1752479667974,"duration":801}},{"uid":"3a3b938d7b986f8d","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/3a3b938d7b986f8d","status":"passed","time":{"start":1752477827759,"stop":1752477828358,"duration":599}},{"uid":"37a0182ef9cc55ed","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/37a0182ef9cc55ed","status":"passed","time":{"start":1752236694360,"stop":1752236694961,"duration":601}},{"uid":"dfa1383e344a05b3","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/dfa1383e344a05b3","status":"passed","time":{"start":1752236068747,"stop":1752236069339,"duration":592}},{"uid":"8db9a962d306645e","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/8db9a962d306645e","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752235269291,"stop":1752235270226,"duration":935}},{"uid":"20323f7b36b9b3f9","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/20323f7b36b9b3f9","status":"passed","time":{"start":1752235251960,"stop":1752235252677,"duration":717}},{"uid":"7f06d41d202d98a6","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/7f06d41d202d98a6","status":"passed","time":{"start":1752234312441,"stop":1752234313317,"duration":876}},{"uid":"55033828cbdc7e6","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/55033828cbdc7e6","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752234298013,"stop":1752234298342,"duration":329}},{"uid":"ae98a34d5f41ce0f","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/ae98a34d5f41ce0f","status":"passed","time":{"start":1752233474444,"stop":1752233475140,"duration":696}},{"uid":"f5872cf00eadb728","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/f5872cf00eadb728","status":"passed","time":{"start":1752232552844,"stop":1752232553403,"duration":559}},{"uid":"b4771ef9ef54457b","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/b4771ef9ef54457b","status":"passed","time":{"start":1752232084364,"stop":1752232084998,"duration":634}},{"uid":"5409eefdb9f06b20","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/5409eefdb9f06b20","status":"passed","time":{"start":1752223496047,"stop":1752223496610,"duration":563}},{"uid":"312e5fe58cb03aad","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/312e5fe58cb03aad","status":"passed","time":{"start":1752218258444,"stop":1752218259062,"duration":618}},{"uid":"edbd04b516daeb2c","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/edbd04b516daeb2c","status":"passed","time":{"start":1752151024907,"stop":1752151025547,"duration":640}},{"uid":"eafa302e87ac3f5f","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/eafa302e87ac3f5f","status":"passed","time":{"start":1752148899939,"stop":1752148900650,"duration":711}},{"uid":"4e8291653a3297c1","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/4e8291653a3297c1","status":"passed","time":{"start":1752138386591,"stop":1752138387266,"duration":675}}]},"tags":["backend"]},"source":"771788fb801b1a6b.json","parameterValues":["'member_client'","200"]}