{"uid":"f829b642a5a814f0","name":"Редактирование Personal-документа: создание owner, редактирование owner","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_personal_doc_different_roles","historyId":"fe8a0734d1732a40b85830824e360a93","time":{"start":1752477913421,"stop":1752477915006,"duration":1585},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли manager: статус 403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[owner_self_edit_personal]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', editor_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member',\n                        kind_id=main_personal[creator_role][0],\n                        space_id=main_space,\n                        title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: '\n                    f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role} (Нельзя редактировать чужие персональные документы)'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(\n                        document_id=doc_id,\n                        title=edited_title,\n                        icon='icon_test',\n                        space_id=main_space\n                    )\n                )\n                assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\n    \n                if expected_status == 200:\n                    with allure.step('Проверка видимости изменений документа для всех ролей'):\n                        # Собираем всех клиентов, которые должны видеть документ\n                        with allure.step('Получение клиентов для проверки'):\n                            clients_to_check = {\n                                'owner': request.getfixturevalue('owner_client'),\n                                'manager': request.getfixturevalue('manager_client'),\n                                'member': request.getfixturevalue('member_client'),\n                                'guest': request.getfixturevalue('guest_client')\n                            }\n    \n                        # Проверяем видимость изменений для каждого клиента\n                        for role, client in clients_to_check.items():\n                            with allure.step(f'Проверка для роли {role}'):\n                                with allure.step(f'Запрос документа от имени {role}'):\n                                    get_response = client.post(\n                                        **get_document_endpoint(document_id=doc_id, space_id=main_space)\n                                    )\n    \n                                with allure.step(f'Проверка статуса ответа для {role}'):\n>                                   assert get_response.status_code == 200, (\n                                        f'Ошибка при получении документа для роли {role}: '\n                                        f'статус {get_response.status_code}'\n                                    )\nE                                   AssertionError: Ошибка при получении документа для роли manager: статус 403\nE                                   assert 403 == 200\nE                                    +  where 403 = <Response [403]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:246: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1752477775210,"stop":1752477775210,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752477775210,"stop":1752477775722,"duration":512},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752477775210,"stop":1752477775210,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752477775210,"stop":1752477775210,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752477775210,"stop":1752477775210,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752477796941,"stop":1752477797363,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752477797363,"stop":1752477797601,"duration":238},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752477797602,"stop":1752477797839,"duration":237},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752477799182,"stop":1752477799474,"duration":292},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1752477800322,"stop":1752477800744,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1752477804923,"stop":1752477805325,"duration":402},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли manager: статус 403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[owner_self_edit_personal]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', editor_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member',\n                        kind_id=main_personal[creator_role][0],\n                        space_id=main_space,\n                        title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: '\n                    f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role} (Нельзя редактировать чужие персональные документы)'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(\n                        document_id=doc_id,\n                        title=edited_title,\n                        icon='icon_test',\n                        space_id=main_space\n                    )\n                )\n                assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\n    \n                if expected_status == 200:\n                    with allure.step('Проверка видимости изменений документа для всех ролей'):\n                        # Собираем всех клиентов, которые должны видеть документ\n                        with allure.step('Получение клиентов для проверки'):\n                            clients_to_check = {\n                                'owner': request.getfixturevalue('owner_client'),\n                                'manager': request.getfixturevalue('manager_client'),\n                                'member': request.getfixturevalue('member_client'),\n                                'guest': request.getfixturevalue('guest_client')\n                            }\n    \n                        # Проверяем видимость изменений для каждого клиента\n                        for role, client in clients_to_check.items():\n                            with allure.step(f'Проверка для роли {role}'):\n                                with allure.step(f'Запрос документа от имени {role}'):\n                                    get_response = client.post(\n                                        **get_document_endpoint(document_id=doc_id, space_id=main_space)\n                                    )\n    \n                                with allure.step(f'Проверка статуса ответа для {role}'):\n>                                   assert get_response.status_code == 200, (\n                                        f'Ошибка при получении документа для роли {role}: '\n                                        f'статус {get_response.status_code}'\n                                    )\nE                                   AssertionError: Ошибка при получении документа для роли manager: статус 403\nE                                   assert 403 == 200\nE                                    +  where 403 = <Response [403]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:246: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью owner","time":{"start":1752477913422,"stop":1752477913896,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью owner (Нельзя редактировать чужие персональные документы)","time":{"start":1752477913896,"stop":1752477914726,"duration":830},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли manager: статус 403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 246, in test_edit_personal_doc_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Проверка видимости изменений документа для всех ролей","time":{"start":1752477914149,"stop":1752477914725,"duration":576},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли manager: статус 403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 246, in test_edit_personal_doc_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Получение клиентов для проверки","time":{"start":1752477914149,"stop":1752477914149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка для роли owner","time":{"start":1752477914149,"stop":1752477914500,"duration":351},"status":"passed","steps":[{"name":"Запрос документа от имени owner","time":{"start":1752477914149,"stop":1752477914500,"duration":351},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статуса ответа для owner","time":{"start":1752477914500,"stop":1752477914500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка содержимого документа для owner","time":{"start":1752477914500,"stop":1752477914500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true},{"name":"Проверка для роли manager","time":{"start":1752477914500,"stop":1752477914725,"duration":225},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли manager: статус 403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 246, in test_edit_personal_doc_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Запрос документа от имени manager","time":{"start":1752477914500,"stop":1752477914725,"duration":225},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статуса ответа для manager","time":{"start":1752477914725,"stop":1752477914725,"duration":0},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли manager: статус 403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 246, in test_edit_personal_doc_different_roles\n    assert get_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":8,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":9,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1752477914726,"stop":1752477915006,"duration":280},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":12,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2529-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"editor_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":11},"items":[{"uid":"4fc5a057f31a202e","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/4fc5a057f31a202e","status":"passed","time":{"start":1752236779512,"stop":1752236780767,"duration":1255}},{"uid":"ca6d474074521444","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/ca6d474074521444","status":"passed","time":{"start":1752236148229,"stop":1752236149262,"duration":1033}},{"uid":"bbcd1dcf6dce6e2b","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/bbcd1dcf6dce6e2b","status":"passed","time":{"start":1752235387733,"stop":1752235389670,"duration":1937}},{"uid":"a8cab12c2ca3a179","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/a8cab12c2ca3a179","status":"passed","time":{"start":1752235360876,"stop":1752235362109,"duration":1233}},{"uid":"97e901e748774a5b","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/97e901e748774a5b","status":"passed","time":{"start":1752234408219,"stop":1752234410188,"duration":1969}},{"uid":"41aaea0c9d29288b","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/41aaea0c9d29288b","status":"passed","time":{"start":1752234384429,"stop":1752234386254,"duration":1825}},{"uid":"2840678f0434d1c6","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/2840678f0434d1c6","status":"passed","time":{"start":1752233568098,"stop":1752233569402,"duration":1304}},{"uid":"80456756e734a961","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/80456756e734a961","status":"passed","time":{"start":1752232629769,"stop":1752232630849,"duration":1080}},{"uid":"ba774cd313e0c806","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/ba774cd313e0c806","status":"passed","time":{"start":1752232167285,"stop":1752232168435,"duration":1150}},{"uid":"580268ebae800d9a","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/580268ebae800d9a","status":"passed","time":{"start":1752223565795,"stop":1752223566678,"duration":883}}]},"tags":["backend"]},"source":"f829b642a5a814f0.json","parameterValues":["'owner_client'","'owner_client'","200"]}