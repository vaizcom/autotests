{"uid":"e8dceaf98cfef3f2","name":"Архивирование Personal-документа для роли manager, документ создан в роли Member","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_personal_doc","historyId":"a28b88ed20c449a4d2100299748269d6","time":{"start":1752501042248,"stop":1752501043225,"duration":977},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_personal_doc[manager]>>\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 403\nmember_client = <tests.core.client.APIClient object at 0x7fd33ced8690>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 403),\n            ('manager_client', 403),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_personal_doc(request, main_personal, main_space, client_fixture, expected_status, member_client):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        personal_id = main_personal['member'][0]\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Personal-документа для роли {role}, документ создан в роли Member')\n    \n        with allure.step(f'member_client создаёт Personal-документ для архивации ({title})'):\n            create_resp = member_client.post(\n                **create_document_endpoint(kind='Member', kind_id=personal_id, space_id=main_space, title=title)\n            )\n    \n            assert create_resp.status_code == 200\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n        with allure.step(f'Архивация Personal-документа в роли {role}, {expected_status} (доступно только создателю доки)'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n            assert archive_resp.status_code == expected_status\n    \n        if expected_status == 403:\n            with allure.step('member_client выполняет финальную архивацию Personal-документа для очистки после теста'):\n                archive = member_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>               assert archive.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:143: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500916493,"stop":1752500917294,"duration":801},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500917294,"stop":1752500918389,"duration":1095},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752500924480,"stop":1752500924955,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752500927469,"stop":1752500927992,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1752500977693,"stop":1752500978205,"duration":512},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_personal_doc[manager]>>\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 403\nmember_client = <tests.core.client.APIClient object at 0x7fd33ced8690>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 403),\n            ('manager_client', 403),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_personal_doc(request, main_personal, main_space, client_fixture, expected_status, member_client):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        personal_id = main_personal['member'][0]\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Personal-документа для роли {role}, документ создан в роли Member')\n    \n        with allure.step(f'member_client создаёт Personal-документ для архивации ({title})'):\n            create_resp = member_client.post(\n                **create_document_endpoint(kind='Member', kind_id=personal_id, space_id=main_space, title=title)\n            )\n    \n            assert create_resp.status_code == 200\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n        with allure.step(f'Архивация Personal-документа в роли {role}, {expected_status} (доступно только создателю доки)'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n            assert archive_resp.status_code == expected_status\n    \n        if expected_status == 403:\n            with allure.step('member_client выполняет финальную архивацию Personal-документа для очистки после теста'):\n                archive = member_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>               assert archive.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:143: AssertionError","steps":[{"name":"member_client создаёт Personal-документ для архивации (14.07_13:50:42 Doc For archive Check)","time":{"start":1752501042248,"stop":1752501042688,"duration":440},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Personal-документа в роли manager, 403 (доступно только создателю доки)","time":{"start":1752501042688,"stop":1752501042976,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client выполняет финальную архивацию Personal-документа для очистки после теста","time":{"start":1752501042976,"stop":1752501043224,"duration":248},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 143, in test_archive_personal_doc\n    assert archive.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":41},"items":[{"uid":"961aeca9a7058719","reportUrl":"https://vaizcom.github.io/autotests/295//#testresult/961aeca9a7058719","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752500656280,"stop":1752500656546,"duration":266}},{"uid":"136f403d884293ad","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/136f403d884293ad","status":"passed","time":{"start":1752499342784,"stop":1752499343850,"duration":1066}},{"uid":"35977fece524d5e2","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/35977fece524d5e2","status":"passed","time":{"start":1752498156688,"stop":1752498157425,"duration":737}},{"uid":"fee95ca74215386d","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/fee95ca74215386d","status":"passed","time":{"start":1752496487469,"stop":1752496488689,"duration":1220}},{"uid":"68049e9550f4a813","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/68049e9550f4a813","status":"passed","time":{"start":1752481633027,"stop":1752481633703,"duration":676}},{"uid":"cdc53cee9160d120","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/cdc53cee9160d120","status":"passed","time":{"start":1752479661253,"stop":1752479662070,"duration":817}},{"uid":"464677d7e0ace98e","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/464677d7e0ace98e","status":"passed","time":{"start":1752477806110,"stop":1752477806910,"duration":800}},{"uid":"696bdaae9f08144","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/696bdaae9f08144","status":"passed","time":{"start":1752236687996,"stop":1752236688860,"duration":864}},{"uid":"3bb432c5ae879334","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/3bb432c5ae879334","status":"passed","time":{"start":1752236063467,"stop":1752236064226,"duration":759}},{"uid":"7649d49820bbf429","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/7649d49820bbf429","status":"passed","time":{"start":1752235255295,"stop":1752235256563,"duration":1268}},{"uid":"fbefc44774cb6c06","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/fbefc44774cb6c06","status":"passed","time":{"start":1752235244184,"stop":1752235245168,"duration":984}},{"uid":"808be3a41cc4a518","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/808be3a41cc4a518","status":"passed","time":{"start":1752234304064,"stop":1752234305552,"duration":1488}},{"uid":"51c0a18ea0a9cba1","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/51c0a18ea0a9cba1","status":"passed","time":{"start":1752234291777,"stop":1752234292696,"duration":919}},{"uid":"6ae010173fa70de0","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/6ae010173fa70de0","status":"passed","time":{"start":1752233467229,"stop":1752233468158,"duration":929}},{"uid":"622df286d2280a24","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/622df286d2280a24","status":"passed","time":{"start":1752232547252,"stop":1752232548037,"duration":785}},{"uid":"b6d7bca990b07112","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/b6d7bca990b07112","status":"passed","time":{"start":1752232078475,"stop":1752232079303,"duration":828}},{"uid":"7cf4788b47afe496","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/7cf4788b47afe496","status":"passed","time":{"start":1752223490877,"stop":1752223491501,"duration":624}},{"uid":"924213256b4182bf","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/924213256b4182bf","status":"passed","time":{"start":1752218253053,"stop":1752218253780,"duration":727}},{"uid":"bb4198b9e4508c84","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/bb4198b9e4508c84","status":"passed","time":{"start":1752151018452,"stop":1752151019534,"duration":1082}},{"uid":"251bef6d7d5c78fc","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/251bef6d7d5c78fc","status":"passed","time":{"start":1752148895194,"stop":1752148895820,"duration":626}}]},"tags":["backend"]},"source":"e8dceaf98cfef3f2.json","parameterValues":["'manager_client'","403"]}