{"uid":"f4b90818bf171d8f","name":"Проверка доступа с некорректным ID документа","fullName":"tests.test_backend.document.access_doc.test_matrix_access_docs#test_access_with_invalid_ids","historyId":"9b2ae822f00d3e78a07948b24f35da14","time":{"start":1761835057088,"stop":1761835057206,"duration":118},"description":"\n    Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n    ","descriptionHtml":"<pre><code>Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0bd86a1810>\ndocument_id = 'valid-document-id', space_id = 'invalid-space-id-456'\nexpected_status = 400, expected_error_code = 'InvalidForm'\n\n    @allure.title('Проверка доступа с некорректным ID документа')\n    @pytest.mark.parametrize(\n        'document_id, space_id, expected_status, expected_error_code',\n        [\n            ('invalid-id-123', 'valid-space-id', 400, 'InvalidForm'),\n            ('valid-document-id', 'invalid-space-id-456', 400, 'InvalidForm'),\n            ('invalid-id-789', 'invalid-space-id', 400, 'InvalidForm'),\n        ],\n        ids=['invalid document_id', 'invalid space_id', 'invalid both'],\n    )\n    def test_access_with_invalid_ids(owner_client, document_id, space_id, expected_status, expected_error_code):\n        \"\"\"\n        Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n        \"\"\"\n        with allure.step(f'Попытка получить доступ к документу {document_id} в пространстве {space_id}'):\n            response = owner_client.post(**get_document_endpoint(document_id=document_id, space_id=space_id))\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status} и ошибка соответствующая'):\n            assert response.status_code == expected_status, f'Ожидался статус {expected_status}, получен {response.status_code}'\n            error = response.json().get('error')\n>           assert error.get(\n                'code') == expected_error_code, f\"Ожидался код ошибки '{expected_error_code}', получен: {error.get('code')}\"\nE           AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nE           assert 'JwtDoesNotExits' == 'InvalidForm'\nE             \nE             - InvalidForm\nE             + JwtDoesNotExits\n\ntests/test_backend/document/access_doc/test_matrix_access_docs.py:119: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761834940330,"stop":1761834940330,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761834940330,"stop":1761834940330,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761834940330,"stop":1761834940330,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761834940330,"stop":1761834940331,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761834940331,"stop":1761834940891,"duration":560},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n    ","status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0bd86a1810>\ndocument_id = 'valid-document-id', space_id = 'invalid-space-id-456'\nexpected_status = 400, expected_error_code = 'InvalidForm'\n\n    @allure.title('Проверка доступа с некорректным ID документа')\n    @pytest.mark.parametrize(\n        'document_id, space_id, expected_status, expected_error_code',\n        [\n            ('invalid-id-123', 'valid-space-id', 400, 'InvalidForm'),\n            ('valid-document-id', 'invalid-space-id-456', 400, 'InvalidForm'),\n            ('invalid-id-789', 'invalid-space-id', 400, 'InvalidForm'),\n        ],\n        ids=['invalid document_id', 'invalid space_id', 'invalid both'],\n    )\n    def test_access_with_invalid_ids(owner_client, document_id, space_id, expected_status, expected_error_code):\n        \"\"\"\n        Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n        \"\"\"\n        with allure.step(f'Попытка получить доступ к документу {document_id} в пространстве {space_id}'):\n            response = owner_client.post(**get_document_endpoint(document_id=document_id, space_id=space_id))\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status} и ошибка соответствующая'):\n            assert response.status_code == expected_status, f'Ожидался статус {expected_status}, получен {response.status_code}'\n            error = response.json().get('error')\n>           assert error.get(\n                'code') == expected_error_code, f\"Ожидался код ошибки '{expected_error_code}', получен: {error.get('code')}\"\nE           AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nE           assert 'JwtDoesNotExits' == 'InvalidForm'\nE             \nE             - InvalidForm\nE             + JwtDoesNotExits\n\ntests/test_backend/document/access_doc/test_matrix_access_docs.py:119: AssertionError","steps":[{"name":"Попытка получить доступ к документу valid-document-id в пространстве invalid-space-id-456","time":{"start":1761835057088,"stop":1761835057205,"duration":117},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что статус ответа = 400 и ошибка соответствующая","time":{"start":1761835057205,"stop":1761835057206,"duration":1},"status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_matrix_access_docs.py\", line 119, in test_access_with_invalid_ids\n    assert error.get(\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_matrix_access_docs"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2554-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_matrix_access_docs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"document_id","value":"'valid-document-id'"},{"name":"expected_error_code","value":"'InvalidForm'"},{"name":"expected_status","value":"400"},{"name":"space_id","value":"'invalid-space-id-456'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":48},"items":[{"uid":"1b748aae0b3849b8","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/1b748aae0b3849b8","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761834641345,"stop":1761834641524,"duration":179}},{"uid":"79095daec0f4e859","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/79095daec0f4e859","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761833477411,"stop":1761833477592,"duration":181}},{"uid":"888d7b47a3ffe0cb","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/888d7b47a3ffe0cb","status":"passed","time":{"start":1761821705662,"stop":1761821705808,"duration":146}},{"uid":"33a789205ac80565","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/33a789205ac80565","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761818765677,"stop":1761818765868,"duration":191}},{"uid":"bd39bcf4aba4fec3","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/bd39bcf4aba4fec3","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761748629744,"stop":1761748629859,"duration":115}},{"uid":"57c99d211020146b","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/57c99d211020146b","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761747904983,"stop":1761747905205,"duration":222}},{"uid":"8a2f1cd1e65396e6","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/8a2f1cd1e65396e6","status":"passed","time":{"start":1761746870500,"stop":1761746870741,"duration":241}},{"uid":"dd75ec4cc25f9f59","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/dd75ec4cc25f9f59","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761745737758,"stop":1761745737876,"duration":118}},{"uid":"6a913ea4a33a97b2","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/6a913ea4a33a97b2","status":"passed","time":{"start":1761576711651,"stop":1761576711816,"duration":165}},{"uid":"7b43850a6f0ac945","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/7b43850a6f0ac945","status":"passed","time":{"start":1761557362149,"stop":1761557362296,"duration":147}},{"uid":"edeef5f378ba5ddc","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/edeef5f378ba5ddc","status":"passed","time":{"start":1761308586274,"stop":1761308586433,"duration":159}},{"uid":"954b8fea339e90b","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/954b8fea339e90b","status":"passed","time":{"start":1761306747743,"stop":1761306747888,"duration":145}},{"uid":"fed0a2f881438698","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/fed0a2f881438698","status":"passed","time":{"start":1761137040717,"stop":1761137040866,"duration":149}},{"uid":"71366ac5729fa60","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/71366ac5729fa60","status":"passed","time":{"start":1761135717772,"stop":1761135717958,"duration":186}},{"uid":"161ffd003fd08d70","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/161ffd003fd08d70","status":"passed","time":{"start":1761134145309,"stop":1761134145450,"duration":141}},{"uid":"4040691ab7e9e12a","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/4040691ab7e9e12a","status":"passed","time":{"start":1761128506117,"stop":1761128506319,"duration":202}},{"uid":"a77a2426e57f8dd2","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/a77a2426e57f8dd2","status":"passed","time":{"start":1761124618550,"stop":1761124618752,"duration":202}},{"uid":"cee714660a006c6a","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/cee714660a006c6a","status":"passed","time":{"start":1761119431208,"stop":1761119431352,"duration":144}},{"uid":"75d4738243fe2466","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/75d4738243fe2466","status":"passed","time":{"start":1761053451891,"stop":1761053452027,"duration":136}},{"uid":"9be2b7d38cbcfb25","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/9be2b7d38cbcfb25","status":"passed","time":{"start":1761047354646,"stop":1761047354795,"duration":149}}]},"tags":["backend"]},"source":"f4b90818bf171d8f.json","parameterValues":["'valid-document-id'","'InvalidForm'","400","'invalid-space-id-456'"]}