{"uid":"62b33f40e37619d4","name":"Попытка удалить несуществующий токен возвращает корректную ошибку (например, 404 Not Found)","fullName":"tests.test_backend.personal_access_tokens.test_delete_pat#test_delete_not_exists_personal_access_token","historyId":"da4e50bbb0a71f89c83b5571736d2a5c","time":{"start":1759744094237,"stop":1759744094427,"duration":190},"status":"failed","statusMessage":"AssertionError: Ожидался статус 404, но был 404: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/DeletePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 400\n +  where 404 = <Response [404]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2109fa9790>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @allure.title(\"Попытка удалить несуществующий токен возвращает корректную ошибку (например, 404 Not Found)\")\n    def test_delete_not_exists_personal_access_token(owner_client, main_space):\n        # Генерируем случайный (несуществующий) ID токена\n        fake_token_id = str(uuid.uuid4())\n    \n        with allure.step(f\"Пробуем удалить несуществующий токен с id {fake_token_id} — ожидаем ошибку\"):\n            del_resp = delete_personal_access_token(owner_client.token, main_space, fake_token_id)\n>           assert del_resp.status_code == 400, (\n                f\"Ожидался статус 404, но был {del_resp.status_code}: {del_resp.text}\"\n            )\nE           AssertionError: Ожидался статус 404, но был 404: <!DOCTYPE html>\nE             <html lang=\"en\">\nE             <head>\nE             <meta charset=\"utf-8\">\nE             <title>Error</title>\nE             </head>\nE             <body>\nE             <pre>Cannot POST /v4/DeletePersonalAccessToken</pre>\nE             </body>\nE             </html>\nE             \nE           assert 404 == 400\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_backend/personal_access_tokens/test_delete_pat.py:78: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759743678061,"stop":1759743678696,"duration":635},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759743678696,"stop":1759743679363,"duration":667},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759743680109,"stop":1759743680673,"duration":564},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ожидался статус 404, но был 404: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/DeletePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 400\n +  where 404 = <Response [404]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2109fa9790>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @allure.title(\"Попытка удалить несуществующий токен возвращает корректную ошибку (например, 404 Not Found)\")\n    def test_delete_not_exists_personal_access_token(owner_client, main_space):\n        # Генерируем случайный (несуществующий) ID токена\n        fake_token_id = str(uuid.uuid4())\n    \n        with allure.step(f\"Пробуем удалить несуществующий токен с id {fake_token_id} — ожидаем ошибку\"):\n            del_resp = delete_personal_access_token(owner_client.token, main_space, fake_token_id)\n>           assert del_resp.status_code == 400, (\n                f\"Ожидался статус 404, но был {del_resp.status_code}: {del_resp.text}\"\n            )\nE           AssertionError: Ожидался статус 404, но был 404: <!DOCTYPE html>\nE             <html lang=\"en\">\nE             <head>\nE             <meta charset=\"utf-8\">\nE             <title>Error</title>\nE             </head>\nE             <body>\nE             <pre>Cannot POST /v4/DeletePersonalAccessToken</pre>\nE             </body>\nE             </html>\nE             \nE           assert 404 == 400\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_backend/personal_access_tokens/test_delete_pat.py:78: AssertionError","steps":[{"name":"Пробуем удалить несуществующий токен с id 539525b0-6656-4cfb-8ecb-33f1bfc3f586 — ожидаем ошибку","time":{"start":1759744094237,"stop":1759744094426,"duration":189},"status":"failed","statusMessage":"AssertionError: Ожидался статус 404, но был 404: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/DeletePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 400\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/personal_access_tokens/test_delete_pat.py\", line 78, in test_delete_not_exists_personal_access_token\n    assert del_resp.status_code == 400, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.personal_access_tokens"},{"name":"suite","value":"test_delete_pat"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2543-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.personal_access_tokens.test_delete_pat"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["backend"]},"source":"62b33f40e37619d4.json","parameterValues":[]}