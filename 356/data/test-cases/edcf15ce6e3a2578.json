{"uid":"edcf15ce6e3a2578","name":"Создание документа в роли owner - с передачей kind=Member и kindId (ожидается 200)","fullName":"tests.test_backend.document.test_create_document#test_document_kind_and_id","historyId":"dd319f47e1dba0f5bb7940a0eabaf986","time":{"start":1759837448959,"stop":1759837449134,"duration":175},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\nrequest = <FixtureRequest for <Function test_document_kind_and_id[member]>>\nkind = 'Member', get_fixture = 'temp_member', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'kind, get_fixture, expected_status',\n        [\n            ('Project', 'temp_project', 200),\n            ('Space', 'temp_space', 200),\n            ('Member', 'temp_member', 200),\n            ('WrongKind', 'temp_project', 400),\n            ('Project', 'nonexistent_id', 400),\n        ],\n        ids=['project', 'space', 'member', 'wrong kind', 'wrong id'],\n    )\n    def test_document_kind_and_id(owner_client, temp_space, request, kind, get_fixture, expected_status):\n        allure.dynamic.title(\n            f'Создание документа в роли owner - с передачей kind={kind} и kindId (ожидается {expected_status})'\n        )\n    \n        kind_id = request.getfixturevalue(get_fixture) if get_fixture != 'nonexistent_id' else 'invalid_id'\n    \n        with allure.step(\n            f'Создание документа Оунером с передачей kind={kind} и kindId={kind_id}  (ожидается {expected_status})'\n        ):\n            response = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Kind Test')\n            )\n    \n        with allure.step('Проверка статус-кода ответа'):\n>           assert response.status_code == expected_status\nE           assert 503 == 200\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_create_document.py:188: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_member","time":{"start":1759837202743,"stop":1759837203578,"duration":835},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\nrequest = <FixtureRequest for <Function test_document_kind_and_id[member]>>\nkind = 'Member', get_fixture = 'temp_member', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'kind, get_fixture, expected_status',\n        [\n            ('Project', 'temp_project', 200),\n            ('Space', 'temp_space', 200),\n            ('Member', 'temp_member', 200),\n            ('WrongKind', 'temp_project', 400),\n            ('Project', 'nonexistent_id', 400),\n        ],\n        ids=['project', 'space', 'member', 'wrong kind', 'wrong id'],\n    )\n    def test_document_kind_and_id(owner_client, temp_space, request, kind, get_fixture, expected_status):\n        allure.dynamic.title(\n            f'Создание документа в роли owner - с передачей kind={kind} и kindId (ожидается {expected_status})'\n        )\n    \n        kind_id = request.getfixturevalue(get_fixture) if get_fixture != 'nonexistent_id' else 'invalid_id'\n    \n        with allure.step(\n            f'Создание документа Оунером с передачей kind={kind} и kindId={kind_id}  (ожидается {expected_status})'\n        ):\n            response = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Kind Test')\n            )\n    \n        with allure.step('Проверка статус-кода ответа'):\n>           assert response.status_code == expected_status\nE           assert 503 == 200\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_create_document.py:188: AssertionError","steps":[{"name":"Создание документа Оунером с передачей kind=Member и kindId=68e4fbe3e49ce50caff67b79  (ожидается 200)","time":{"start":1759837448960,"stop":1759837449134,"duration":174},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статус-кода ответа","time":{"start":1759837449134,"stop":1759837449134,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_create_document.py\", line 188, in test_document_kind_and_id\n    assert response.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_member::0","time":{"start":1759837469358,"stop":1759837469358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_create_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_create_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"200"},{"name":"get_fixture","value":"'temp_member'"},{"name":"kind","value":"'Member'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"eb2203cb094c04d","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/eb2203cb094c04d","status":"passed","time":{"start":1759836249797,"stop":1759836250066,"duration":269}},{"uid":"39e3c2fddefadc43","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/39e3c2fddefadc43","status":"passed","time":{"start":1759835613274,"stop":1759835613538,"duration":264}},{"uid":"25a99a36b3e1e8c9","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/25a99a36b3e1e8c9","status":"passed","time":{"start":1759834721438,"stop":1759834721710,"duration":272}}]},"tags":["backend"]},"source":"edcf15ce6e3a2578.json","parameterValues":["200","'temp_member'","'Member'"]}