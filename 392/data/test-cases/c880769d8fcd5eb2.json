{"uid":"c880769d8fcd5eb2","name":"Редактирование Project-документа: создание manager, редактирование owner","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_project_and_space_docs_different_roles","historyId":"8569ae2fd4e8bdfc5fae71a74f4fcb61","time":{"start":1761745678310,"stop":1761745678876,"duration":566},"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\nмогут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\nдокументы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\nтестирования различных комбинаций ролей создателей и редакторов документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[project_doc-manager_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\neditor_fixture = 'owner_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:98: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761745632604,"stop":1761745632791,"duration":187},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761745633155,"stop":1761745633612,"duration":457},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[project_doc-manager_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\neditor_fixture = 'owner_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:98: AssertionError","steps":[{"name":"Создание Project-документа пользователем с ролью manager","time":{"start":1761745678310,"stop":1761745678535,"duration":225},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью owner","time":{"start":1761745678535,"stop":1761745678662,"duration":127},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 98, in test_edit_project_and_space_docs_different_roles\n    assert edit_response.status_code == expected_status, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1761745678662,"stop":1761745678876,"duration":214},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'manager_client'"},{"name":"doc_container","value":"'main_project'"},{"name":"doc_type","value":"'Project'"},{"name":"editor_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"ea766a3349023f9","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ea766a3349023f9","status":"passed","time":{"start":1761576575858,"stop":1761576577850,"duration":1992}},{"uid":"16c59a7a204258cd","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/16c59a7a204258cd","status":"passed","time":{"start":1761557232348,"stop":1761557234296,"duration":1948}},{"uid":"554b35b20ec2adfb","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/554b35b20ec2adfb","status":"passed","time":{"start":1761308457429,"stop":1761308459110,"duration":1681}},{"uid":"4668be0292fa550a","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/4668be0292fa550a","status":"passed","time":{"start":1761306605394,"stop":1761306607005,"duration":1611}},{"uid":"9d16eacd995dbb72","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/9d16eacd995dbb72","status":"passed","time":{"start":1761136902850,"stop":1761136904600,"duration":1750}},{"uid":"f502e40769789f61","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/f502e40769789f61","status":"passed","time":{"start":1761135564524,"stop":1761135566332,"duration":1808}},{"uid":"f16368843629c0f","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/f16368843629c0f","status":"passed","time":{"start":1761134015193,"stop":1761134016647,"duration":1454}},{"uid":"dda6ed7e27d2f102","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/dda6ed7e27d2f102","status":"passed","time":{"start":1761128336805,"stop":1761128338640,"duration":1835}},{"uid":"f5066d3a5451000c","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/f5066d3a5451000c","status":"passed","time":{"start":1761124445789,"stop":1761124447672,"duration":1883}},{"uid":"51b278ccbf7286ad","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/51b278ccbf7286ad","status":"passed","time":{"start":1761119278926,"stop":1761119280735,"duration":1809}},{"uid":"4e7c4e2b7630c00a","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/4e7c4e2b7630c00a","status":"passed","time":{"start":1761053317585,"stop":1761053319555,"duration":1970}},{"uid":"eedefc8e7602b7d5","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/eedefc8e7602b7d5","status":"passed","time":{"start":1761047208269,"stop":1761047209776,"duration":1507}},{"uid":"f6c5c9eadb4030c1","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/f6c5c9eadb4030c1","status":"passed","time":{"start":1760614621790,"stop":1760614623531,"duration":1741}},{"uid":"9983c62b881c930b","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/9983c62b881c930b","status":"passed","time":{"start":1760599420779,"stop":1760599422696,"duration":1917}},{"uid":"b241beae578e6ffa","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/b241beae578e6ffa","status":"passed","time":{"start":1760535455001,"stop":1760535456508,"duration":1507}},{"uid":"a990cfc943c19efa","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/a990cfc943c19efa","status":"passed","time":{"start":1760533920748,"stop":1760533922965,"duration":2217}},{"uid":"fa5522899f27f293","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/fa5522899f27f293","status":"passed","time":{"start":1760532491194,"stop":1760532492728,"duration":1534}},{"uid":"ee751431bfffd46f","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/ee751431bfffd46f","status":"passed","time":{"start":1760529306363,"stop":1760529307906,"duration":1543}},{"uid":"92982ef31bafeb91","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/92982ef31bafeb91","status":"passed","time":{"start":1760510688195,"stop":1760510689911,"duration":1716}},{"uid":"ee591a79043b2be1","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/ee591a79043b2be1","status":"passed","time":{"start":1760449201107,"stop":1760449202693,"duration":1586}}]},"tags":["backend"]},"source":"c880769d8fcd5eb2.json","parameterValues":["'manager_client'","'main_project'","'Project'","'owner_client'","200"]}