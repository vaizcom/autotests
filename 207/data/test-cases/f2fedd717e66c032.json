{"uid":"f2fedd717e66c032","name":"Получение сиблингов документа (kind=Project)","fullName":"tests.test_backend.document.test_get_siblings#test_get_document_siblings","historyId":"826da16810f726dd89c1144cb1e691f6","time":{"start":1750852374956,"stop":1750852377781,"duration":2825},"status":"failed","statusMessage":"AssertionError: assert {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} is None\n +  where {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} = <built-in method get of dict object at 0x7feecc90c1c0>('prevSibling')\n +    where <built-in method get of dict object at 0x7feecc90c1c0> = {'parents': [], 'prevSibling': {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'tree': [{'document': {'_id': '685be317a2b8f0d475360fba', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fba', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685be317a2b8f0d475360fef', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fef', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685be318a2b8f0d475361077', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361077', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685be318a2b8f0d475361098', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361098', 'lft': 5, 'rgt': 6}]}.get","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7feecc9331d0>\nrequest = <FixtureRequest for <Function test_get_document_siblings[project]>>\ntemp_space = '685be2c9a2b8f0d47535fb1f', kind = 'Project'\nfixture_name = 'temp_project'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_document_siblings(owner_client, request, temp_space, kind, fixture_name):\n        kind_id = request.getfixturevalue(fixture_name)\n        allure.dynamic.title(f'Получение сиблингов документа (kind={kind})')\n    \n        with allure.step('Создание родительского документа'):\n            resp = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Parent')\n            )\n            assert resp.status_code == 200\n            parent_id = resp.json()['payload']['document']['_id']\n    \n        with allure.step('Создание дочерних документов'):\n            titles = ['Child A', 'Child B', 'Child C']\n            indices = [0, 1, 2]\n            child_ids = []\n    \n            for title, index in zip(titles, indices):\n                resp = owner_client.post(\n                    **create_document_endpoint(\n                        kind=kind,\n                        kind_id=kind_id,\n                        space_id=temp_space,\n                        title=title,\n                        parent_document_id=parent_id,\n                        index=index,\n                    )\n                )\n                assert resp.status_code == 200\n                child_ids.append(resp.json()['payload']['document']['_id'])\n    \n        with allure.step('Запрос сиблингов для среднего дочернего документа'):\n            target_id = child_ids[1]\n            resp = owner_client.post(\n                **get_document_siblings_endpoint(document_id=target_id, space_id=temp_space)\n            )\n            assert resp.status_code == 200\n            payload = resp.json()['payload']\n    \n        with allure.step('Проверка корректности сиблингов'):\n            assert payload['prevSibling']['_id'] == child_ids[0]\n            assert payload['nextSibling']['_id'] == child_ids[2]\n            assert payload['parents'][0]['_id'] == parent_id\n            assert any(node['document']['_id'] == target_id for node in payload['tree'])\n    \n        with allure.step('Проверка структуры дерева'):\n            for node in payload['tree']:\n                assert 'document' in node, 'В узле дерева отсутствует поле document'\n    \n        with allure.step('Проверка наличия обязательных полей в document'):\n            required_fields = ['_id', 'title', 'kind', 'kindId']\n            for node in payload['tree']:\n                for field in required_fields:\n                    assert field in node['document'], f'В документе отсутствует поле {field}'\n    \n        with allure.step('Проверка сиблингов родительского документа — их не должно быть'):\n            resp = owner_client.post(\n                **get_document_siblings_endpoint(document_id=parent_id, space_id=temp_space)\n            )\n            assert resp.status_code == 200\n            payload = resp.json()['payload']\n>           assert payload.get('prevSibling') is None\nE           AssertionError: assert {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} is None\nE            +  where {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} = <built-in method get of dict object at 0x7feecc90c1c0>('prevSibling')\nE            +    where <built-in method get of dict object at 0x7feecc90c1c0> = {'parents': [], 'prevSibling': {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'tree': [{'document': {'_id': '685be317a2b8f0d475360fba', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fba', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685be317a2b8f0d475360fef', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fef', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685be318a2b8f0d475361077', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361077', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685be318a2b8f0d475361098', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361098', 'lft': 5, 'rgt': 6}]}.get\n\ntests/test_backend/document/test_get_siblings.py:81: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1750852296452,"stop":1750852296452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1750852296452,"stop":1750852296452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1750852296452,"stop":1750852297051,"duration":599},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1750852296452,"stop":1750852296452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1750852296452,"stop":1750852296452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1750852297051,"stop":1750852297753,"duration":702},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1750852297753,"stop":1750852299748,"duration":1995},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} is None\n +  where {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} = <built-in method get of dict object at 0x7feecc90c1c0>('prevSibling')\n +    where <built-in method get of dict object at 0x7feecc90c1c0> = {'parents': [], 'prevSibling': {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'tree': [{'document': {'_id': '685be317a2b8f0d475360fba', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fba', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685be317a2b8f0d475360fef', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fef', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685be318a2b8f0d475361077', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361077', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685be318a2b8f0d475361098', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361098', 'lft': 5, 'rgt': 6}]}.get","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7feecc9331d0>\nrequest = <FixtureRequest for <Function test_get_document_siblings[project]>>\ntemp_space = '685be2c9a2b8f0d47535fb1f', kind = 'Project'\nfixture_name = 'temp_project'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_document_siblings(owner_client, request, temp_space, kind, fixture_name):\n        kind_id = request.getfixturevalue(fixture_name)\n        allure.dynamic.title(f'Получение сиблингов документа (kind={kind})')\n    \n        with allure.step('Создание родительского документа'):\n            resp = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Parent')\n            )\n            assert resp.status_code == 200\n            parent_id = resp.json()['payload']['document']['_id']\n    \n        with allure.step('Создание дочерних документов'):\n            titles = ['Child A', 'Child B', 'Child C']\n            indices = [0, 1, 2]\n            child_ids = []\n    \n            for title, index in zip(titles, indices):\n                resp = owner_client.post(\n                    **create_document_endpoint(\n                        kind=kind,\n                        kind_id=kind_id,\n                        space_id=temp_space,\n                        title=title,\n                        parent_document_id=parent_id,\n                        index=index,\n                    )\n                )\n                assert resp.status_code == 200\n                child_ids.append(resp.json()['payload']['document']['_id'])\n    \n        with allure.step('Запрос сиблингов для среднего дочернего документа'):\n            target_id = child_ids[1]\n            resp = owner_client.post(\n                **get_document_siblings_endpoint(document_id=target_id, space_id=temp_space)\n            )\n            assert resp.status_code == 200\n            payload = resp.json()['payload']\n    \n        with allure.step('Проверка корректности сиблингов'):\n            assert payload['prevSibling']['_id'] == child_ids[0]\n            assert payload['nextSibling']['_id'] == child_ids[2]\n            assert payload['parents'][0]['_id'] == parent_id\n            assert any(node['document']['_id'] == target_id for node in payload['tree'])\n    \n        with allure.step('Проверка структуры дерева'):\n            for node in payload['tree']:\n                assert 'document' in node, 'В узле дерева отсутствует поле document'\n    \n        with allure.step('Проверка наличия обязательных полей в document'):\n            required_fields = ['_id', 'title', 'kind', 'kindId']\n            for node in payload['tree']:\n                for field in required_fields:\n                    assert field in node['document'], f'В документе отсутствует поле {field}'\n    \n        with allure.step('Проверка сиблингов родительского документа — их не должно быть'):\n            resp = owner_client.post(\n                **get_document_siblings_endpoint(document_id=parent_id, space_id=temp_space)\n            )\n            assert resp.status_code == 200\n            payload = resp.json()['payload']\n>           assert payload.get('prevSibling') is None\nE           AssertionError: assert {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} is None\nE            +  where {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} = <built-in method get of dict object at 0x7feecc90c1c0>('prevSibling')\nE            +    where <built-in method get of dict object at 0x7feecc90c1c0> = {'parents': [], 'prevSibling': {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'tree': [{'document': {'_id': '685be317a2b8f0d475360fba', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fba', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685be317a2b8f0d475360fef', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fef', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685be318a2b8f0d475361077', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361077', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685be318a2b8f0d475361098', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361098', 'lft': 5, 'rgt': 6}]}.get\n\ntests/test_backend/document/test_get_siblings.py:81: AssertionError","steps":[{"name":"Создание родительского документа","time":{"start":1750852374956,"stop":1750852375266,"duration":310},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание дочерних документов","time":{"start":1750852375266,"stop":1750852377057,"duration":1791},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Запрос сиблингов для среднего дочернего документа","time":{"start":1750852377057,"stop":1750852377484,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка корректности сиблингов","time":{"start":1750852377485,"stop":1750852377485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка структуры дерева","time":{"start":1750852377485,"stop":1750852377485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка наличия обязательных полей в document","time":{"start":1750852377485,"stop":1750852377485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка сиблингов родительского документа — их не должно быть","time":{"start":1750852377485,"stop":1750852377781,"duration":296},"status":"failed","statusMessage":"AssertionError: assert {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} is None\n +  where {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...} = <built-in method get of dict object at 0x7feecc90c1c0>('prevSibling')\n +    where <built-in method get of dict object at 0x7feecc90c1c0> = {'parents': [], 'prevSibling': {'_id': '685be30ca2b8f0d475360ed1', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'tree': [{'document': {'_id': '685be317a2b8f0d475360fba', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fba', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685be317a2b8f0d475360fef', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be317a2b8f0d475360fef', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685be318a2b8f0d475361077', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361077', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685be318a2b8f0d475361098', 'kind': 'Project', 'kindId': '685be2cba2b8f0d47535fbb4', 'map': [], ...}, 'id': '685be318a2b8f0d475361098', 'lft': 5, 'rgt': 6}]}.get\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_siblings.py\", line 81, in test_get_document_siblings\n    assert payload.get('prevSibling') is None\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1750852395460,"stop":1750852396213,"duration":753},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project::0","time":{"start":1750852395460,"stop":1750852395460,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_siblings"},{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"2618-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_siblings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"fixture_name","value":"'temp_project'"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"3dd57f31029245c8","reportUrl":"https://vaizcom.github.io/autotests/206//#testresult/3dd57f31029245c8","status":"passed","time":{"start":1750773504065,"stop":1750773507269,"duration":3204}}]},"tags":["backend"]},"source":"f2fedd717e66c032.json","parameterValues":["'temp_project'","'Project'"]}