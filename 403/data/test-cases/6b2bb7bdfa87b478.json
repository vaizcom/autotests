{"uid":"6b2bb7bdfa87b478","name":"Дублирование Space-документа: создание member, дублирование owner","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_project_and_space_docs_different_roles","historyId":"fc7617274bba4ad034e512e3f98855bf","time":{"start":1761911200304,"stop":1761911201001,"duration":697},"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","descriptionHtml":"<pre><code>Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\nсозданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-member_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\nduplicator_fixture = 'owner_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа второй ролью\n            with allure.step(f'Дублирование документа пользователем с ролью {duplicator_role}'):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:109: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761911162887,"stop":1761911162887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761911162888,"stop":1761911163517,"duration":629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761911166774,"stop":1761911167100,"duration":326},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761911167101,"stop":1761911167366,"duration":265},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761911169328,"stop":1761911169626,"duration":298},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-member_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\nduplicator_fixture = 'owner_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа второй ролью\n            with allure.step(f'Дублирование документа пользователем с ролью {duplicator_role}'):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:109: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью member","time":{"start":1761911200304,"stop":1761911200561,"duration":257},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Дублирование документа пользователем с ролью owner","time":{"start":1761911200561,"stop":1761911200752,"duration":191},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 109, in test_duplicate_project_and_space_docs_different_roles\n    assert duplicate_response.status_code == expected_status, (\n","steps":[],"attachments":[{"uid":"54b06d6d014a7511","name":"Response Body","source":"54b06d6d014a7511.json","type":"application/json","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Архивация исходного документа","time":{"start":1761911200752,"stop":1761911201000,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2557-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'member_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"duplicator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":53},"items":[{"uid":"d9aa73c2b2b43070","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/d9aa73c2b2b43070","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910825958,"stop":1761910826534,"duration":576}},{"uid":"27c6db741a3142ce","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/27c6db741a3142ce","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910528464,"stop":1761910528963,"duration":499}},{"uid":"77f2daa6a6404453","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/77f2daa6a6404453","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909896211,"stop":1761909896926,"duration":715}},{"uid":"36eb8631c30b01b1","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/36eb8631c30b01b1","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899929701,"stop":1761899930415,"duration":714}},{"uid":"992e2a983a4241c1","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/992e2a983a4241c1","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834973463,"stop":1761834973982,"duration":519}},{"uid":"8c1be787e78b1066","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/8c1be787e78b1066","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834529214,"stop":1761834529966,"duration":752}},{"uid":"4dde2728900e37e7","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/4dde2728900e37e7","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833359454,"stop":1761833360234,"duration":780}},{"uid":"b76ae5180c793fc3","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/b76ae5180c793fc3","status":"passed","time":{"start":1761821544968,"stop":1761821545960,"duration":992}},{"uid":"1e94aea98656f044","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/1e94aea98656f044","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818663019,"stop":1761818663692,"duration":673}},{"uid":"32c5e53f7be99172","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/32c5e53f7be99172","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748536637,"stop":1761748537501,"duration":864}},{"uid":"f2f58913e2da114e","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/f2f58913e2da114e","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747799981,"stop":1761747800695,"duration":714}},{"uid":"9aae63682cec42c","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/9aae63682cec42c","status":"passed","time":{"start":1761746670634,"stop":1761746671837,"duration":1203}},{"uid":"7ad5932f53ff2fea","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/7ad5932f53ff2fea","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745659215,"stop":1761745659756,"duration":541}},{"uid":"9400be592906af33","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/9400be592906af33","status":"passed","time":{"start":1761576538904,"stop":1761576540009,"duration":1105}},{"uid":"f93e419800df70e7","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/f93e419800df70e7","status":"passed","time":{"start":1761557195261,"stop":1761557196777,"duration":1516}},{"uid":"b75d5a000751603","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/b75d5a000751603","status":"passed","time":{"start":1761308420973,"stop":1761308421884,"duration":911}},{"uid":"8c4fdf73478907d4","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/8c4fdf73478907d4","status":"passed","time":{"start":1761306567718,"stop":1761306568688,"duration":970}},{"uid":"58b86ca9c6fb898c","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/58b86ca9c6fb898c","status":"passed","time":{"start":1761136863819,"stop":1761136864923,"duration":1104}},{"uid":"6028c038776ba86c","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/6028c038776ba86c","status":"passed","time":{"start":1761135521514,"stop":1761135522607,"duration":1093}},{"uid":"db69d07d75b82f3","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/db69d07d75b82f3","status":"passed","time":{"start":1761133978444,"stop":1761133979388,"duration":944}}]},"tags":["backend"]},"source":"6b2bb7bdfa87b478.json","parameterValues":["'member_client'","'main_space'","'Space'","'owner_client'","200"]}