{"uid":"dbc838b98faafdc1","name":"Архивирование Project-документа для роли manager","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"095f967bb8ed7e1afafe0b879db5dfa8","time":{"start":1752501036844,"stop":1752501037254,"duration":410},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:94: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500916493,"stop":1752500917294,"duration":801},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500917294,"stop":1752500918389,"duration":1095},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752500918390,"stop":1752500918918,"duration":528},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1752500918918,"stop":1752500919269,"duration":351},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752500924480,"stop":1752500924955,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:94: AssertionError","steps":[{"name":"Случайный клиент (owner_client) создаёт Project-документ для архивации (title: 14.07_13:50:36 Project Doc For archive Check)","time":{"start":1752501036844,"stop":1752501037253,"duration":409},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 94, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки архивирования","time":{"start":1752501037253,"stop":1752501037253,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 94, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"35fc0d762f093ce7","reportUrl":"https://vaizcom.github.io/autotests/295//#testresult/35fc0d762f093ce7","status":"passed","time":{"start":1752500646770,"stop":1752500650164,"duration":3394}},{"uid":"d0e56b3b319441ee","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/d0e56b3b319441ee","status":"passed","time":{"start":1752499334039,"stop":1752499336209,"duration":2170}},{"uid":"7e9f78675343f6bc","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/7e9f78675343f6bc","status":"passed","time":{"start":1752498153099,"stop":1752498153963,"duration":864}},{"uid":"eb0cff84e60e022c","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/eb0cff84e60e022c","status":"passed","time":{"start":1752496484098,"stop":1752496484754,"duration":656}},{"uid":"307fbf27f80dfc2d","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/307fbf27f80dfc2d","status":"passed","time":{"start":1752481628604,"stop":1752481629275,"duration":671}},{"uid":"675b6c9d9c46a259","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/675b6c9d9c46a259","status":"passed","time":{"start":1752479657868,"stop":1752479658686,"duration":818}},{"uid":"9fef49b9ac0f4033","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/9fef49b9ac0f4033","status":"passed","time":{"start":1752477802430,"stop":1752477803284,"duration":854}},{"uid":"4a69b5d631aed99c","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/4a69b5d631aed99c","status":"passed","time":{"start":1752236683967,"stop":1752236684596,"duration":629}},{"uid":"f30cfe3197ac54d9","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/f30cfe3197ac54d9","status":"passed","time":{"start":1752236059735,"stop":1752236060560,"duration":825}},{"uid":"c0f8070b6e19be76","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/c0f8070b6e19be76","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1752235251085,"stop":1752235251943,"duration":858}},{"uid":"ae5f5b6b37e269c0","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/ae5f5b6b37e269c0","status":"passed","time":{"start":1752235239721,"stop":1752235240754,"duration":1033}},{"uid":"8e86b6274d8934ec","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/8e86b6274d8934ec","status":"passed","time":{"start":1752234297676,"stop":1752234298749,"duration":1073}},{"uid":"ef0bca1466c9c524","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/ef0bca1466c9c524","status":"passed","time":{"start":1752234287951,"stop":1752234288873,"duration":922}},{"uid":"f300ef962b0f36a8","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/f300ef962b0f36a8","status":"passed","time":{"start":1752233462331,"stop":1752233463275,"duration":944}},{"uid":"1a85fcecdd271164","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/1a85fcecdd271164","status":"passed","time":{"start":1752232543735,"stop":1752232544558,"duration":823}},{"uid":"ffa74ce35372e323","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/ffa74ce35372e323","status":"passed","time":{"start":1752232074809,"stop":1752232075722,"duration":913}},{"uid":"952978dd0c230c8d","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/952978dd0c230c8d","status":"passed","time":{"start":1752223487828,"stop":1752223488457,"duration":629}},{"uid":"e259f3a6a3dbefb9","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/e259f3a6a3dbefb9","status":"passed","time":{"start":1752218249360,"stop":1752218250089,"duration":729}},{"uid":"6cee6b7ea38b093c","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/6cee6b7ea38b093c","status":"passed","time":{"start":1752151014551,"stop":1752151015162,"duration":611}},{"uid":"497c17d442d4de23","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/497c17d442d4de23","status":"passed","time":{"start":1752148892440,"stop":1752148892965,"duration":525}}]},"tags":["backend"]},"source":"dbc838b98faafdc1.json","parameterValues":["'manager_client'","200"]}