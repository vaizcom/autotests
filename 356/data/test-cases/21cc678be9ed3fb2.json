{"uid":"21cc678be9ed3fb2","name":"Негативные сценарии: некорректный documentId. id=","fullName":"tests.test_backend.document.test_edit_document#test_edit_document_invalid_id","historyId":"6ce0765815d25347d71cae2354e4f6a4","time":{"start":1759837452809,"stop":1759837452984,"duration":175},"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74', fake_id = '', expected_status = 400\n\n    @pytest.mark.parametrize(\n        'fake_id, expected_status',\n        [\n            ('000000000000000000000000', 400),\n            ('', 400),\n            (None, 400),\n            ('bad_format', 400),\n        ],\n        ids=['not_found', 'empty', 'null', 'bad_format'],\n    )\n    def test_edit_document_invalid_id(owner_client, temp_space, fake_id, expected_status):\n        allure.dynamic.title(f'Негативные сценарии: некорректный documentId. id={fake_id}')\n        with allure.step('Attempt edit with invalid id'):\n            resp = owner_client.post(\n                **edit_document_endpoint(\n                    document_id=fake_id,\n                    title='X',\n                    icon='Y',\n                    space_id=temp_space,\n                )\n            )\n>           assert resp.status_code == expected_status\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_edit_document.py:67: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74', fake_id = '', expected_status = 400\n\n    @pytest.mark.parametrize(\n        'fake_id, expected_status',\n        [\n            ('000000000000000000000000', 400),\n            ('', 400),\n            (None, 400),\n            ('bad_format', 400),\n        ],\n        ids=['not_found', 'empty', 'null', 'bad_format'],\n    )\n    def test_edit_document_invalid_id(owner_client, temp_space, fake_id, expected_status):\n        allure.dynamic.title(f'Негативные сценарии: некорректный documentId. id={fake_id}')\n        with allure.step('Attempt edit with invalid id'):\n            resp = owner_client.post(\n                **edit_document_endpoint(\n                    document_id=fake_id,\n                    title='X',\n                    icon='Y',\n                    space_id=temp_space,\n                )\n            )\n>           assert resp.status_code == expected_status\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_edit_document.py:67: AssertionError","steps":[{"name":"Attempt edit with invalid id","time":{"start":1759837452809,"stop":1759837452984,"duration":175},"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_edit_document.py\", line 67, in test_edit_document_invalid_id\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_edit_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_edit_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"400"},{"name":"fake_id","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"8af6efcaebcdb2ff","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/8af6efcaebcdb2ff","status":"passed","time":{"start":1759836271968,"stop":1759836272176,"duration":208}},{"uid":"7e03c4327178d964","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/7e03c4327178d964","status":"passed","time":{"start":1759835628752,"stop":1759835629335,"duration":583}},{"uid":"7e773d9562f85933","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/7e773d9562f85933","status":"passed","time":{"start":1759834740060,"stop":1759834740337,"duration":277}}]},"tags":["backend"]},"source":"21cc678be9ed3fb2.json","parameterValues":["400","''"]}