{"uid":"a4f21de44c26c0ba","name":"Редактирование Project-документа: создание member, редактирование member","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_project_and_space_docs_different_roles","historyId":"921f6be418dbb0e514db7c9fe29dbe86","time":{"start":1761910851447,"stop":1761910852242,"duration":795},"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\nмогут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\nдокументы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\nтестирования различных комбинаций ролей создателей и редакторов документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[project_doc-member_self_edit]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\neditor_fixture = 'member_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n                assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\n    \n                if expected_status == 200:\n                    with allure.step('Проверка видимости изменений документа для всех ролей'):\n                        # Собираем всех клиентов, которые должны видеть документ\n                        with allure.step('Получение клиентов для проверки'):\n                            clients_to_check = {\n                                'owner': request.getfixturevalue('owner_client'),\n                                'manager': request.getfixturevalue('manager_client'),\n                                'member': request.getfixturevalue('member_client'),\n                                'guest': request.getfixturevalue('guest_client'),\n                            }\n    \n                        # Проверяем видимость изменений для каждого клиента\n                        for role, client in clients_to_check.items():\n                            with allure.step(f'Проверка для роли {role}'):\n                                with allure.step(f'Запрос документа от имени {role}'):\n                                    get_response = client.post(\n                                        **get_document_endpoint(document_id=doc_id, space_id=main_space)\n                                    )\n    \n                                with allure.step(f'Проверка статуса ответа для {role}'):\n>                                   assert get_response.status_code == 200, (\n                                        f'Ошибка при получении документа для роли {role}: '\n                                        f'статус {get_response.status_code}'\n                                    )\nE                                   AssertionError: Ошибка при получении документа для роли owner: статус 400\nE                                   assert 400 == 200\nE                                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:122: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761910792963,"stop":1761910793391,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761910796070,"stop":1761910796305,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761910796305,"stop":1761910796513,"duration":208},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761910796513,"stop":1761910796697,"duration":184},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761910797039,"stop":1761910797471,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761910797905,"stop":1761910798334,"duration":429},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761910798533,"stop":1761910799548,"duration":1015},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[project_doc-member_self_edit]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\neditor_fixture = 'member_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n                assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\n    \n                if expected_status == 200:\n                    with allure.step('Проверка видимости изменений документа для всех ролей'):\n                        # Собираем всех клиентов, которые должны видеть документ\n                        with allure.step('Получение клиентов для проверки'):\n                            clients_to_check = {\n                                'owner': request.getfixturevalue('owner_client'),\n                                'manager': request.getfixturevalue('manager_client'),\n                                'member': request.getfixturevalue('member_client'),\n                                'guest': request.getfixturevalue('guest_client'),\n                            }\n    \n                        # Проверяем видимость изменений для каждого клиента\n                        for role, client in clients_to_check.items():\n                            with allure.step(f'Проверка для роли {role}'):\n                                with allure.step(f'Запрос документа от имени {role}'):\n                                    get_response = client.post(\n                                        **get_document_endpoint(document_id=doc_id, space_id=main_space)\n                                    )\n    \n                                with allure.step(f'Проверка статуса ответа для {role}'):\n>                                   assert get_response.status_code == 200, (\n                                        f'Ошибка при получении документа для роли {role}: '\n                                        f'статус {get_response.status_code}'\n                                    )\nE                                   AssertionError: Ошибка при получении документа для роли owner: статус 400\nE                                   assert 400 == 200\nE                                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:122: AssertionError","steps":[{"name":"Создание Project-документа пользователем с ролью member","time":{"start":1761910851447,"stop":1761910851688,"duration":241},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью member","time":{"start":1761910851688,"stop":1761910852023,"duration":335},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Проверка видимости изменений документа для всех ролей","time":{"start":1761910851908,"stop":1761910852023,"duration":115},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Получение клиентов для проверки","time":{"start":1761910851908,"stop":1761910851908,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка для роли owner","time":{"start":1761910851908,"stop":1761910852023,"duration":115},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Запрос документа от имени owner","time":{"start":1761910851908,"stop":1761910852022,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статуса ответа для owner","time":{"start":1761910852022,"stop":1761910852023,"duration":1},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":5,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1761910852023,"stop":1761910852242,"duration":219},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2545-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'member_client'"},{"name":"doc_container","value":"'main_project'"},{"name":"doc_type","value":"'Project'"},{"name":"editor_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":52},"items":[{"uid":"6bb4f74164b4e052","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/6bb4f74164b4e052","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910552654,"stop":1761910553417,"duration":763}},{"uid":"8ca8744d34b2e143","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/8ca8744d34b2e143","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909929500,"stop":1761909930462,"duration":962}},{"uid":"b612233339867c70","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/b612233339867c70","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899960314,"stop":1761899961345,"duration":1031}},{"uid":"d1ae49ca4f260062","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/d1ae49ca4f260062","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834997605,"stop":1761834998397,"duration":792}},{"uid":"bb0461cad772b4c4","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/bb0461cad772b4c4","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834561624,"stop":1761834562646,"duration":1022}},{"uid":"d108f57c3a69512","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/d108f57c3a69512","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833394292,"stop":1761833395338,"duration":1046}},{"uid":"173b7380ad67b9a2","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/173b7380ad67b9a2","status":"passed","time":{"start":1761821588456,"stop":1761821589751,"duration":1295}},{"uid":"dae1f0695cb4c1ea","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/dae1f0695cb4c1ea","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818692622,"stop":1761818693530,"duration":908}},{"uid":"14806fd411022499","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/14806fd411022499","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748563260,"stop":1761748564172,"duration":912}},{"uid":"ce860276b47d83e6","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ce860276b47d83e6","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747830576,"stop":1761747831589,"duration":1013}},{"uid":"8e81a124d316ba01","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/8e81a124d316ba01","status":"passed","time":{"start":1761746725756,"stop":1761746727363,"duration":1607}},{"uid":"fc1fa80bcdad639c","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/fc1fa80bcdad639c","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745682704,"stop":1761745683507,"duration":803}},{"uid":"ffe17b8467ecd6a","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ffe17b8467ecd6a","status":"passed","time":{"start":1761576584194,"stop":1761576585645,"duration":1451}},{"uid":"f40002dd627294d6","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/f40002dd627294d6","status":"passed","time":{"start":1761557240927,"stop":1761557242386,"duration":1459}},{"uid":"2e93557b7cfd498","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/2e93557b7cfd498","status":"passed","time":{"start":1761308466143,"stop":1761308467799,"duration":1656}},{"uid":"981c5632e592f27f","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/981c5632e592f27f","status":"passed","time":{"start":1761306614313,"stop":1761306615895,"duration":1582}},{"uid":"e3d9dbd46f4d2239","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/e3d9dbd46f4d2239","status":"passed","time":{"start":1761136911532,"stop":1761136913458,"duration":1926}},{"uid":"efc4e5d947354bff","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/efc4e5d947354bff","status":"passed","time":{"start":1761135574055,"stop":1761135575713,"duration":1658}},{"uid":"80bc709181319cc","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/80bc709181319cc","status":"passed","time":{"start":1761134023332,"stop":1761134024904,"duration":1572}},{"uid":"55cb743d52c7ec2b","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/55cb743d52c7ec2b","status":"passed","time":{"start":1761128347145,"stop":1761128349670,"duration":2525}}]},"tags":["backend"]},"source":"a4f21de44c26c0ba.json","parameterValues":["'member_client'","'main_project'","'Project'","'member_client'","200"]}