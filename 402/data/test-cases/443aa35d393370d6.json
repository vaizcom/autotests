{"uid":"443aa35d393370d6","name":"Тестирование создания подзадачи разными пользовательскими ролями: клиент=member_client, ожидаемый статус=200","fullName":"tests.test_backend.task_service.create_task.access_task.test_create_sub#test_create_subtask_per_role","historyId":"c232f1a447b2f6a1cc6cba4d0162e535","time":{"start":1761910918495,"stop":1761910918609,"duration":114},"description":"\n    Тестирование создания подзадачи разными пользовательскими ролями и проверка\n    ожидаемого поведения на основе прав доступа роли.\n\n    Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n    подзадачу для родительской задачи. Также проверяются корректные связи между\n    родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n\n    ","descriptionHtml":"<pre><code>Тестирование создания подзадачи разными пользовательскими ролями и проверка\nожидаемого поведения на основе прав доступа роли.\n\nЭтот тест оценивает может ли клиент с разными уровнями доступа создавать\nподзадачу для родительской задачи. Также проверяются корректные связи между\nродительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n</code></pre>\n","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f1c6962ef90>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7f1c675a4180>\nclient_fixture = 'member_client', expected_status = 200\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания подзадачи разными пользовательскими ролями и проверка ожидаемого поведения\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_subtask_per_role(\n        owner_client, main_space, main_board, create_task_in_main, client_fixture, expected_status\n    ):\n        \"\"\"\n        Тестирование создания подзадачи разными пользовательскими ролями и проверка\n        ожидаемого поведения на основе прав доступа роли.\n    \n        Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n        подзадачу для родительской задачи. Также проверяются корректные связи между\n        родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n    \n        \"\"\"\n        allure.dynamic.title(\n            f\"Тестирование создания подзадачи разными пользовательскими ролями: клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n        parent_id = subtask_id = None\n    \n        try:\n            with allure.step(\"Создание родительской задачи через owner_client\"):\n>               parent_task = create_task_in_main(\n                    \"owner_client\",\n                    name=\"Main create_task for subtask access test\"\n                )\n\ntests/test_backend/task_service/create_task/access_task/test_create_sub.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/conftest.py:32: in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\ntests/test_backend/task_service/create_task/utils.py:52: in get_random_type_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n\n/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761910792963,"stop":1761910793391,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761910796070,"stop":1761910796305,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761910796305,"stop":1761910796513,"duration":208},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761910796513,"stop":1761910796697,"duration":184},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1761910799743,"stop":1761910800266,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_task_in_main","time":{"start":1761910918495,"stop":1761910918495,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тестирование создания подзадачи разными пользовательскими ролями и проверка\n    ожидаемого поведения на основе прав доступа роли.\n\n    Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n    подзадачу для родительской задачи. Также проверяются корректные связи между\n    родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n\n    ","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f1c6962ef90>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7f1c675a4180>\nclient_fixture = 'member_client', expected_status = 200\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания подзадачи разными пользовательскими ролями и проверка ожидаемого поведения\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_subtask_per_role(\n        owner_client, main_space, main_board, create_task_in_main, client_fixture, expected_status\n    ):\n        \"\"\"\n        Тестирование создания подзадачи разными пользовательскими ролями и проверка\n        ожидаемого поведения на основе прав доступа роли.\n    \n        Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n        подзадачу для родительской задачи. Также проверяются корректные связи между\n        родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n    \n        \"\"\"\n        allure.dynamic.title(\n            f\"Тестирование создания подзадачи разными пользовательскими ролями: клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n        parent_id = subtask_id = None\n    \n        try:\n            with allure.step(\"Создание родительской задачи через owner_client\"):\n>               parent_task = create_task_in_main(\n                    \"owner_client\",\n                    name=\"Main create_task for subtask access test\"\n                )\n\ntests/test_backend/task_service/create_task/access_task/test_create_sub.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/conftest.py:32: in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\ntests/test_backend/task_service/create_task/utils.py:52: in get_random_type_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n\n/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","steps":[{"name":"Создание родительской задачи через owner_client","time":{"start":1761910918495,"stop":1761910918608,"duration":113},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/access_task/test_create_sub.py\", line 42, in test_create_subtask_per_role\n    parent_task = create_task_in_main(\n                  ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/conftest.py\", line 32, in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\n                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/utils.py\", line 52, in get_random_type_id\n    response.raise_for_status()\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"access_task"},{"name":"tag","value":"backend"},{"name":"suite","value":"test_create_sub"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2545-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task_service.create_task.access_task.test_create_sub"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":11,"skipped":0,"passed":9,"unknown":0,"total":20},"items":[{"uid":"26a7ce6284694121","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/26a7ce6284694121","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761910620248,"stop":1761910620366,"duration":118}},{"uid":"65149df2f372de2c","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/65149df2f372de2c","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761910013938,"stop":1761910014115,"duration":177}},{"uid":"87dfcd4363b218e0","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/87dfcd4363b218e0","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/GetBoard","time":{"start":1761900045437,"stop":1761900045611,"duration":174}},{"uid":"885015de0bca574f","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/885015de0bca574f","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard","time":{"start":1761835063889,"stop":1761835064011,"duration":122}},{"uid":"140116326d96c022","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/140116326d96c022","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/GetBoard","time":{"start":1761834651064,"stop":1761834651251,"duration":187}},{"uid":"8aec03ae765096a9","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/8aec03ae765096a9","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761833486964,"stop":1761833487154,"duration":190}},{"uid":"ae8c82783baa7858","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/ae8c82783baa7858","status":"passed","time":{"start":1761821835945,"stop":1761821838455,"duration":2510}},{"uid":"3fec564f53eb4827","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/3fec564f53eb4827","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761818774764,"stop":1761818774935,"duration":171}},{"uid":"b28197021965e0a2","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/b28197021965e0a2","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761748637623,"stop":1761748637747,"duration":124}},{"uid":"7f0e3fab7e07df24","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/7f0e3fab7e07df24","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761747915054,"stop":1761747915240,"duration":186}},{"uid":"ea07326b233f0c7a","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ea07326b233f0c7a","status":"passed","time":{"start":1761747051320,"stop":1761747054481,"duration":3161}},{"uid":"51a77c7d8331756c","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/51a77c7d8331756c","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761745744995,"stop":1761745745117,"duration":122}},{"uid":"7e7c66afac631f70","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/7e7c66afac631f70","status":"passed","time":{"start":1761576870046,"stop":1761576873340,"duration":3294}},{"uid":"204622f4e37bde32","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/204622f4e37bde32","status":"passed","time":{"start":1761557487124,"stop":1761557489582,"duration":2458}},{"uid":"270de73581bb22c","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/270de73581bb22c","status":"passed","time":{"start":1761308706213,"stop":1761308709050,"duration":2837}},{"uid":"792a3f23b8401a69","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/792a3f23b8401a69","status":"passed","time":{"start":1761306872247,"stop":1761306874758,"duration":2511}},{"uid":"b9eab54a800e239d","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/b9eab54a800e239d","status":"passed","time":{"start":1761137172613,"stop":1761137175209,"duration":2596}},{"uid":"f5ccd52270fafaef","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/f5ccd52270fafaef","status":"passed","time":{"start":1761135872336,"stop":1761135875382,"duration":3046}},{"uid":"8cebf2b3a7bed33d","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/8cebf2b3a7bed33d","status":"passed","time":{"start":1761134278433,"stop":1761134281186,"duration":2753}}]},"tags":["backend"]},"source":"443aa35d393370d6.json","parameterValues":["'member_client'","200"]}