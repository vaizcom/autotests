{"uid":"5241b71bbf76ed69","name":"Архивирование Project-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"40ffb62620ea30d2684cda2caee27ab6","time":{"start":1761745638348,"stop":1761745638721,"duration":373},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n                    assert expected_status == 403\n                return\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n    \n        with allure.step(f'Архивация Project-документа в роли {role} (ожидается статус {expected_status})'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>           assert archive_resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:119: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761745632604,"stop":1761745632791,"duration":187},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761745633155,"stop":1761745633612,"duration":457},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n                    assert expected_status == 403\n                return\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n    \n        with allure.step(f'Архивация Project-документа в роли {role} (ожидается статус {expected_status})'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>           assert archive_resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:119: AssertionError","steps":[{"name":"Случайный клиент (manager_client) создаёт Project-документ для архивации (title: 29.10_13:47:18 Project Doc For archive Check)","time":{"start":1761745638348,"stop":1761745638597,"duration":249},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Project-документа в роли owner (ожидается статус 200)","time":{"start":1761745638597,"stop":1761745638720,"duration":123},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 119, in test_archive_project_doc\n    assert archive_resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"e6a526d63f699b78","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/e6a526d63f699b78","status":"passed","time":{"start":1761576503647,"stop":1761576504365,"duration":718}},{"uid":"e5ff180a989c5eb4","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/e5ff180a989c5eb4","status":"passed","time":{"start":1761557159948,"stop":1761557160917,"duration":969}},{"uid":"ec41851708bffd74","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/ec41851708bffd74","status":"passed","time":{"start":1761308384785,"stop":1761308385588,"duration":803}},{"uid":"871e3bad123c4354","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/871e3bad123c4354","status":"passed","time":{"start":1761306532143,"stop":1761306532859,"duration":716}},{"uid":"60aa931daf4d4246","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/60aa931daf4d4246","status":"passed","time":{"start":1761136827123,"stop":1761136827886,"duration":763}},{"uid":"661ff4172e33ee74","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/661ff4172e33ee74","status":"passed","time":{"start":1761135480992,"stop":1761135481914,"duration":922}},{"uid":"e6c6d1cf9a6ab931","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/e6c6d1cf9a6ab931","status":"passed","time":{"start":1761133943929,"stop":1761133944665,"duration":736}},{"uid":"8f044b725a3f0ac","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/8f044b725a3f0ac","status":"passed","time":{"start":1761128245533,"stop":1761128247122,"duration":1589}},{"uid":"29c24c507979f822","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/29c24c507979f822","status":"passed","time":{"start":1761124352108,"stop":1761124353291,"duration":1183}},{"uid":"ccc52e0ab8e68675","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/ccc52e0ab8e68675","status":"passed","time":{"start":1761119201261,"stop":1761119202017,"duration":756}},{"uid":"93d07787b936ae72","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/93d07787b936ae72","status":"passed","time":{"start":1761053243788,"stop":1761053244605,"duration":817}},{"uid":"21735be042095c7a","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/21735be042095c7a","status":"passed","time":{"start":1761047132123,"stop":1761047133293,"duration":1170}},{"uid":"f6d0eec7e65d71e0","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/f6d0eec7e65d71e0","status":"passed","time":{"start":1760614538852,"stop":1760614540069,"duration":1217}},{"uid":"d9ff987d0a148921","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/d9ff987d0a148921","status":"passed","time":{"start":1760599341317,"stop":1760599342114,"duration":797}},{"uid":"d99485e0bddb665","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/d99485e0bddb665","status":"passed","time":{"start":1760535376376,"stop":1760535377119,"duration":743}},{"uid":"11012a5991159b3f","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/11012a5991159b3f","status":"passed","time":{"start":1760533820237,"stop":1760533821111,"duration":874}},{"uid":"7686e94e3cf358c8","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/7686e94e3cf358c8","status":"passed","time":{"start":1760532411927,"stop":1760532413409,"duration":1482}},{"uid":"7d0a867b03752158","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/7d0a867b03752158","status":"passed","time":{"start":1760529235244,"stop":1760529235938,"duration":694}},{"uid":"613095c905b1c382","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/613095c905b1c382","status":"passed","time":{"start":1760510601951,"stop":1760510602825,"duration":874}},{"uid":"1a4bcaa4c508c080","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/1a4bcaa4c508c080","status":"passed","time":{"start":1760449131440,"stop":1760449132112,"duration":672}}]},"tags":["backend"]},"source":"5241b71bbf76ed69.json","parameterValues":["'owner_client'","200"]}