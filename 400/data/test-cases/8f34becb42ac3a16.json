{"uid":"8f34becb42ac3a16","name":"test_get_ydocument_invalid_id[empty]","fullName":"tests.test_backend.document.test_get_y_document#test_get_ydocument_invalid_id","historyId":"67c17837a711787277c3356df1734d1c","time":{"start":1761910012844,"stop":1761910012844,"duration":0},"description":"\n    Негативный сценарий: разные некорректные document_id.\n    ","descriptionHtml":"<pre><code>Негативный сценарий: разные некорректные document_id.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f7b6371b6d0>\n\n    @pytest.fixture(scope='session')\n    def temp_space(owner_client):\n        client = owner_client\n        name = generate_space_name()\n        response = client.post(**create_space_endpoint(name=name))\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:135: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761909856376,"stop":1761909856684,"duration":308},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1761909866728,"stop":1761909866905,"duration":177},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 135, in temp_space\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_y_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2551-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_y_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"400"},{"name":"fake_id","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":50},"items":[{"uid":"bcccbd9710f96f50","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/bcccbd9710f96f50","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761900043937,"stop":1761900043937,"duration":0}},{"uid":"126563a24b1a2b1b","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/126563a24b1a2b1b","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835063074,"stop":1761835063074,"duration":0}},{"uid":"2a1b53b7c86d9c1a","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/2a1b53b7c86d9c1a","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834649879,"stop":1761834649879,"duration":0}},{"uid":"1544ae2fd895ec20","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/1544ae2fd895ec20","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833485815,"stop":1761833485815,"duration":0}},{"uid":"fc7f77963feca690","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/fc7f77963feca690","status":"passed","time":{"start":1761821821953,"stop":1761821822178,"duration":225}},{"uid":"37cff827aabde871","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/37cff827aabde871","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818773698,"stop":1761818773698,"duration":0}},{"uid":"2fe402643dc210a0","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/2fe402643dc210a0","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748636802,"stop":1761748636802,"duration":0}},{"uid":"8a438cb213f18cc1","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/8a438cb213f18cc1","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747913912,"stop":1761747913912,"duration":0}},{"uid":"acacccadec079b3a","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/acacccadec079b3a","status":"passed","time":{"start":1761747030292,"stop":1761747030588,"duration":296}},{"uid":"800b88fd825dba00","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/800b88fd825dba00","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745744222,"stop":1761745744222,"duration":0}},{"uid":"bf86f2265f1bff38","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/bf86f2265f1bff38","status":"passed","time":{"start":1761576852678,"stop":1761576852892,"duration":214}},{"uid":"74ed678a9a9576c2","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/74ed678a9a9576c2","status":"passed","time":{"start":1761557473076,"stop":1761557473259,"duration":183}},{"uid":"bc9a8b8b7551cb08","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/bc9a8b8b7551cb08","status":"passed","time":{"start":1761308691004,"stop":1761308691219,"duration":215}},{"uid":"13bd71aa62335f56","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/13bd71aa62335f56","status":"passed","time":{"start":1761306858256,"stop":1761306858453,"duration":197}},{"uid":"258550f0b521a640","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/258550f0b521a640","status":"passed","time":{"start":1761137156603,"stop":1761137156824,"duration":221}},{"uid":"a84a83ac15eedbe8","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/a84a83ac15eedbe8","status":"passed","time":{"start":1761135854868,"stop":1761135855115,"duration":247}},{"uid":"98649ecd05446a8","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/98649ecd05446a8","status":"passed","time":{"start":1761134264034,"stop":1761134264226,"duration":192}},{"uid":"2e8c50603fe50beb","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/2e8c50603fe50beb","status":"passed","time":{"start":1761128653200,"stop":1761128653452,"duration":252}},{"uid":"f5971c128bf9e937","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/f5971c128bf9e937","status":"passed","time":{"start":1761124748460,"stop":1761124748729,"duration":269}},{"uid":"74369aa046b88376","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/74369aa046b88376","status":"passed","time":{"start":1761119556106,"stop":1761119556330,"duration":224}}]},"tags":["backend"]},"source":"8f34becb42ac3a16.json","parameterValues":["400","''"]}