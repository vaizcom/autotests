{"uid":"616bb5886bd2cb82","name":"Дублирование Personal-документа: создание owner, дублирование guest","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_personal_doc_different_roles","historyId":"f6ccc9cdc7aae746b07a6ca4ecd3cd8f","time":{"start":1761745662622,"stop":1761745662743,"duration":121},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[owner_personal_by_guest]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', duplicator_fixture = 'guest_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:208: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761745634722,"stop":1761745635157,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761745640561,"stop":1761745640795,"duration":234},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[owner_personal_by_guest]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', duplicator_fixture = 'guest_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:208: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью owner","time":{"start":1761745662622,"stop":1761745662743,"duration":121},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 208, in test_duplicate_personal_doc_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"duplicator_fixture","value":"'guest_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"2957f065a875215","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2957f065a875215","status":"passed","time":{"start":1761576545244,"stop":1761576545948,"duration":704}},{"uid":"23e952faa40cca90","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/23e952faa40cca90","status":"passed","time":{"start":1761557201783,"stop":1761557202407,"duration":624}},{"uid":"27ecb04c94af5f0f","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/27ecb04c94af5f0f","status":"passed","time":{"start":1761308426703,"stop":1761308427335,"duration":632}},{"uid":"e4ff3d310a572eb0","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/e4ff3d310a572eb0","status":"passed","time":{"start":1761306573863,"stop":1761306574550,"duration":687}},{"uid":"d4088b5d6255d7d7","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/d4088b5d6255d7d7","status":"passed","time":{"start":1761136870451,"stop":1761136871186,"duration":735}},{"uid":"4e9129f48be733ca","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/4e9129f48be733ca","status":"passed","time":{"start":1761135528234,"stop":1761135529022,"duration":788}},{"uid":"291cbb88c6cff2e","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/291cbb88c6cff2e","status":"passed","time":{"start":1761133984753,"stop":1761133985451,"duration":698}},{"uid":"7882f5590d6c08f3","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/7882f5590d6c08f3","status":"passed","time":{"start":1761128297226,"stop":1761128298059,"duration":833}},{"uid":"55500ada5862d6a0","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/55500ada5862d6a0","status":"passed","time":{"start":1761124404265,"stop":1761124405143,"duration":878}},{"uid":"6b77f7b7abdaf513","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/6b77f7b7abdaf513","status":"passed","time":{"start":1761119245734,"stop":1761119246429,"duration":695}},{"uid":"16a899f73e61ec2a","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/16a899f73e61ec2a","status":"passed","time":{"start":1761053286624,"stop":1761053287314,"duration":690}},{"uid":"61c3a12fdd292998","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/61c3a12fdd292998","status":"passed","time":{"start":1761047175977,"stop":1761047176692,"duration":715}},{"uid":"3bace6a606c17ee1","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/3bace6a606c17ee1","status":"passed","time":{"start":1760614585112,"stop":1760614585906,"duration":794}},{"uid":"70d22a72c20adb","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/70d22a72c20adb","status":"passed","time":{"start":1760599385979,"stop":1760599386715,"duration":736}},{"uid":"da8c07e78155c0","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/da8c07e78155c0","status":"passed","time":{"start":1760535422087,"stop":1760535422810,"duration":723}},{"uid":"a7087e53227148b4","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/a7087e53227148b4","status":"passed","time":{"start":1760533878341,"stop":1760533879544,"duration":1203}},{"uid":"754d99c704cd6008","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/754d99c704cd6008","status":"passed","time":{"start":1760532457915,"stop":1760532458628,"duration":713}},{"uid":"b3d37d4bab1550a0","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/b3d37d4bab1550a0","status":"passed","time":{"start":1760529276519,"stop":1760529277192,"duration":673}},{"uid":"2e0f63dbbb4f3b8","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/2e0f63dbbb4f3b8","status":"passed","time":{"start":1760510650826,"stop":1760510652018,"duration":1192}},{"uid":"a6856a7dea793083","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/a6856a7dea793083","status":"passed","time":{"start":1760449172395,"stop":1760449173007,"duration":612}}]},"tags":["backend"]},"source":"616bb5886bd2cb82.json","parameterValues":["'owner_client'","'guest_client'","403"]}