{"uid":"65cb0bd72eb883a3","name":"Проверка доступа с некорректным ID документа","fullName":"tests.test_backend.document.access_doc.test_matrix_access_docs#test_access_with_invalid_ids","historyId":"ae32a36c285b657aaaf85efde25f58e9","time":{"start":1761900036078,"stop":1761900036253,"duration":175},"description":"\n    Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n    ","descriptionHtml":"<pre><code>Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2708f7bf10>\ndocument_id = 'invalid-id-123', space_id = 'valid-space-id'\nexpected_status = 400, expected_error_code = 'InvalidForm'\n\n    @allure.title('Проверка доступа с некорректным ID документа')\n    @pytest.mark.parametrize(\n        'document_id, space_id, expected_status, expected_error_code',\n        [\n            ('invalid-id-123', 'valid-space-id', 400, 'InvalidForm'),\n            ('valid-document-id', 'invalid-space-id-456', 400, 'InvalidForm'),\n            ('invalid-id-789', 'invalid-space-id', 400, 'InvalidForm'),\n        ],\n        ids=['invalid document_id', 'invalid space_id', 'invalid both'],\n    )\n    def test_access_with_invalid_ids(owner_client, document_id, space_id, expected_status, expected_error_code):\n        \"\"\"\n        Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n        \"\"\"\n        with allure.step(f'Попытка получить доступ к документу {document_id} в пространстве {space_id}'):\n            response = owner_client.post(**get_document_endpoint(document_id=document_id, space_id=space_id))\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status} и ошибка соответствующая'):\n            assert response.status_code == expected_status, f'Ожидался статус {expected_status}, получен {response.status_code}'\n            error = response.json().get('error')\n>           assert error.get(\n                'code') == expected_error_code, f\"Ожидался код ошибки '{expected_error_code}', получен: {error.get('code')}\"\nE           AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nE           assert 'JwtDoesNotExits' == 'InvalidForm'\nE             \nE             - InvalidForm\nE             + JwtDoesNotExits\n\ntests/test_backend/document/access_doc/test_matrix_access_docs.py:119: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761899890641,"stop":1761899890641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761899890642,"stop":1761899891240,"duration":598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n    ","status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2708f7bf10>\ndocument_id = 'invalid-id-123', space_id = 'valid-space-id'\nexpected_status = 400, expected_error_code = 'InvalidForm'\n\n    @allure.title('Проверка доступа с некорректным ID документа')\n    @pytest.mark.parametrize(\n        'document_id, space_id, expected_status, expected_error_code',\n        [\n            ('invalid-id-123', 'valid-space-id', 400, 'InvalidForm'),\n            ('valid-document-id', 'invalid-space-id-456', 400, 'InvalidForm'),\n            ('invalid-id-789', 'invalid-space-id', 400, 'InvalidForm'),\n        ],\n        ids=['invalid document_id', 'invalid space_id', 'invalid both'],\n    )\n    def test_access_with_invalid_ids(owner_client, document_id, space_id, expected_status, expected_error_code):\n        \"\"\"\n        Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n        \"\"\"\n        with allure.step(f'Попытка получить доступ к документу {document_id} в пространстве {space_id}'):\n            response = owner_client.post(**get_document_endpoint(document_id=document_id, space_id=space_id))\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status} и ошибка соответствующая'):\n            assert response.status_code == expected_status, f'Ожидался статус {expected_status}, получен {response.status_code}'\n            error = response.json().get('error')\n>           assert error.get(\n                'code') == expected_error_code, f\"Ожидался код ошибки '{expected_error_code}', получен: {error.get('code')}\"\nE           AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nE           assert 'JwtDoesNotExits' == 'InvalidForm'\nE             \nE             - InvalidForm\nE             + JwtDoesNotExits\n\ntests/test_backend/document/access_doc/test_matrix_access_docs.py:119: AssertionError","steps":[{"name":"Попытка получить доступ к документу invalid-id-123 в пространстве valid-space-id","time":{"start":1761900036078,"stop":1761900036252,"duration":174},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что статус ответа = 400 и ошибка соответствующая","time":{"start":1761900036252,"stop":1761900036252,"duration":0},"status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_matrix_access_docs.py\", line 119, in test_access_with_invalid_ids\n    assert error.get(\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_matrix_access_docs"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2554-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_matrix_access_docs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"document_id","value":"'invalid-id-123'"},{"name":"expected_error_code","value":"'InvalidForm'"},{"name":"expected_status","value":"400"},{"name":"space_id","value":"'valid-space-id'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":49},"items":[{"uid":"a7968dae0362f27","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/a7968dae0362f27","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761835056963,"stop":1761835057083,"duration":120}},{"uid":"c33a7d11538d9413","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/c33a7d11538d9413","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761834641165,"stop":1761834641339,"duration":174}},{"uid":"2380d5f4af68b024","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/2380d5f4af68b024","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761833477221,"stop":1761833477406,"duration":185}},{"uid":"f72a89bbecc2ba53","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/f72a89bbecc2ba53","status":"passed","time":{"start":1761821705518,"stop":1761821705660,"duration":142}},{"uid":"4db214c0b9335ff0","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/4db214c0b9335ff0","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761818765498,"stop":1761818765672,"duration":174}},{"uid":"c9928eb0418132ec","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/c9928eb0418132ec","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761748629253,"stop":1761748629738,"duration":485}},{"uid":"b261aa9398127264","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/b261aa9398127264","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761747904794,"stop":1761747904978,"duration":184}},{"uid":"2d9b4cb3b5aa246d","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2d9b4cb3b5aa246d","status":"passed","time":{"start":1761746870251,"stop":1761746870497,"duration":246}},{"uid":"ef8fe305994d23c7","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/ef8fe305994d23c7","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761745737629,"stop":1761745737752,"duration":123}},{"uid":"ab157dc1a8e2c81a","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ab157dc1a8e2c81a","status":"passed","time":{"start":1761576711473,"stop":1761576711648,"duration":175}},{"uid":"e26466b05d04984c","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/e26466b05d04984c","status":"passed","time":{"start":1761557362009,"stop":1761557362146,"duration":137}},{"uid":"c98387a071a8a6ff","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/c98387a071a8a6ff","status":"passed","time":{"start":1761308586127,"stop":1761308586272,"duration":145}},{"uid":"9ec0bd2c654a0fe0","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/9ec0bd2c654a0fe0","status":"passed","time":{"start":1761306747595,"stop":1761306747740,"duration":145}},{"uid":"2b5609bf277c9f52","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/2b5609bf277c9f52","status":"passed","time":{"start":1761137040552,"stop":1761137040714,"duration":162}},{"uid":"cfe06b202784aa43","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/cfe06b202784aa43","status":"passed","time":{"start":1761135717583,"stop":1761135717770,"duration":187}},{"uid":"5320e7df4cfd56a3","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/5320e7df4cfd56a3","status":"passed","time":{"start":1761134145157,"stop":1761134145307,"duration":150}},{"uid":"af25022f3de4c101","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/af25022f3de4c101","status":"passed","time":{"start":1761128505908,"stop":1761128506114,"duration":206}},{"uid":"7ada45800f66c5be","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/7ada45800f66c5be","status":"passed","time":{"start":1761124618353,"stop":1761124618548,"duration":195}},{"uid":"772068ba6fee9c66","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/772068ba6fee9c66","status":"passed","time":{"start":1761119431050,"stop":1761119431206,"duration":156}},{"uid":"7f8a5c0ed5a8a0e3","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/7f8a5c0ed5a8a0e3","status":"passed","time":{"start":1761053451753,"stop":1761053451889,"duration":136}}]},"tags":["backend"]},"source":"65cb0bd72eb883a3.json","parameterValues":["'invalid-id-123'","'InvalidForm'","400","'valid-space-id'"]}