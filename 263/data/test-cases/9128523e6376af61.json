{"uid":"9128523e6376af61","name":"Создание документа - кейс с kind=WrongKind и kindId (ожидается 400)","fullName":"tests.test_backend.document.test_create_document#test_document_kind_and_id","historyId":"bfe6b4aa9a06971d9ae2c54d2a20c85b","time":{"start":1752047998621,"stop":1752047998621,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f60ac7d5290>\ntemp_space = '686e2144dc7db2861c816ae1'\nrequest = <FixtureRequest for <Function test_document_kind_and_id[wrong kind]>>\nkind = 'WrongKind', get_fixture = 'temp_project', expected_status = 400\n\n    @pytest.mark.parametrize(\n        'kind, get_fixture, expected_status',\n        [\n            ('Project', 'temp_project', 200),\n            ('Space', 'temp_space', 200),\n            ('Member', 'temp_member', 200),\n            ('WrongKind', 'temp_project', 400),\n            ('Project', 'nonexistent_id', 400),\n        ],\n        ids=['project', 'space', 'member', 'wrong kind', 'wrong id'],\n    )\n    def test_document_kind_and_id(owner_client, temp_space, request, kind, get_fixture, expected_status):\n        allure.dynamic.title(f'Создание документа - кейс с kind={kind} и kindId (ожидается {expected_status})')\n    \n>       kind_id = request.getfixturevalue(get_fixture) if get_fixture != 'nonexistent_id' else 'invalid_id'\n\ntests/test_backend/document/test_create_document.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:532: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:617: in _get_active_fixturedef\n    fixturedef.execute(request=subrequest)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:1071: in execute\n    raise exc.with_traceback(exc_tb)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:1140: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:891: in call_fixture_func\n    fixture_result = next(generator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nowner_client = <tests.core.client.APIClient object at 0x7f60ac7d5290>\ntemp_space = '686e2144dc7db2861c816ae1'\n\n    @pytest.fixture(scope='session')\n    def temp_project(owner_client, temp_space):\n        \"\"\"Создаёт проект, который используется во всех тестах модуля.\"\"\"\n        name = generate_project_name()\n        slug = generate_slug()\n        common_kwargs = {'color': 'blue', 'icon': 'Dot', 'description': 'temporary project', 'space_id': temp_space}\n        response = owner_client.post(**create_project_endpoint(name=name, slug=slug, **common_kwargs))\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:124: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1752047939816,"stop":1752047939816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752047939816,"stop":1752047939816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752047939816,"stop":1752047940592,"duration":776},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752047939816,"stop":1752047939816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752047939816,"stop":1752047939816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1752047940592,"stop":1752047941242,"duration":650},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[{"name":"temp_space::0","time":{"start":1752048136220,"stop":1752048136701,"duration":481},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_create_document"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2510-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_create_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"400"},{"name":"get_fixture","value":"'temp_project'"},{"name":"kind","value":"'WrongKind'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":88,"unknown":0,"total":89},"items":[{"uid":"320298c732505144","reportUrl":"https://vaizcom.github.io/autotests/262//#testresult/320298c732505144","status":"passed","time":{"start":1752046689567,"stop":1752046689796,"duration":229}},{"uid":"20a46990f3a8643c","reportUrl":"https://vaizcom.github.io/autotests/261//#testresult/20a46990f3a8643c","status":"passed","time":{"start":1752044691999,"stop":1752044692259,"duration":260}},{"uid":"97c4f6c2643f0c40","reportUrl":"https://vaizcom.github.io/autotests/260//#testresult/97c4f6c2643f0c40","status":"passed","time":{"start":1751982697178,"stop":1751982697363,"duration":185}},{"uid":"efe9feeaa45b7b36","reportUrl":"https://vaizcom.github.io/autotests/259//#testresult/efe9feeaa45b7b36","status":"passed","time":{"start":1751976168943,"stop":1751976169208,"duration":265}},{"uid":"9eb00564fa5fced7","reportUrl":"https://vaizcom.github.io/autotests/258//#testresult/9eb00564fa5fced7","status":"passed","time":{"start":1751975123359,"stop":1751975123564,"duration":205}},{"uid":"5bc6e3b5c59c81b3","reportUrl":"https://vaizcom.github.io/autotests/257//#testresult/5bc6e3b5c59c81b3","status":"passed","time":{"start":1751973411914,"stop":1751973412107,"duration":193}},{"uid":"750422b9112ab625","reportUrl":"https://vaizcom.github.io/autotests/256//#testresult/750422b9112ab625","status":"passed","time":{"start":1751971684988,"stop":1751971685203,"duration":215}},{"uid":"fd102d7fbd0f9698","reportUrl":"https://vaizcom.github.io/autotests/255//#testresult/fd102d7fbd0f9698","status":"passed","time":{"start":1751965091332,"stop":1751965091591,"duration":259}},{"uid":"5d501d49cd8f6055","reportUrl":"https://vaizcom.github.io/autotests/254//#testresult/5d501d49cd8f6055","status":"passed","time":{"start":1751959181598,"stop":1751959181853,"duration":255}},{"uid":"df1900844e152c00","reportUrl":"https://vaizcom.github.io/autotests/253//#testresult/df1900844e152c00","status":"passed","time":{"start":1751897301611,"stop":1751897301889,"duration":278}},{"uid":"3985c736a3f0a6b2","reportUrl":"https://vaizcom.github.io/autotests/252//#testresult/3985c736a3f0a6b2","status":"passed","time":{"start":1751893990242,"stop":1751893990969,"duration":727}},{"uid":"58b57793ce700ce6","reportUrl":"https://vaizcom.github.io/autotests/251//#testresult/58b57793ce700ce6","status":"passed","time":{"start":1751889674270,"stop":1751889674524,"duration":254}},{"uid":"2003ae36d6c23e7d","reportUrl":"https://vaizcom.github.io/autotests/250//#testresult/2003ae36d6c23e7d","status":"passed","time":{"start":1751888351785,"stop":1751888352069,"duration":284}},{"uid":"ba0bd74434ec8e6f","reportUrl":"https://vaizcom.github.io/autotests/249//#testresult/ba0bd74434ec8e6f","status":"passed","time":{"start":1751887746931,"stop":1751887747186,"duration":255}},{"uid":"7733cc08d14907e4","reportUrl":"https://vaizcom.github.io/autotests/248//#testresult/7733cc08d14907e4","status":"passed","time":{"start":1751884522153,"stop":1751884522365,"duration":212}},{"uid":"36b440d12a14954e","reportUrl":"https://vaizcom.github.io/autotests/247//#testresult/36b440d12a14954e","status":"passed","time":{"start":1751882764306,"stop":1751882764654,"duration":348}},{"uid":"594bfbd9ed58aad8","reportUrl":"https://vaizcom.github.io/autotests/246//#testresult/594bfbd9ed58aad8","status":"passed","time":{"start":1751535000830,"stop":1751535001053,"duration":223}},{"uid":"59c5d3893322bd92","reportUrl":"https://vaizcom.github.io/autotests/245//#testresult/59c5d3893322bd92","status":"passed","time":{"start":1751525399275,"stop":1751525399529,"duration":254}},{"uid":"a272075ca9a00863","reportUrl":"https://vaizcom.github.io/autotests/244//#testresult/a272075ca9a00863","status":"passed","time":{"start":1751463821771,"stop":1751463821955,"duration":184}},{"uid":"65bbed870addfedd","reportUrl":"https://vaizcom.github.io/autotests/243//#testresult/65bbed870addfedd","status":"passed","time":{"start":1751463534344,"stop":1751463534613,"duration":269}}]},"tags":["backend"]},"source":"9128523e6376af61.json","parameterValues":["400","'temp_project'","'WrongKind'"]}