{"uid":"2013404a10999e49","name":"Проверка создания задачи с конкретным payload и структурой ответа : клиент=owner_client, ожидаемый статус=200","fullName":"tests.test_backend.task.access_task.test_create_task#test_create_task_with_specific_payload_and_response","historyId":"1570e48b1a88a9e1442c836c0fe032a4","time":{"start":1759909326573,"stop":1759909330706,"duration":4133},"description":"\n    Данный тест проверяет возможность создания задачи с заранее определённым набором данных (payload) через API\n     управления задачами для различных ролей пользователей, а также корректность и полноту возвращаемого ответа.\n     Тест эмулирует действия разных типов клиентов (владелец, менеджер, участник, гость) и сравнивает фактический результат с ожидаемым HTTP-статусом.\n    ","descriptionHtml":"<pre><code>Данный тест проверяет возможность создания задачи с заранее определённым набором данных (payload) через API\n управления задачами для различных ролей пользователей, а также корректность и полноту возвращаемого ответа.\n Тест эмулирует действия разных типов клиентов (владелец, менеджер, участник, гость) и сравнивает фактический результат с ожидаемым HTTP-статусом.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Не удалось удалить задачу 68e615d10354864d83fec6ed: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_specific_payload_and_response[owner]>>\nclient_fixture = 'owner_client', expected_status = 200\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nmain_project = '686672af85fb8d104544e798'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_task_with_specific_payload_and_response(\n            request, client_fixture, expected_status, main_space, main_board, main_project\n    ):\n        \"\"\"\n        Данный тест проверяет возможность создания задачи с заранее определённым набором данных (payload) через API\n         управления задачами для различных ролей пользователей, а также корректность и полноту возвращаемого ответа.\n         Тест эмулирует действия разных типов клиентов (владелец, менеджер, участник, гость) и сравнивает фактический результат с ожидаемым HTTP-статусом.\n        \"\"\"\n        allure.dynamic.title(\n            f\"Проверка создания задачи с конкретным payload и структурой ответа : клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n    \n        # Получение клиента\n        with allure.step(f\"Получение клиента для {client_fixture}\"):\n            client = get_client(request, client_fixture)\n    \n        # Формируем имя задачи с учетом пользователя и текущей даты\n        task_name = f\"Create task клиент={client_fixture}, дата={datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\"\n    \n        # Получение профиля для извлечения creator ID\n        with allure.step(f\"Получение профиля для извлечения creator ID\"):\n            member_id = get_member_profile(client, main_space)\n    \n        with allure.step(\"Получаем случайный type из борды\"):\n            random_type_id = get_type(client, main_board, main_space)\n    \n        with allure.step(\"Получаем случайную группу из борды\"):\n            random_group_id = get_group(client, main_board, main_space)\n    \n        with allure.step(\"Получаем текущую дату и время в формате ISO 8601 UTC\"):\n            current_timestamp = get_current_timestamp()\n    \n        with allure.step(\"Прибавляем неделю к переданному времени в формате ISO 8601 UTC\"):\n            due_end = get_due_end()\n    \n        with allure.step(\"Получаем случайную priority\"):\n            priority = get_priority()\n    \n        with allure.step(\"Получаем random_member_id для извлечения assignees\"):\n            random_member_id = get_assignee(client, main_space)\n    \n        with allure.step(\"Получаем get_random_complete для извлечения completed\"):\n            get_random_complete = random.choice([True, False])\n    \n        with allure.step(\"Получаем get_random_complete для извлечения completed\"):\n            get_random_milestone = get_milestone(client, main_space, main_board)\n    \n        # Если запрос успешен, проверяем содержимое ответа\n        task_id = None\n    \n        try:\n    \n            # Формируем payload\n            with allure.step(\"Генерация payload\"):\n                payload = create_task_endpoint(\n                    space_id=main_space,\n                    board=main_board,\n                    name=task_name,\n                    types=[random_type_id],\n                    assignees= random_member_id,\n                    due_start=current_timestamp,\n                    due_end= due_end,\n                    priority=priority,\n                    completed=get_random_complete,\n                    group=random_group_id,\n                    milestones=[get_random_milestone],\n                    parent_task=None,\n                    index=2\n                )\n    \n            # Отправляем запрос\n            with allure.step(\"Отправляем запрос на создание задачи\"):\n                response = client.post(**payload)\n    \n            # Проверяем статус ответа\n            with allure.step(f\"Проверка статус-кода: ожидаем {expected_status}\"):\n                assert response.status_code == expected_status, response.text\n    \n            # Если запрос успешен, проверяем содержимое ответа\n            if response.status_code == 200:\n                with allure.step(\"Проверяем содержимое ответа задачи\"):\n                    task = response.json()[\"payload\"][\"task\"]\n                    task_id = task[\"_id\"]\n    \n                    # Проверка основных полей задачи\n                    with allure.step(\"Проверяем основные данные задачи\"):\n                        assert task[\"name\"] == task_name, \"Ошибка: неверное имя задачи\"\n                        assert task[\"group\"] == random_group_id, \"Ошибка: неверная группа задачи\"\n                        assert task[\"board\"] == main_board, \"Ошибка: неверное значение board задачи\"\n                        assert task[\"project\"] == main_project, \"Ошибка: неверный проект\"\n                        assert task[\"parentTask\"] is None, \"Ошибка: поле parentTask должно быть None\"\n                        assert task[\"priority\"] == priority, \"Ошибка: неверный приоритет задачи\"\n                        assert task[\"completed\"] == get_random_complete, \"Ошибка: задача должна быть помечена как завершённая\"\n                        assert task[\"creator\"] == member_id, \"Ошибка: 'creator' не соответствует memberId пользователя\"\n    \n                    # Проверка полей, относящихся к работе\n                    with allure.step(\"Проверяем связанные поля\"):\n                        assert task[\"types\"] == [random_type_id], \"Ошибка: неверное значение types\"\n                        assert task[\"assignees\"] == [random_member_id], \"Ошибка: неверное значение assignees\"\n                        assert task[\"milestones\"] == [get_random_milestone], \"Ошибка: неверное значение milestones\"\n                        assert task[\"subtasks\"] == [], \"Ошибка: поле с подзадачами должно быть пустым\"\n    \n                    # Проверка временных полей\n                    with allure.step(\"Проверяем временные поля и сроки задачи\"):\n                        assert task[\"dueStart\"] == current_timestamp.replace(\"+00:00\", \"Z\"), \"Ошибка: неверное значение dueStart\"\n                        assert task[\"dueEnd\"] == due_end.replace(\"+00:00\", \"Z\"), \"Ошибка: неверное значение dueEnd\"\n    \n                    # Проверка метаданных и системных полей\n                    with allure.step(\"Проверяем метаданные\"):\n                        assert \"_id\" in task, \"Ошибка: отсутствует поле '_id'\"\n                        assert task[\"createdAt\"] is not None, \"Ошибка: поле 'createdAt' должно быть задано\"\n                        assert task[\"updatedAt\"] is not None, \"Ошибка: поле 'updatedAt' должно быть задано\"\n                        assert task[\"document\"] is not None, \"Ошибка: неверный документ\"\n                        assert task[\"milestone\"] == get_random_milestone, \"Ошибка: неверный milestone\"\n                        assert task[\"followers\"] == {member_id: \"creator\"}, \"Ошибка: 'followers' должно включать creator\"\n    \n                    # Проверка корректности формата `hrid`\n                    with allure.step(\"Проверяем поле 'hrid'\"):\n                        assert \"hrid\" in task, \"Поле 'hrid' отсутствует\"\n                        validate_hrid(client, main_space, main_project, task[\"hrid\"])\n    \n                    # Проверка пустых и None полей\n                    with allure.step(\"Проверяем поля с пустыми значениями и None\"):\n                        assert task[\"rightConnectors\"] == [], \"Ошибка: поле rightConnectors должно быть пустым\"\n                        assert task[\"leftConnectors\"] == [], \"Ошибка: поле leftConnectors должно быть пустым\"\n                        assert task[\"archiver\"] is None, \"Ошибка: значение archiver должно быть None\"\n                        assert task[\"archivedAt\"] is None, \"Ошибка: поле archivedAt должно быть None\"\n                        assert task[\"completedAt\"] is None, \"Ошибка: поле completedAt должно быть None\"\n                        assert task[\"deleter\"] is None, \"Ошибка: поле deleter должно быть None\"\n                        assert task[\"deletedAt\"] is None, \"Ошибка: поле deletedAt должно быть None\"\n                        assert task[\"customFields\"] == [], \"Ошибка: поле customFields должно быть пустым\"\n    \n                    with allure.step(\"Проверяем содержимое ответа задачи\"):\n                        task = response.json()[\"payload\"][\"task\"]\n    \n                        with allure.step(\"Проверка структуры ключей задачи\"):\n                            expected_task_keys = {\n                                \"name\", \"group\", \"board\", \"project\", \"parentTask\", \"priority\", \"completed\",\n                                \"types\", \"assignees\", \"milestones\", \"subtasks\", \"dueStart\", \"dueEnd\",\n                                \"_id\", \"createdAt\", \"updatedAt\", \"document\", \"milestone\", \"followers\",\n                                \"hrid\", \"rightConnectors\", \"leftConnectors\", \"archiver\", \"archivedAt\",\n                                \"completedAt\", \"deleter\", \"deletedAt\", \"customFields\", \"creator\"\n                            }\n                            assert_task_keys(task, expected_task_keys)\n    \n        finally:\n            if task_id:\n                with allure.step(f\"Удаляем задачу: {task_id}\"):\n                    del_resp = client.post(**delete_task_endpoint(space_id=main_space, task_id=task_id))\n>                   assert del_resp.status_code == 200, (\n                        f\"Не удалось удалить задачу {task_id}: {del_resp.status_code} {del_resp.text}\"\n                    )\nE                   AssertionError: Не удалось удалить задачу 68e615d10354864d83fec6ed: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/task/access_task/test_create_task.py:282: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"main_client","time":{"start":1759908910502,"stop":1759908910958,"duration":456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759908910958,"stop":1759908911429,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1759908911429,"stop":1759908911673,"duration":244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759908911674,"stop":1759908912143,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1759908916299,"stop":1759908916703,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Данный тест проверяет возможность создания задачи с заранее определённым набором данных (payload) через API\n     управления задачами для различных ролей пользователей, а также корректность и полноту возвращаемого ответа.\n     Тест эмулирует действия разных типов клиентов (владелец, менеджер, участник, гость) и сравнивает фактический результат с ожидаемым HTTP-статусом.\n    ","status":"failed","statusMessage":"AssertionError: Не удалось удалить задачу 68e615d10354864d83fec6ed: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_specific_payload_and_response[owner]>>\nclient_fixture = 'owner_client', expected_status = 200\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nmain_project = '686672af85fb8d104544e798'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_task_with_specific_payload_and_response(\n            request, client_fixture, expected_status, main_space, main_board, main_project\n    ):\n        \"\"\"\n        Данный тест проверяет возможность создания задачи с заранее определённым набором данных (payload) через API\n         управления задачами для различных ролей пользователей, а также корректность и полноту возвращаемого ответа.\n         Тест эмулирует действия разных типов клиентов (владелец, менеджер, участник, гость) и сравнивает фактический результат с ожидаемым HTTP-статусом.\n        \"\"\"\n        allure.dynamic.title(\n            f\"Проверка создания задачи с конкретным payload и структурой ответа : клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n    \n        # Получение клиента\n        with allure.step(f\"Получение клиента для {client_fixture}\"):\n            client = get_client(request, client_fixture)\n    \n        # Формируем имя задачи с учетом пользователя и текущей даты\n        task_name = f\"Create task клиент={client_fixture}, дата={datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\"\n    \n        # Получение профиля для извлечения creator ID\n        with allure.step(f\"Получение профиля для извлечения creator ID\"):\n            member_id = get_member_profile(client, main_space)\n    \n        with allure.step(\"Получаем случайный type из борды\"):\n            random_type_id = get_type(client, main_board, main_space)\n    \n        with allure.step(\"Получаем случайную группу из борды\"):\n            random_group_id = get_group(client, main_board, main_space)\n    \n        with allure.step(\"Получаем текущую дату и время в формате ISO 8601 UTC\"):\n            current_timestamp = get_current_timestamp()\n    \n        with allure.step(\"Прибавляем неделю к переданному времени в формате ISO 8601 UTC\"):\n            due_end = get_due_end()\n    \n        with allure.step(\"Получаем случайную priority\"):\n            priority = get_priority()\n    \n        with allure.step(\"Получаем random_member_id для извлечения assignees\"):\n            random_member_id = get_assignee(client, main_space)\n    \n        with allure.step(\"Получаем get_random_complete для извлечения completed\"):\n            get_random_complete = random.choice([True, False])\n    \n        with allure.step(\"Получаем get_random_complete для извлечения completed\"):\n            get_random_milestone = get_milestone(client, main_space, main_board)\n    \n        # Если запрос успешен, проверяем содержимое ответа\n        task_id = None\n    \n        try:\n    \n            # Формируем payload\n            with allure.step(\"Генерация payload\"):\n                payload = create_task_endpoint(\n                    space_id=main_space,\n                    board=main_board,\n                    name=task_name,\n                    types=[random_type_id],\n                    assignees= random_member_id,\n                    due_start=current_timestamp,\n                    due_end= due_end,\n                    priority=priority,\n                    completed=get_random_complete,\n                    group=random_group_id,\n                    milestones=[get_random_milestone],\n                    parent_task=None,\n                    index=2\n                )\n    \n            # Отправляем запрос\n            with allure.step(\"Отправляем запрос на создание задачи\"):\n                response = client.post(**payload)\n    \n            # Проверяем статус ответа\n            with allure.step(f\"Проверка статус-кода: ожидаем {expected_status}\"):\n                assert response.status_code == expected_status, response.text\n    \n            # Если запрос успешен, проверяем содержимое ответа\n            if response.status_code == 200:\n                with allure.step(\"Проверяем содержимое ответа задачи\"):\n                    task = response.json()[\"payload\"][\"task\"]\n                    task_id = task[\"_id\"]\n    \n                    # Проверка основных полей задачи\n                    with allure.step(\"Проверяем основные данные задачи\"):\n                        assert task[\"name\"] == task_name, \"Ошибка: неверное имя задачи\"\n                        assert task[\"group\"] == random_group_id, \"Ошибка: неверная группа задачи\"\n                        assert task[\"board\"] == main_board, \"Ошибка: неверное значение board задачи\"\n                        assert task[\"project\"] == main_project, \"Ошибка: неверный проект\"\n                        assert task[\"parentTask\"] is None, \"Ошибка: поле parentTask должно быть None\"\n                        assert task[\"priority\"] == priority, \"Ошибка: неверный приоритет задачи\"\n                        assert task[\"completed\"] == get_random_complete, \"Ошибка: задача должна быть помечена как завершённая\"\n                        assert task[\"creator\"] == member_id, \"Ошибка: 'creator' не соответствует memberId пользователя\"\n    \n                    # Проверка полей, относящихся к работе\n                    with allure.step(\"Проверяем связанные поля\"):\n                        assert task[\"types\"] == [random_type_id], \"Ошибка: неверное значение types\"\n                        assert task[\"assignees\"] == [random_member_id], \"Ошибка: неверное значение assignees\"\n                        assert task[\"milestones\"] == [get_random_milestone], \"Ошибка: неверное значение milestones\"\n                        assert task[\"subtasks\"] == [], \"Ошибка: поле с подзадачами должно быть пустым\"\n    \n                    # Проверка временных полей\n                    with allure.step(\"Проверяем временные поля и сроки задачи\"):\n                        assert task[\"dueStart\"] == current_timestamp.replace(\"+00:00\", \"Z\"), \"Ошибка: неверное значение dueStart\"\n                        assert task[\"dueEnd\"] == due_end.replace(\"+00:00\", \"Z\"), \"Ошибка: неверное значение dueEnd\"\n    \n                    # Проверка метаданных и системных полей\n                    with allure.step(\"Проверяем метаданные\"):\n                        assert \"_id\" in task, \"Ошибка: отсутствует поле '_id'\"\n                        assert task[\"createdAt\"] is not None, \"Ошибка: поле 'createdAt' должно быть задано\"\n                        assert task[\"updatedAt\"] is not None, \"Ошибка: поле 'updatedAt' должно быть задано\"\n                        assert task[\"document\"] is not None, \"Ошибка: неверный документ\"\n                        assert task[\"milestone\"] == get_random_milestone, \"Ошибка: неверный milestone\"\n                        assert task[\"followers\"] == {member_id: \"creator\"}, \"Ошибка: 'followers' должно включать creator\"\n    \n                    # Проверка корректности формата `hrid`\n                    with allure.step(\"Проверяем поле 'hrid'\"):\n                        assert \"hrid\" in task, \"Поле 'hrid' отсутствует\"\n                        validate_hrid(client, main_space, main_project, task[\"hrid\"])\n    \n                    # Проверка пустых и None полей\n                    with allure.step(\"Проверяем поля с пустыми значениями и None\"):\n                        assert task[\"rightConnectors\"] == [], \"Ошибка: поле rightConnectors должно быть пустым\"\n                        assert task[\"leftConnectors\"] == [], \"Ошибка: поле leftConnectors должно быть пустым\"\n                        assert task[\"archiver\"] is None, \"Ошибка: значение archiver должно быть None\"\n                        assert task[\"archivedAt\"] is None, \"Ошибка: поле archivedAt должно быть None\"\n                        assert task[\"completedAt\"] is None, \"Ошибка: поле completedAt должно быть None\"\n                        assert task[\"deleter\"] is None, \"Ошибка: поле deleter должно быть None\"\n                        assert task[\"deletedAt\"] is None, \"Ошибка: поле deletedAt должно быть None\"\n                        assert task[\"customFields\"] == [], \"Ошибка: поле customFields должно быть пустым\"\n    \n                    with allure.step(\"Проверяем содержимое ответа задачи\"):\n                        task = response.json()[\"payload\"][\"task\"]\n    \n                        with allure.step(\"Проверка структуры ключей задачи\"):\n                            expected_task_keys = {\n                                \"name\", \"group\", \"board\", \"project\", \"parentTask\", \"priority\", \"completed\",\n                                \"types\", \"assignees\", \"milestones\", \"subtasks\", \"dueStart\", \"dueEnd\",\n                                \"_id\", \"createdAt\", \"updatedAt\", \"document\", \"milestone\", \"followers\",\n                                \"hrid\", \"rightConnectors\", \"leftConnectors\", \"archiver\", \"archivedAt\",\n                                \"completedAt\", \"deleter\", \"deletedAt\", \"customFields\", \"creator\"\n                            }\n                            assert_task_keys(task, expected_task_keys)\n    \n        finally:\n            if task_id:\n                with allure.step(f\"Удаляем задачу: {task_id}\"):\n                    del_resp = client.post(**delete_task_endpoint(space_id=main_space, task_id=task_id))\n>                   assert del_resp.status_code == 200, (\n                        f\"Не удалось удалить задачу {task_id}: {del_resp.status_code} {del_resp.text}\"\n                    )\nE                   AssertionError: Не удалось удалить задачу 68e615d10354864d83fec6ed: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/task/access_task/test_create_task.py:282: AssertionError","steps":[{"name":"Получение клиента для owner_client","time":{"start":1759909326573,"stop":1759909326573,"duration":0},"status":"passed","steps":[{"name":"Получение клиента для owner_client","time":{"start":1759909326573,"stop":1759909326573,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Получение профиля для извлечения creator ID","time":{"start":1759909326573,"stop":1759909326960,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получаем случайный type из борды","time":{"start":1759909326960,"stop":1759909327377,"duration":417},"status":"passed","steps":[{"name":"Запрашиваем данные борды с ID: 6866731185fb8d104544e826","time":{"start":1759909326960,"stop":1759909327377,"duration":417},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем наличие typesList","time":{"start":1759909327377,"stop":1759909327377,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Рандомно выбираем `type` из typesList","time":{"start":1759909327377,"stop":1759909327377,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true},{"name":"Получаем случайную группу из борды","time":{"start":1759909327377,"stop":1759909327782,"duration":405},"status":"passed","steps":[{"name":"Запрашиваем данные борды с ID: 6866731185fb8d104544e826","time":{"start":1759909327377,"stop":1759909327782,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем наличие списка групп","time":{"start":1759909327782,"stop":1759909327782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Рандомно выбираем группу из списка","time":{"start":1759909327782,"stop":1759909327782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true},{"name":"Получаем текущую дату и время в формате ISO 8601 UTC","time":{"start":1759909327782,"stop":1759909327782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Прибавляем неделю к переданному времени в формате ISO 8601 UTC","time":{"start":1759909327782,"stop":1759909327782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получаем случайную priority","time":{"start":1759909327782,"stop":1759909327782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получаем random_member_id для извлечения assignees","time":{"start":1759909327782,"stop":1759909328279,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получаем get_random_complete для извлечения completed","time":{"start":1759909328279,"stop":1759909328279,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получаем get_random_complete для извлечения completed","time":{"start":1759909328279,"stop":1759909329094,"duration":815},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Генерация payload","time":{"start":1759909329095,"stop":1759909329095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Отправляем запрос на создание задачи","time":{"start":1759909329095,"stop":1759909329761,"duration":666},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статус-кода: ожидаем 200","time":{"start":1759909329761,"stop":1759909329761,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем содержимое ответа задачи","time":{"start":1759909329762,"stop":1759909330288,"duration":526},"status":"passed","steps":[{"name":"Проверяем основные данные задачи","time":{"start":1759909329762,"stop":1759909329762,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем связанные поля","time":{"start":1759909329762,"stop":1759909329762,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем временные поля и сроки задачи","time":{"start":1759909329762,"stop":1759909329762,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем метаданные","time":{"start":1759909329762,"stop":1759909329762,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем поле 'hrid'","time":{"start":1759909329762,"stop":1759909330288,"duration":526},"status":"passed","steps":[{"name":"Получаем slug проекта","time":{"start":1759909329762,"stop":1759909330288,"duration":526},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что hrid 'CCSS-1145' соответствует шаблону '^CCSS-\\d+$'","time":{"start":1759909330288,"stop":1759909330288,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true},{"name":"Проверяем поля с пустыми значениями и None","time":{"start":1759909330288,"stop":1759909330288,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем содержимое ответа задачи","time":{"start":1759909330288,"stop":1759909330288,"duration":0},"status":"passed","steps":[{"name":"Проверка структуры ключей задачи","time":{"start":1759909330288,"stop":1759909330288,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":10,"attachmentsCount":0,"hasContent":true},{"name":"Удаляем задачу: 68e615d10354864d83fec6ed","time":{"start":1759909330288,"stop":1759909330705,"duration":417},"status":"failed","statusMessage":"AssertionError: Не удалось удалить задачу 68e615d10354864d83fec6ed: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/access_task/test_create_task.py\", line 282, in test_create_task_with_specific_payload_and_response\n    assert del_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":32,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.task.access_task"},{"name":"suite","value":"test_create_task"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2548-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task.access_task.test_create_task"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"149a120f15885163","reportUrl":"https://vaizcom.github.io/autotests/358//#testresult/149a120f15885163","status":"broken","statusDetails":"AttributeError: module 'datetime' has no attribute 'utcnow'","time":{"start":1759908110967,"stop":1759908111685,"duration":718}}]},"tags":["backend"]},"source":"2013404a10999e49.json","parameterValues":["'owner_client'","200"]}