{"uid":"f2f58913e2da114e","name":"Дублирование Space-документа: создание member, дублирование owner","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_project_and_space_docs_different_roles","historyId":"fc7617274bba4ad034e512e3f98855bf","time":{"start":1761747799981,"stop":1761747800695,"duration":714},"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","descriptionHtml":"<pre><code>Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\nсозданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-member_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\nduplicator_fixture = 'owner_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа второй ролью\n            with allure.step(f'Дублирование документа пользователем с ролью {duplicator_role}'):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:109: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761747760278,"stop":1761747760278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761747760278,"stop":1761747760906,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761747765139,"stop":1761747765458,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761747765458,"stop":1761747765749,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761747767429,"stop":1761747768079,"duration":650},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-member_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\nduplicator_fixture = 'owner_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа второй ролью\n            with allure.step(f'Дублирование документа пользователем с ролью {duplicator_role}'):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:109: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью member","time":{"start":1761747799981,"stop":1761747800259,"duration":278},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Дублирование документа пользователем с ролью owner","time":{"start":1761747800259,"stop":1761747800437,"duration":178},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 109, in test_duplicate_project_and_space_docs_different_roles\n    assert duplicate_response.status_code == expected_status, (\n","steps":[],"attachments":[{"uid":"f0d63b7d49652d32","name":"Response Body","source":"f0d63b7d49652d32.json","type":"application/json","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Архивация исходного документа","time":{"start":1761747800437,"stop":1761747800694,"duration":257},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'member_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"duplicator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"9aae63682cec42c","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/9aae63682cec42c","status":"passed","time":{"start":1761746670634,"stop":1761746671837,"duration":1203}},{"uid":"7ad5932f53ff2fea","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/7ad5932f53ff2fea","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745659215,"stop":1761745659756,"duration":541}},{"uid":"9400be592906af33","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/9400be592906af33","status":"passed","time":{"start":1761576538904,"stop":1761576540009,"duration":1105}},{"uid":"f93e419800df70e7","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/f93e419800df70e7","status":"passed","time":{"start":1761557195261,"stop":1761557196777,"duration":1516}},{"uid":"b75d5a000751603","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/b75d5a000751603","status":"passed","time":{"start":1761308420973,"stop":1761308421884,"duration":911}},{"uid":"8c4fdf73478907d4","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/8c4fdf73478907d4","status":"passed","time":{"start":1761306567718,"stop":1761306568688,"duration":970}},{"uid":"58b86ca9c6fb898c","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/58b86ca9c6fb898c","status":"passed","time":{"start":1761136863819,"stop":1761136864923,"duration":1104}},{"uid":"6028c038776ba86c","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/6028c038776ba86c","status":"passed","time":{"start":1761135521514,"stop":1761135522607,"duration":1093}},{"uid":"db69d07d75b82f3","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/db69d07d75b82f3","status":"passed","time":{"start":1761133978444,"stop":1761133979388,"duration":944}},{"uid":"46ff9ff1d5f6e857","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/46ff9ff1d5f6e857","status":"passed","time":{"start":1761128289486,"stop":1761128290610,"duration":1124}},{"uid":"199a776a0bf8878e","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/199a776a0bf8878e","status":"passed","time":{"start":1761124396679,"stop":1761124397895,"duration":1216}},{"uid":"38b4d99dfd2b5e4a","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/38b4d99dfd2b5e4a","status":"passed","time":{"start":1761119239580,"stop":1761119240734,"duration":1154}},{"uid":"18bda421eade5332","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/18bda421eade5332","status":"passed","time":{"start":1761053279367,"stop":1761053280863,"duration":1496}},{"uid":"82936e0cee203fc7","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/82936e0cee203fc7","status":"passed","time":{"start":1761047169348,"stop":1761047170353,"duration":1005}},{"uid":"1d6bc9a855df2a5","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/1d6bc9a855df2a5","status":"passed","time":{"start":1760614578020,"stop":1760614579108,"duration":1088}},{"uid":"c92935f8ec053d0","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/c92935f8ec053d0","status":"passed","time":{"start":1760599378757,"stop":1760599380003,"duration":1246}},{"uid":"8e90c008987cfa0c","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/8e90c008987cfa0c","status":"passed","time":{"start":1760535415474,"stop":1760535416455,"duration":981}},{"uid":"cce233a93df4d3e3","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/cce233a93df4d3e3","status":"passed","time":{"start":1760533869546,"stop":1760533871096,"duration":1550}},{"uid":"ed918dc55725391f","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/ed918dc55725391f","status":"passed","time":{"start":1760532451313,"stop":1760532452312,"duration":999}},{"uid":"d4376d6368c08611","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/d4376d6368c08611","status":"passed","time":{"start":1760529270124,"stop":1760529271364,"duration":1240}}]},"tags":["backend"]},"source":"f2f58913e2da114e.json","parameterValues":["'member_client'","'main_space'","'Space'","'owner_client'","200"]}