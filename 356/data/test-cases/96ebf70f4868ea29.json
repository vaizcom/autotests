{"uid":"96ebf70f4868ea29","name":"Получение документов — кейс: kind=Member","fullName":"tests.test_backend.document.test_get_documents#test_get_documents","historyId":"030f136b9055f4bc6464c9f268396b01","time":{"start":1759837458238,"stop":1759837458405,"duration":167},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\nrequest = <FixtureRequest for <Function test_get_documents[member]>>\nkind = 'Member', fixture_name = 'temp_member'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_documents(owner_client, temp_space, request, kind, fixture_name):\n        allure.dynamic.title(f'Получение документов — кейс: kind={kind}')\n    \n        kind_id = request.getfixturevalue(fixture_name)\n        count = random.randint(1, 5)\n        titles = [f'Random doc для kind={kind} #{i}' for i in range(count)]\n    \n        with allure.step(f'Создание {count} (Random[1,5]) документов с kind={kind}'):\n            for title in titles:\n                response = owner_client.post(\n                    **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title=title)\n                )\n>               assert response.status_code == 200\nE               assert 503 == 200\nE                +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_documents.py:37: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_member","time":{"start":1759837202743,"stop":1759837203578,"duration":835},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\nrequest = <FixtureRequest for <Function test_get_documents[member]>>\nkind = 'Member', fixture_name = 'temp_member'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_documents(owner_client, temp_space, request, kind, fixture_name):\n        allure.dynamic.title(f'Получение документов — кейс: kind={kind}')\n    \n        kind_id = request.getfixturevalue(fixture_name)\n        count = random.randint(1, 5)\n        titles = [f'Random doc для kind={kind} #{i}' for i in range(count)]\n    \n        with allure.step(f'Создание {count} (Random[1,5]) документов с kind={kind}'):\n            for title in titles:\n                response = owner_client.post(\n                    **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title=title)\n                )\n>               assert response.status_code == 200\nE               assert 503 == 200\nE                +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_documents.py:37: AssertionError","steps":[{"name":"Создание 5 (Random[1,5]) документов с kind=Member","time":{"start":1759837458238,"stop":1759837458404,"duration":166},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_documents.py\", line 37, in test_get_documents\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_member::0","time":{"start":1759837469358,"stop":1759837469358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_documents"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_documents"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"fixture_name","value":"'temp_member'"},{"name":"kind","value":"'Member'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"a1c87fb557e88299","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/a1c87fb557e88299","status":"passed","time":{"start":1759836306735,"stop":1759836308065,"duration":1330}},{"uid":"d17ec9663744d095","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/d17ec9663744d095","status":"passed","time":{"start":1759835654614,"stop":1759835656408,"duration":1794}},{"uid":"75d90d81d3378774","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/75d90d81d3378774","status":"passed","time":{"start":1759834772107,"stop":1759834773721,"duration":1614}}]},"tags":["backend"]},"source":"96ebf70f4868ea29.json","parameterValues":["'temp_member'","'Member'"]}