{"uid":"71827ec9114b4552","name":"Повторный запрос одного и того же документа (kind=Space)","fullName":"tests.test_backend.document.test_get_document#test_get_document_multiple_requests","historyId":"83c99b7d41bc0c68d0a36807e1ae27c8","time":{"start":1761053503602,"stop":1761053503717,"duration":115},"status":"failed","statusMessage":"AssertionError: assert 502 == 200\n +  where 502 = <Response [502]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f7926bb3d10>\nrequest = <FixtureRequest for <Function test_get_document_multiple_requests[space]>>\ntemp_space = '68f78a260bbcb424d41e8687', kind = 'Space'\nfixture_name = 'temp_space'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_document_multiple_requests(owner_client, request, temp_space, kind, fixture_name):\n        kind_id = request.getfixturevalue(fixture_name)\n        allure.dynamic.title(f'Повторный запрос одного и того же документа (kind={kind})')\n    \n        with allure.step('Создание документа'):\n            resp = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Repeat test doc')\n            )\n>           assert resp.status_code == 200\nE           assert 502 == 200\nE            +  where 502 = <Response [502]>.status_code\n\ntests/test_backend/document/test_get_document.py:111: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761053215690,"stop":1761053215690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761053215690,"stop":1761053215690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761053215690,"stop":1761053215690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761053215690,"stop":1761053215690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761053216831,"stop":1761053217460,"duration":629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1761053222652,"stop":1761053223348,"duration":696},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 502 == 200\n +  where 502 = <Response [502]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f7926bb3d10>\nrequest = <FixtureRequest for <Function test_get_document_multiple_requests[space]>>\ntemp_space = '68f78a260bbcb424d41e8687', kind = 'Space'\nfixture_name = 'temp_space'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_document_multiple_requests(owner_client, request, temp_space, kind, fixture_name):\n        kind_id = request.getfixturevalue(fixture_name)\n        allure.dynamic.title(f'Повторный запрос одного и того же документа (kind={kind})')\n    \n        with allure.step('Создание документа'):\n            resp = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Repeat test doc')\n            )\n>           assert resp.status_code == 200\nE           assert 502 == 200\nE            +  where 502 = <Response [502]>.status_code\n\ntests/test_backend/document/test_get_document.py:111: AssertionError","steps":[{"name":"Создание документа","time":{"start":1761053503602,"stop":1761053503717,"duration":115},"status":"failed","statusMessage":"AssertionError: assert 502 == 200\n +  where 502 = <Response [502]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_document.py\", line 111, in test_get_document_multiple_requests\n    assert resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1761053802116,"stop":1761053802697,"duration":581},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"fixture_name","value":"'temp_space'"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":27,"unknown":0,"total":29},"items":[{"uid":"a0e76101ec55f220","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/a0e76101ec55f220","status":"passed","time":{"start":1761047406670,"stop":1761047407373,"duration":703}},{"uid":"956349558682752a","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/956349558682752a","status":"passed","time":{"start":1760614827933,"stop":1760614829227,"duration":1294}},{"uid":"d677df65e8b48974","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/d677df65e8b48974","status":"passed","time":{"start":1760599632217,"stop":1760599632913,"duration":696}},{"uid":"c3ca50d851a6f669","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/c3ca50d851a6f669","status":"passed","time":{"start":1760535638134,"stop":1760535638762,"duration":628}},{"uid":"e792db7e1ce2e094","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/e792db7e1ce2e094","status":"passed","time":{"start":1760534157034,"stop":1760534158437,"duration":1403}},{"uid":"eed24afde92d31b8","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/eed24afde92d31b8","status":"passed","time":{"start":1760532680844,"stop":1760532681567,"duration":723}},{"uid":"c5c5cdac3b7b3e06","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/c5c5cdac3b7b3e06","status":"passed","time":{"start":1760529488196,"stop":1760529488822,"duration":626}},{"uid":"fc2a3ba439734fb9","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/fc2a3ba439734fb9","status":"passed","time":{"start":1760510901492,"stop":1760510902274,"duration":782}},{"uid":"8b76490fdb77a69d","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/8b76490fdb77a69d","status":"passed","time":{"start":1760449364733,"stop":1760449365349,"duration":616}},{"uid":"acf52d4cf648a636","reportUrl":"https://vaizcom.github.io/autotests/371//#testresult/acf52d4cf648a636","status":"passed","time":{"start":1760447119481,"stop":1760447120141,"duration":660}},{"uid":"955f989a4bc35f7f","reportUrl":"https://vaizcom.github.io/autotests/370//#testresult/955f989a4bc35f7f","status":"passed","time":{"start":1760427954432,"stop":1760427955151,"duration":719}},{"uid":"d07820aa411ff73","reportUrl":"https://vaizcom.github.io/autotests/369//#testresult/d07820aa411ff73","status":"passed","time":{"start":1760360245189,"stop":1760360246027,"duration":838}},{"uid":"4f0494580a8510ff","reportUrl":"https://vaizcom.github.io/autotests/368//#testresult/4f0494580a8510ff","status":"passed","time":{"start":1760342243512,"stop":1760342244179,"duration":667}},{"uid":"5a260d4d98a92591","reportUrl":"https://vaizcom.github.io/autotests/367//#testresult/5a260d4d98a92591","status":"passed","time":{"start":1760101945263,"stop":1760101946137,"duration":874}},{"uid":"5e5abca0e34d42d0","reportUrl":"https://vaizcom.github.io/autotests/366//#testresult/5e5abca0e34d42d0","status":"passed","time":{"start":1760098929930,"stop":1760098930753,"duration":823}},{"uid":"6e52abbcbac06ea0","reportUrl":"https://vaizcom.github.io/autotests/365//#testresult/6e52abbcbac06ea0","status":"passed","time":{"start":1760087385791,"stop":1760087386614,"duration":823}},{"uid":"35f74e5925018570","reportUrl":"https://vaizcom.github.io/autotests/364//#testresult/35f74e5925018570","status":"passed","time":{"start":1760017561962,"stop":1760017562798,"duration":836}},{"uid":"36afe06e7e5e2213","reportUrl":"https://vaizcom.github.io/autotests/363//#testresult/36afe06e7e5e2213","status":"passed","time":{"start":1760014645549,"stop":1760014646191,"duration":642}},{"uid":"f26dc7e9d7d01e63","reportUrl":"https://vaizcom.github.io/autotests/362//#testresult/f26dc7e9d7d01e63","status":"passed","time":{"start":1760013742374,"stop":1760013743216,"duration":842}},{"uid":"b251f27c9add2ad1","reportUrl":"https://vaizcom.github.io/autotests/361//#testresult/b251f27c9add2ad1","status":"passed","time":{"start":1759931697198,"stop":1759931698760,"duration":1562}}]},"tags":["backend"]},"source":"71827ec9114b4552.json","parameterValues":["'temp_space'","'Space'"]}