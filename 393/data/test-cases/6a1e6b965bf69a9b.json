{"uid":"6a1e6b965bf69a9b","name":"Негативный тест: создание задачи с отрицательным индексом (index=-10) Ожидался статус 400","fullName":"tests.test_backend.task_service.create_task.test_task_indexing_in_group#test_create_task_with_negative_index_returns_error","historyId":"6cf7446d635f17b4f38bf64eb9588a8a","time":{"start":1761748650753,"stop":1761748650869,"duration":116},"description":"\n    Негативный тест: создание задачи с отрицательным индексом должно возвращать ошибку по полю index.\n    ","descriptionHtml":"<pre><code>Негативный тест: создание задачи с отрицательным индексом должно возвращать ошибку по полю index.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ожидался code=InvalidForm, получено: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_negative_index_returns_error[-10]>>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nnegative_index = -10\n\n    @allure.parent_suite(\"create_task\")\n    @allure.title(\"Негативный тест: создание задачи с отрицательным индексом должно возвращать ошибку по полю index.\")\n    @pytest.mark.parametrize(\"negative_index\", [-1, -10])\n    def test_create_task_with_negative_index_returns_error(\n        request, main_space, main_board, negative_index\n    ):\n        \"\"\"\n        Негативный тест: создание задачи с отрицательным индексом должно возвращать ошибку по полю index.\n        \"\"\"\n        allure.dynamic.title(f\"Негативный тест: создание задачи с отрицательным индексом (index={negative_index}) Ожидался статус 400\")\n        client = request.getfixturevalue(\"owner_client\")\n        payload = create_task_endpoint(\n            space_id=main_space,\n            board=main_board,\n            name=\"Test negative index\",\n            index=negative_index,\n        )\n        with allure.step(f\"Пробуем создать задачу с index={negative_index}\"):\n            response = client.post(**payload)\n    \n        with allure.step(\"Проверяем структуру и содержание ошибки\"):\n            assert response.status_code == 400, f\"Ожидался статус 400, получено {response.status_code}, ответ: {response.text}\"\n            body = response.json()\n            assert body.get(\"error\"), \"В ответе нет поля 'error'\"\n            error = body[\"error\"]\n>           assert error.get(\"code\") == \"InvalidForm\", f\"Ожидался code=InvalidForm, получено: {error.get('code')}\"\nE           AssertionError: Ожидался code=InvalidForm, получено: JwtDoesNotExits\nE           assert 'JwtDoesNotExits' == 'InvalidForm'\nE             \nE             - InvalidForm\nE             + JwtDoesNotExits\n\ntests/test_backend/task_service/create_task/test_task_indexing_in_group.py:134: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761748498730,"stop":1761748498730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761748498730,"stop":1761748498730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761748498730,"stop":1761748499193,"duration":463},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761748498730,"stop":1761748498730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761748498730,"stop":1761748498730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761748505343,"stop":1761748505721,"duration":378},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761748505721,"stop":1761748506220,"duration":499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1761748509826,"stop":1761748510056,"duration":230},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Негативный тест: создание задачи с отрицательным индексом должно возвращать ошибку по полю index.\n    ","status":"failed","statusMessage":"AssertionError: Ожидался code=InvalidForm, получено: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_negative_index_returns_error[-10]>>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nnegative_index = -10\n\n    @allure.parent_suite(\"create_task\")\n    @allure.title(\"Негативный тест: создание задачи с отрицательным индексом должно возвращать ошибку по полю index.\")\n    @pytest.mark.parametrize(\"negative_index\", [-1, -10])\n    def test_create_task_with_negative_index_returns_error(\n        request, main_space, main_board, negative_index\n    ):\n        \"\"\"\n        Негативный тест: создание задачи с отрицательным индексом должно возвращать ошибку по полю index.\n        \"\"\"\n        allure.dynamic.title(f\"Негативный тест: создание задачи с отрицательным индексом (index={negative_index}) Ожидался статус 400\")\n        client = request.getfixturevalue(\"owner_client\")\n        payload = create_task_endpoint(\n            space_id=main_space,\n            board=main_board,\n            name=\"Test negative index\",\n            index=negative_index,\n        )\n        with allure.step(f\"Пробуем создать задачу с index={negative_index}\"):\n            response = client.post(**payload)\n    \n        with allure.step(\"Проверяем структуру и содержание ошибки\"):\n            assert response.status_code == 400, f\"Ожидался статус 400, получено {response.status_code}, ответ: {response.text}\"\n            body = response.json()\n            assert body.get(\"error\"), \"В ответе нет поля 'error'\"\n            error = body[\"error\"]\n>           assert error.get(\"code\") == \"InvalidForm\", f\"Ожидался code=InvalidForm, получено: {error.get('code')}\"\nE           AssertionError: Ожидался code=InvalidForm, получено: JwtDoesNotExits\nE           assert 'JwtDoesNotExits' == 'InvalidForm'\nE             \nE             - InvalidForm\nE             + JwtDoesNotExits\n\ntests/test_backend/task_service/create_task/test_task_indexing_in_group.py:134: AssertionError","steps":[{"name":"Пробуем создать задачу с index=-10","time":{"start":1761748650753,"stop":1761748650869,"duration":116},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем структуру и содержание ошибки","time":{"start":1761748650869,"stop":1761748650869,"duration":0},"status":"failed","statusMessage":"AssertionError: Ожидался code=InvalidForm, получено: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/test_task_indexing_in_group.py\", line 134, in test_create_task_with_negative_index_returns_error\n    assert error.get(\"code\") == \"InvalidForm\", f\"Ожидался code=InvalidForm, получено: {error.get('code')}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"create_task"},{"name":"tag","value":"backend"},{"name":"suite","value":"test_task_indexing_in_group"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2586-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task_service.create_task.test_task_indexing_in_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"negative_index","value":"-10"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":11},"items":[{"uid":"c516e92654185077","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/c516e92654185077","status":"failed","statusDetails":"AssertionError: Ожидался code=InvalidForm, получено: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761747929136,"stop":1761747929311,"duration":175}},{"uid":"ceddbba694589bae","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ceddbba694589bae","status":"passed","time":{"start":1761747320088,"stop":1761747320387,"duration":299}},{"uid":"934a6e003a8e4cff","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/934a6e003a8e4cff","status":"failed","statusDetails":"AssertionError: Ожидался code=InvalidForm, получено: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761745757394,"stop":1761745757514,"duration":120}},{"uid":"c44a4bd2c9369c36","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c44a4bd2c9369c36","status":"passed","time":{"start":1761577103864,"stop":1761577104053,"duration":189}},{"uid":"bc1bc7850c550187","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/bc1bc7850c550187","status":"passed","time":{"start":1761557667549,"stop":1761557667734,"duration":185}},{"uid":"1110b024b28e65a2","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/1110b024b28e65a2","status":"passed","time":{"start":1761308919209,"stop":1761308919406,"duration":197}},{"uid":"456514b067ea80a","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/456514b067ea80a","status":"passed","time":{"start":1761307099860,"stop":1761307100047,"duration":187}},{"uid":"6038b70cd2cfd553","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/6038b70cd2cfd553","status":"passed","time":{"start":1761137388773,"stop":1761137388973,"duration":200}},{"uid":"5d93d883420594e9","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/5d93d883420594e9","status":"passed","time":{"start":1761136135338,"stop":1761136135548,"duration":210}},{"uid":"ff275823101f516e","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/ff275823101f516e","status":"passed","time":{"start":1761134508777,"stop":1761134508980,"duration":203}}]},"tags":["backend"]},"source":"6a1e6b965bf69a9b.json","parameterValues":["-10"]}