{"uid":"e3d92629d23e3fbf","name":"Проверка доступа к документу в Project для роли guest","fullName":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles#test_get_project_and_space_doc_access_by_roles","historyId":"825b8856908270c2dbf24861e896efc2","time":{"start":1761745690802,"stop":1761745690924,"duration":122},"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\nдля проверки разных типов клиентов и контейнеров документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-guest]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'guest_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7fd401dc9580>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761745632604,"stop":1761745632791,"duration":187},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761745634722,"stop":1761745635157,"duration":435},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761745690801,"stop":1761745690801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-guest]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'guest_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7fd401dc9580>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документу в Project","time":{"start":1761745690802,"stop":1761745690802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Project разными ролями","time":{"start":1761745690802,"stop":1761745690923,"duration":121},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1761745690802,"stop":1761745690923,"duration":121},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761745690931,"stop":1761745690931,"duration":0},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761745690931,"stop":1761745690931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"container_fixture","value":"'main_project'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"3064dbb1bae95dd1","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/3064dbb1bae95dd1","status":"passed","time":{"start":1761576610946,"stop":1761576612563,"duration":1617}},{"uid":"fd973034ac66e86f","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/fd973034ac66e86f","status":"passed","time":{"start":1761557266071,"stop":1761557267680,"duration":1609}},{"uid":"5a97ffc2166ca4be","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/5a97ffc2166ca4be","status":"passed","time":{"start":1761308491694,"stop":1761308492977,"duration":1283}},{"uid":"7938d3e59a48cb7e","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/7938d3e59a48cb7e","status":"passed","time":{"start":1761306642688,"stop":1761306644093,"duration":1405}},{"uid":"870fd15c3874194e","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/870fd15c3874194e","status":"passed","time":{"start":1761136939064,"stop":1761136940439,"duration":1375}},{"uid":"f69c368d38e745d2","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/f69c368d38e745d2","status":"passed","time":{"start":1761135604362,"stop":1761135606511,"duration":2149}},{"uid":"3f405fbe33ea18ff","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/3f405fbe33ea18ff","status":"passed","time":{"start":1761134050012,"stop":1761134051330,"duration":1318}},{"uid":"f185b6da99f8ab76","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/f185b6da99f8ab76","status":"passed","time":{"start":1761128380202,"stop":1761128381810,"duration":1608}},{"uid":"2137dd67c3d9a87c","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/2137dd67c3d9a87c","status":"passed","time":{"start":1761124489851,"stop":1761124492359,"duration":2508}},{"uid":"118a2e008fb1888a","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/118a2e008fb1888a","status":"passed","time":{"start":1761119316978,"stop":1761119318351,"duration":1373}},{"uid":"e584885cb38ef346","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/e584885cb38ef346","status":"passed","time":{"start":1761053352837,"stop":1761053354383,"duration":1546}},{"uid":"44e3c706b8ba082d","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/44e3c706b8ba082d","status":"passed","time":{"start":1761047245022,"stop":1761047246497,"duration":1475}},{"uid":"4a144849c410775c","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/4a144849c410775c","status":"passed","time":{"start":1760614661595,"stop":1760614663130,"duration":1535}},{"uid":"6c162dfdb73a6ee2","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/6c162dfdb73a6ee2","status":"passed","time":{"start":1760599460798,"stop":1760599463159,"duration":2361}},{"uid":"91683b6871dd63ec","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/91683b6871dd63ec","status":"passed","time":{"start":1760535490612,"stop":1760535492612,"duration":2000}},{"uid":"45ae3fb57212a03f","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/45ae3fb57212a03f","status":"passed","time":{"start":1760533966699,"stop":1760533968741,"duration":2042}},{"uid":"5943ae1dc2b876e6","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/5943ae1dc2b876e6","status":"passed","time":{"start":1760532526951,"stop":1760532528236,"duration":1285}},{"uid":"84b8e3bfc34b4ca7","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/84b8e3bfc34b4ca7","status":"passed","time":{"start":1760529343144,"stop":1760529345677,"duration":2533}},{"uid":"6e3099d042c1f3e7","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/6e3099d042c1f3e7","status":"passed","time":{"start":1760510730831,"stop":1760510732709,"duration":1878}},{"uid":"ed1aeceb13cebfcd","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/ed1aeceb13cebfcd","status":"passed","time":{"start":1760449234641,"stop":1760449235930,"duration":1289}}]},"tags":["backend"]},"source":"e3d92629d23e3fbf.json","parameterValues":["'guest_client'","'main_project'","200","'Project'"]}