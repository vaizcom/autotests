{"uid":"c989d74c9a9131ab","name":"Сортировка документов по createdAt (kind=Member)","fullName":"tests.test_backend.document.test_get_documents#test_documents_sorted_by_created_at","historyId":"bc2f6f73d9bfb2ed0b599240747a8401","time":{"start":1759837460608,"stop":1759837460779,"duration":171},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\nrequest = <FixtureRequest for <Function test_documents_sorted_by_created_at[member]>>\ntemp_space = '68e4fbe2e49ce50caff67b74', kind = 'Member'\nfixture_name = 'temp_member'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_documents_sorted_by_created_at(owner_client, request, temp_space, kind, fixture_name):\n        kind_id = request.getfixturevalue(fixture_name)\n        allure.dynamic.title(f'Сортировка документов по createdAt (kind={kind})')\n    \n        with allure.step('Создание документов с небольшими задержками'):\n            titles = ['Doc A', 'Doc B', 'Doc C']\n            for title in titles:\n                response = owner_client.post(\n                    **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title=title)\n                )\n>               assert response.status_code == 200\nE               assert 503 == 200\nE                +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_documents.py:234: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_member","time":{"start":1759837202743,"stop":1759837203578,"duration":835},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\nrequest = <FixtureRequest for <Function test_documents_sorted_by_created_at[member]>>\ntemp_space = '68e4fbe2e49ce50caff67b74', kind = 'Member'\nfixture_name = 'temp_member'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_documents_sorted_by_created_at(owner_client, request, temp_space, kind, fixture_name):\n        kind_id = request.getfixturevalue(fixture_name)\n        allure.dynamic.title(f'Сортировка документов по createdAt (kind={kind})')\n    \n        with allure.step('Создание документов с небольшими задержками'):\n            titles = ['Doc A', 'Doc B', 'Doc C']\n            for title in titles:\n                response = owner_client.post(\n                    **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title=title)\n                )\n>               assert response.status_code == 200\nE               assert 503 == 200\nE                +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_documents.py:234: AssertionError","steps":[{"name":"Создание документов с небольшими задержками","time":{"start":1759837460608,"stop":1759837460778,"duration":170},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_documents.py\", line 234, in test_documents_sorted_by_created_at\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_member::0","time":{"start":1759837469358,"stop":1759837469358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_documents"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_documents"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"fixture_name","value":"'temp_member'"},{"name":"kind","value":"'Member'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"de43982e644c2480","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/de43982e644c2480","status":"passed","time":{"start":1759836325338,"stop":1759836329588,"duration":4250}},{"uid":"f888cc1528204762","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/f888cc1528204762","status":"passed","time":{"start":1759835669753,"stop":1759835673623,"duration":3870}},{"uid":"a83a9e4771757500","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/a83a9e4771757500","status":"passed","time":{"start":1759834789230,"stop":1759834793332,"duration":4102}}]},"tags":["backend"]},"source":"c989d74c9a9131ab.json","parameterValues":["'temp_member'","'Member'"]}