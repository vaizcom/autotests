{"uid":"d24010286d51a311","name":"Проверка доступа к документу в Project для роли manager","fullName":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles#test_get_project_and_space_doc_access_by_roles","historyId":"dfb0efc46edc2e499ddb8749e1cf0015","time":{"start":1761899971257,"stop":1761899971430,"duration":173},"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\nдля проверки разных типов клиентов и контейнеров документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-manager]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'manager_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f2708ab8e00>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761899890641,"stop":1761899890641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761899890642,"stop":1761899891240,"duration":598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761899894466,"stop":1761899894790,"duration":324},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761899894790,"stop":1761899895081,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761899895081,"stop":1761899895654,"duration":573},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761899895860,"stop":1761899896156,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761899971257,"stop":1761899971257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-manager]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'manager_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f2708ab8e00>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документу в Project","time":{"start":1761899971257,"stop":1761899971257,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Project разными ролями","time":{"start":1761899971257,"stop":1761899971430,"duration":173},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1761899971257,"stop":1761899971430,"duration":173},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761899971438,"stop":1761899971438,"duration":0},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761899971438,"stop":1761899971438,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2554-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"container_fixture","value":"'main_project'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":49},"items":[{"uid":"c17712a0f5a2b264","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/c17712a0f5a2b264","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835006452,"stop":1761835006579,"duration":127}},{"uid":"214bd84a72b12450","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/214bd84a72b12450","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834572364,"stop":1761834572538,"duration":174}},{"uid":"1fe332a73d45069d","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/1fe332a73d45069d","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833407273,"stop":1761833407461,"duration":188}},{"uid":"df68cf151e235fde","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/df68cf151e235fde","status":"passed","time":{"start":1761821608117,"stop":1761821609347,"duration":1230}},{"uid":"431558aa78e978aa","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/431558aa78e978aa","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818703574,"stop":1761818703756,"duration":182}},{"uid":"d2d9a4435b21d98e","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/d2d9a4435b21d98e","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748573057,"stop":1761748573181,"duration":124}},{"uid":"ddc2bcdca2609e63","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ddc2bcdca2609e63","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747841301,"stop":1761747841484,"duration":183}},{"uid":"b82fcf2f70057a87","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/b82fcf2f70057a87","status":"passed","time":{"start":1761746752936,"stop":1761746754519,"duration":1583}},{"uid":"353b5fbba830b3","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/353b5fbba830b3","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745690540,"stop":1761745690662,"duration":122}},{"uid":"786830f5dd18e956","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/786830f5dd18e956","status":"passed","time":{"start":1761576606570,"stop":1761576607970,"duration":1400}},{"uid":"7a97c0e4b14e6629","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/7a97c0e4b14e6629","status":"passed","time":{"start":1761557262055,"stop":1761557263342,"duration":1287}},{"uid":"acb864243e0773ca","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/acb864243e0773ca","status":"passed","time":{"start":1761308487238,"stop":1761308488589,"duration":1351}},{"uid":"8d436a82021bc920","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/8d436a82021bc920","status":"passed","time":{"start":1761306637824,"stop":1761306639422,"duration":1598}},{"uid":"a52ecbc93612ff3","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/a52ecbc93612ff3","status":"passed","time":{"start":1761136934783,"stop":1761136936190,"duration":1407}},{"uid":"d95a1707788b9132","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/d95a1707788b9132","status":"passed","time":{"start":1761135598326,"stop":1761135599906,"duration":1580}},{"uid":"432c66afbbc80dbc","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/432c66afbbc80dbc","status":"passed","time":{"start":1761134045881,"stop":1761134047274,"duration":1393}},{"uid":"37f9628854dc0da2","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/37f9628854dc0da2","status":"passed","time":{"start":1761128374718,"stop":1761128376831,"duration":2113}},{"uid":"2d5246638c6a246b","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/2d5246638c6a246b","status":"passed","time":{"start":1761124484702,"stop":1761124486428,"duration":1726}},{"uid":"b1edbdc4b6c69da1","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/b1edbdc4b6c69da1","status":"passed","time":{"start":1761119311953,"stop":1761119313990,"duration":2037}},{"uid":"b9b12d041c0ac9fd","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/b9b12d041c0ac9fd","status":"passed","time":{"start":1761053348529,"stop":1761053349837,"duration":1308}}]},"tags":["backend"]},"source":"d24010286d51a311.json","parameterValues":["'manager_client'","'main_project'","200","'Project'"]}