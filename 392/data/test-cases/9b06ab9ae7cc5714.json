{"uid":"9b06ab9ae7cc5714","name":"Создание Space-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_space_doc_access_by_roles","historyId":"d9ef71fb375b91e3448c594aa8e7af45","time":{"start":1761745643063,"stop":1761745643191,"duration":128},"description":"\n    Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n    Тест выполняет следующие шаги для каждой роли:\n    1. Создает Space-документ с использованием предоставленной клиентской роли.\n    2. Проверяет, что статус ответа соответствует ожидаемому результату.\n    3. Если создание документа успешно (статус 200):\n       - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n       - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n    ","descriptionHtml":"<pre><code>Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\nТест выполняет следующие шаги для каждой роли:\n1. Создает Space-документ с использованием предоставленной клиентской роли.\n2. Проверяет, что статус ответа соответствует ожидаемому результату.\n3. Если создание документа успешно (статус 200):\n   - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n   - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n        Тест выполняет следующие шаги для каждой роли:\n        1. Создает Space-документ с использованием предоставленной клиентской роли.\n        2. Проверяет, что статус ответа соответствует ожидаемому результату.\n        3. Если создание документа успешно (статус 200):\n           - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n           - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n    Тест выполняет следующие шаги для каждой роли:\n    1. Создает Space-документ с использованием предоставленной клиентской роли.\n    2. Проверяет, что статус ответа соответствует ожидаемому результату.\n    3. Если создание документа успешно (статус 200):\n       - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n       - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n    ","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n        Тест выполняет следующие шаги для каждой роли:\n        1. Создает Space-документ с использованием предоставленной клиентской роли.\n        2. Проверяет, что статус ответа соответствует ожидаемому результату.\n        3. Если создание документа успешно (статус 200):\n           - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n           - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","steps":[{"name":"owner создаёт Space-документ, 200","time":{"start":1761745643063,"stop":1761745643191,"duration":128},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 41, in test_create_and_archive_space_doc_access_by_roles\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"c4c36dc60ce64aec","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c4c36dc60ce64aec","status":"passed","time":{"start":1761576509806,"stop":1761576510307,"duration":501}},{"uid":"9dd902891619be9b","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/9dd902891619be9b","status":"passed","time":{"start":1761557166677,"stop":1761557167154,"duration":477}},{"uid":"20f6a51a8af40034","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/20f6a51a8af40034","status":"passed","time":{"start":1761308390664,"stop":1761308391320,"duration":656}},{"uid":"4b4a0194d10a1422","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/4b4a0194d10a1422","status":"passed","time":{"start":1761306538382,"stop":1761306538852,"duration":470}},{"uid":"59648e8de87ab4df","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/59648e8de87ab4df","status":"passed","time":{"start":1761136833800,"stop":1761136834271,"duration":471}},{"uid":"98c8e633fd9a5b89","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/98c8e633fd9a5b89","status":"passed","time":{"start":1761135488465,"stop":1761135489005,"duration":540}},{"uid":"8de5d08024ab4a1b","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/8de5d08024ab4a1b","status":"passed","time":{"start":1761133949992,"stop":1761133950669,"duration":677}},{"uid":"dc50a5033a581069","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/dc50a5033a581069","status":"passed","time":{"start":1761128253210,"stop":1761128253763,"duration":553}},{"uid":"f01a402f60b959a5","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/f01a402f60b959a5","status":"passed","time":{"start":1761124359863,"stop":1761124361044,"duration":1181}},{"uid":"28a39f5183fc6464","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/28a39f5183fc6464","status":"passed","time":{"start":1761119207759,"stop":1761119208229,"duration":470}},{"uid":"9ee39b7ef4956efd","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/9ee39b7ef4956efd","status":"passed","time":{"start":1761053249618,"stop":1761053250661,"duration":1043}},{"uid":"442b8a6c27768ae6","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/442b8a6c27768ae6","status":"passed","time":{"start":1761047138303,"stop":1761047139116,"duration":813}},{"uid":"42108606cced948b","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/42108606cced948b","status":"passed","time":{"start":1760614545675,"stop":1760614546213,"duration":538}},{"uid":"1d44420c26fbfc55","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/1d44420c26fbfc55","status":"passed","time":{"start":1760599348169,"stop":1760599348919,"duration":750}},{"uid":"118e0df15ec1621f","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/118e0df15ec1621f","status":"passed","time":{"start":1760535383513,"stop":1760535384034,"duration":521}},{"uid":"9958d73161098d99","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/9958d73161098d99","status":"passed","time":{"start":1760533828096,"stop":1760533828694,"duration":598}},{"uid":"412707e82d7cff9e","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/412707e82d7cff9e","status":"passed","time":{"start":1760532419140,"stop":1760532419611,"duration":471}},{"uid":"7b1c0b626d4bb0eb","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/7b1c0b626d4bb0eb","status":"passed","time":{"start":1760529241783,"stop":1760529242541,"duration":758}},{"uid":"4e6f54491adb4b72","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/4e6f54491adb4b72","status":"passed","time":{"start":1760510609940,"stop":1760510610516,"duration":576}},{"uid":"5d2328cf514a0a56","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/5d2328cf514a0a56","status":"passed","time":{"start":1760449137548,"stop":1760449138190,"duration":642}}]},"tags":["backend"]},"source":"9b06ab9ae7cc5714.json","parameterValues":["'owner_client'","200"]}