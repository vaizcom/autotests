{"uid":"8f2347ffae715a9","name":"Получение соседей Space-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_space_doc_siblings_access_by_roles","historyId":"29ab9b704ae2807dcbabe08d8f5724a7","time":{"start":1752499346798,"stop":1752499347155,"duration":357},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Получение соседей Space-документа для роли {role}')\n    \n        doc_ids = []\n        with allure.step(f'{role} создаёт три Space-документа для проверки соседей'):\n            for index in range(3):\n                title = f'{current_date}_{role}_Sibling Test Doc {index}'\n                create_resp = api_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                if create_resp.status_code != 200:\n                    with allure.step(f'Не удалось создать документ {index}, статус {create_resp.status_code}'):\n>                       assert expected_status == 403\nE                       assert 200 == 403\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:42: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752499197584,"stop":1752499198460,"duration":876},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752499198461,"stop":1752499199843,"duration":1382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752499199845,"stop":1752499200441,"duration":596},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Получение соседей Space-документа для роли {role}')\n    \n        doc_ids = []\n        with allure.step(f'{role} создаёт три Space-документа для проверки соседей'):\n            for index in range(3):\n                title = f'{current_date}_{role}_Sibling Test Doc {index}'\n                create_resp = api_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                if create_resp.status_code != 200:\n                    with allure.step(f'Не удалось создать документ {index}, статус {create_resp.status_code}'):\n>                       assert expected_status == 403\nE                       assert 200 == 403\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:42: AssertionError","steps":[{"name":"owner создаёт три Space-документа для проверки соседей","time":{"start":1752499346798,"stop":1752499347154,"duration":356},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 42, in test_get_space_doc_siblings_access_by_roles\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ 0, статус 400","time":{"start":1752499347154,"stop":1752499347154,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 42, in test_get_space_doc_siblings_access_by_roles\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2610-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":38,"unknown":0,"total":42},"items":[{"uid":"ef21a853d837c587","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/ef21a853d837c587","status":"passed","time":{"start":1752498283277,"stop":1752498285140,"duration":1863}},{"uid":"2b94710ea1a50d31","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/2b94710ea1a50d31","status":"passed","time":{"start":1752496631897,"stop":1752496634241,"duration":2344}},{"uid":"8dc2449adb19bca4","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/8dc2449adb19bca4","status":"passed","time":{"start":1752481734873,"stop":1752481736693,"duration":1820}},{"uid":"842516d6720207c7","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/842516d6720207c7","status":"passed","time":{"start":1752479777046,"stop":1752479780142,"duration":3096}},{"uid":"a1125a3019f647b4","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/a1125a3019f647b4","status":"passed","time":{"start":1752477928085,"stop":1752477930151,"duration":2066}},{"uid":"ba3f465254e88ee9","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/ba3f465254e88ee9","status":"passed","time":{"start":1752236794235,"stop":1752236796275,"duration":2040}},{"uid":"7b69d63c4fcddb57","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/7b69d63c4fcddb57","status":"passed","time":{"start":1752236162554,"stop":1752236164603,"duration":2049}},{"uid":"19231f6a93b93d62","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/19231f6a93b93d62","status":"passed","time":{"start":1752235411430,"stop":1752235414391,"duration":2961}},{"uid":"7f2c47431ebd0b30","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/7f2c47431ebd0b30","status":"failed","statusDetails":"AssertionError: Некорректный правый сосед\nassert '6870fd724aff74363a1c8b53' == '6870fd724aff74363a1c8b70'\n  \n  - 6870fd724aff74363a1c8b70\n  ?                       ^^\n  + 6870fd724aff74363a1c8b53\n  ?                       ^^","time":{"start":1752235377582,"stop":1752235379122,"duration":1540}},{"uid":"bcdd3d19ed770684","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/bcdd3d19ed770684","status":"passed","time":{"start":1752234429547,"stop":1752234432599,"duration":3052}},{"uid":"6bbe1ff1420d1a1","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/6bbe1ff1420d1a1","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1752234399867,"stop":1752234400780,"duration":913}},{"uid":"7d1d601fd65caf4c","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/7d1d601fd65caf4c","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1752233584915,"stop":1752233585280,"duration":365}},{"uid":"5af536593a9245a4","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/5af536593a9245a4","status":"passed","time":{"start":1752232644191,"stop":1752232646148,"duration":1957}},{"uid":"5696a3c9155557c7","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/5696a3c9155557c7","status":"passed","time":{"start":1752232182099,"stop":1752232184191,"duration":2092}},{"uid":"6160f193cbe25327","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/6160f193cbe25327","status":"passed","time":{"start":1752223577522,"stop":1752223579211,"duration":1689}},{"uid":"a1b7f12c2d5d806f","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/a1b7f12c2d5d806f","status":"passed","time":{"start":1752218316681,"stop":1752218318442,"duration":1761}},{"uid":"84b1ea7ab13f76e6","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/84b1ea7ab13f76e6","status":"passed","time":{"start":1752151083411,"stop":1752151085519,"duration":2108}},{"uid":"a72442af0132de83","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/a72442af0132de83","status":"passed","time":{"start":1752148933816,"stop":1752148935630,"duration":1814}},{"uid":"96e0711a458ebcd","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/96e0711a458ebcd","status":"passed","time":{"start":1752138408944,"stop":1752138410916,"duration":1972}},{"uid":"87edb0ef3c69951f","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/87edb0ef3c69951f","status":"passed","time":{"start":1752137283688,"stop":1752137285648,"duration":1960}}]},"tags":["backend"]},"source":"8f2347ffae715a9.json","parameterValues":["'owner_client'","200"]}