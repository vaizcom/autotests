{"uid":"1aa9c6ad6ffccc75","name":"test_archive_all_documents[space_docs]","fullName":"tests.test_backend.document.test_archive_all_docs#test_archive_all_documents","historyId":"55aa288a9678db42226d57e49733f775","time":{"start":1761833477824,"stop":1761833478005,"duration":181},"description":"\n    Проверяем удаление всех документов в пространстве и проекте.\n    ","descriptionHtml":"<pre><code>Проверяем удаление всех документов в пространстве и проекте.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_all_documents[space_docs]>>\nowner_client = <tests.core.client.APIClient object at 0x7f7d8b81ce50>\nkind = 'Space', container_fixture = 'main_space'\nmain_space = '6866309d85fb8d104544a61e'\nexcluded_documents = {'68a5b3f4a136528e28f58d65', '68a81156e503a7ab645236c1'}\n\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_archive_all_documents(request, owner_client, kind, container_fixture, main_space, excluded_documents):\n        \"\"\"\n        Проверяем удаление всех документов в пространстве и проекте.\n        \"\"\"\n        with allure.step(f'Подготовка к удалению документов в {kind}'):\n            container_id = request.getfixturevalue(container_fixture)\n    \n        with allure.step(f'Получение списка документов в {kind}'):\n            docs_resp = owner_client.post(**get_documents_endpoint(space_id=main_space, kind=kind, kind_id=container_id))\n>           assert docs_resp.status_code == 200, 'Не удалось получить список документов'\nE           AssertionError: Не удалось получить список документов\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/test_archive_all_docs.py:36: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761833315304,"stop":1761833315305,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761833315304,"stop":1761833315304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761833315305,"stop":1761833315305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761833315305,"stop":1761833315978,"duration":673},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761833315305,"stop":1761833315305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761833319617,"stop":1761833319920,"duration":303},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761833319920,"stop":1761833320230,"duration":310},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project_doc","time":{"start":1761833475248,"stop":1761833475248,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space_doc","time":{"start":1761833475248,"stop":1761833475248,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"excluded_documents","time":{"start":1761833477823,"stop":1761833477824,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем удаление всех документов в пространстве и проекте.\n    ","status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_all_documents[space_docs]>>\nowner_client = <tests.core.client.APIClient object at 0x7f7d8b81ce50>\nkind = 'Space', container_fixture = 'main_space'\nmain_space = '6866309d85fb8d104544a61e'\nexcluded_documents = {'68a5b3f4a136528e28f58d65', '68a81156e503a7ab645236c1'}\n\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_archive_all_documents(request, owner_client, kind, container_fixture, main_space, excluded_documents):\n        \"\"\"\n        Проверяем удаление всех документов в пространстве и проекте.\n        \"\"\"\n        with allure.step(f'Подготовка к удалению документов в {kind}'):\n            container_id = request.getfixturevalue(container_fixture)\n    \n        with allure.step(f'Получение списка документов в {kind}'):\n            docs_resp = owner_client.post(**get_documents_endpoint(space_id=main_space, kind=kind, kind_id=container_id))\n>           assert docs_resp.status_code == 200, 'Не удалось получить список документов'\nE           AssertionError: Не удалось получить список документов\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/test_archive_all_docs.py:36: AssertionError","steps":[{"name":"Подготовка к удалению документов в Space","time":{"start":1761833477824,"stop":1761833477824,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получение списка документов в Space","time":{"start":1761833477824,"stop":1761833478004,"duration":180},"status":"failed","statusMessage":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_archive_all_docs.py\", line 36, in test_archive_all_documents\n    assert docs_resp.status_code == 200, 'Не удалось получить список документов'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_archive_all_docs"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2570-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_archive_all_docs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"container_fixture","value":"'main_space'"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":46},"items":[{"uid":"ae1e235569b6054f","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/ae1e235569b6054f","status":"passed","time":{"start":1761821705945,"stop":1761821709538,"duration":3593}},{"uid":"1b86a475a3777d2d","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/1b86a475a3777d2d","status":"failed","statusDetails":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818766050,"stop":1761818766225,"duration":175}},{"uid":"d962477df95cae68","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/d962477df95cae68","status":"failed","statusDetails":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748629989,"stop":1761748630113,"duration":124}},{"uid":"815cc642ad32c06d","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/815cc642ad32c06d","status":"failed","statusDetails":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747905399,"stop":1761747905583,"duration":184}},{"uid":"a250b8ae5c2ad4d1","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/a250b8ae5c2ad4d1","status":"passed","time":{"start":1761746870991,"stop":1761746873636,"duration":2645}},{"uid":"ac3ea934c71e6a8d","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/ac3ea934c71e6a8d","status":"failed","statusDetails":"AssertionError: Не удалось получить список документов\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745738006,"stop":1761745738127,"duration":121}},{"uid":"c850e9a4cbdc5725","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c850e9a4cbdc5725","status":"passed","time":{"start":1761576711982,"stop":1761576712233,"duration":251}},{"uid":"6282452010b29506","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/6282452010b29506","status":"passed","time":{"start":1761557362437,"stop":1761557362616,"duration":179}},{"uid":"f28e8e065861b3b7","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/f28e8e065861b3b7","status":"passed","time":{"start":1761308586586,"stop":1761308586784,"duration":198}},{"uid":"97e6cc9f3b599530","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/97e6cc9f3b599530","status":"passed","time":{"start":1761306748038,"stop":1761306748251,"duration":213}},{"uid":"5f6fb901268d5648","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/5f6fb901268d5648","status":"passed","time":{"start":1761137041023,"stop":1761137041234,"duration":211}},{"uid":"f16821568bcb5d85","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/f16821568bcb5d85","status":"passed","time":{"start":1761135718149,"stop":1761135718400,"duration":251}},{"uid":"4349f16a0c00220a","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/4349f16a0c00220a","status":"passed","time":{"start":1761134145595,"stop":1761134145786,"duration":191}},{"uid":"ab0bc69f6397cfdb","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/ab0bc69f6397cfdb","status":"passed","time":{"start":1761128506527,"stop":1761128506804,"duration":277}},{"uid":"81ffdde5393ea394","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/81ffdde5393ea394","status":"passed","time":{"start":1761124618963,"stop":1761124619228,"duration":265}},{"uid":"bafe31483c17289a","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/bafe31483c17289a","status":"passed","time":{"start":1761119431499,"stop":1761119431700,"duration":201}},{"uid":"f71025888d34b362","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/f71025888d34b362","status":"passed","time":{"start":1761053452181,"stop":1761053452378,"duration":197}},{"uid":"d279effb7c773dfe","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/d279effb7c773dfe","status":"passed","time":{"start":1761047354947,"stop":1761047355170,"duration":223}},{"uid":"f9931b9ad0f2c9cb","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/f9931b9ad0f2c9cb","status":"passed","time":{"start":1760614775572,"stop":1760614775809,"duration":237}},{"uid":"49169cd2940d0e27","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/49169cd2940d0e27","status":"passed","time":{"start":1760599582534,"stop":1760599582750,"duration":216}}]},"tags":["backend"]},"source":"1aa9c6ad6ffccc75.json","parameterValues":["'main_space'","'Space'"]}