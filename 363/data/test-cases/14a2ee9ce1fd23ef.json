{"uid":"14a2ee9ce1fd23ef","name":"test_task_indexing_in_group[ten_tasks_index_9]","fullName":"tests.test_backend.task.test_task_indexing_in_group#test_task_indexing_in_group","historyId":"2d880dca1fa2e785ac30b37ef50cac70","time":{"start":1760014843839,"stop":1760014856960,"duration":13121},"description":"\n    Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n    ","descriptionHtml":"<pre><code>Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e77cc62b66e4965012913b']","statusTrace":"request = <FixtureRequest for <Function test_task_indexing_in_group[ten_tasks_index_9]>>\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7f9f4c054900>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ninitial_tasks = 10, create_index = 9, expected_position = 9\ntitle = 'Группа из 10 тасок, индекс=9'\n\n    @pytest.mark.parametrize(\n        \"initial_tasks, create_index, expected_position, title\",\n        [\n            (0, None, 0, \"Пустая группа, индекс не указан\"),\n            (0, 0, 0, \"Пустая группа, индекс=0\"),\n            (0, 10, 0, \"Пустая группа, индекс=10\"),\n            (10, 2, 2, \"Группа из 10 тасок, индекс=2\"),\n            (10, 999, 10, \"Группа из 10 тасок, индекс=999\"),\n            (10, 0, 0, \"Группа из 10 тасок, индекс=0\"),\n            (10, 10,10, \"Группа из 10 тасок, индекс=10\"),\n            (10,9,9, \"Группа из 10 тасок, индекс=9\")\n        ],\n        ids=[\n            \"empty_group_no_index\",\n            \"empty_group_index_0\",\n            \"empty_group_index_10\",\n            \"ten_tasks_index_2\",\n            \"ten_tasks_index_999\",\n            \"ten_tasks_index_0\",\n            \"ten_tasks_index_10\",\n            \"ten_tasks_index_9\"\n        ]\n    )\n    def test_task_indexing_in_group(\n        request, create_task_in_main, main_space, main_board, initial_tasks, create_index, expected_position, title,\n    ):\n        \"\"\"\n        Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n        \"\"\"\n    \n        with allure.step(\"Получить ID первой группы на доске\"):\n            client = request.getfixturevalue(\"owner_client\")\n            resp = client.post(**get_board_endpoint(main_board, main_space))\n            group_id = resp.json()[\"payload\"][\"board\"][\"groups\"][0][\"_id\"]\n    \n        with allure.step(\"Очистить все задачи в выбранной группе\"):\n            safe_delete_all_tasks_in_group(client, main_board, main_space, group_id)\n>           wait_group_empty(client, main_board, main_space, group_id)\n\ntests/test_backend/task/test_task_indexing_in_group.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nclient = <tests.core.client.APIClient object at 0x7f9f4dcaf290>\nboard_id = '6866731185fb8d104544e826', space_id = '6866309d85fb8d104544a61e'\ngroup_id = '6866731185fb8d104544e827', timeout = 10, poll_interval = 0.5\n\n    def wait_group_empty(client, board_id, space_id, group_id, timeout=10, poll_interval=0.5):\n        \"\"\"Ожидает, пока группа не станет пустой, либо истекает timeout (сек)\"\"\"\n        start_time = time.time()\n        while time.time() - start_time < timeout:\n            board = client.post(**get_board_endpoint(board_id, space_id)).json()[\"payload\"][\"board\"]\n            tasks = board[\"taskOrderByGroups\"].get(group_id, [])\n            if not tasks:\n                return\n            time.sleep(poll_interval)\n        # Если tasks не пуст — значит, что-то не так\n>       raise AssertionError(f\"Группа {group_id} осталась не пустой: {tasks}\")\nE       AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e77cc62b66e4965012913b']\n\ntests/test_backend/task/utils.py:213: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1760014348101,"stop":1760014348101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1760014348102,"stop":1760014348102,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1760014348102,"stop":1760014348102,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1760014348102,"stop":1760014348357,"duration":255},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1760014348102,"stop":1760014348102,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1760014348357,"stop":1760014348807,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1760014348807,"stop":1760014349228,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1760014349229,"stop":1760014349676,"duration":447},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1760014353057,"stop":1760014353259,"duration":202},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_task_in_main","time":{"start":1760014843839,"stop":1760014843839,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n    ","status":"failed","statusMessage":"AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e77cc62b66e4965012913b']","statusTrace":"request = <FixtureRequest for <Function test_task_indexing_in_group[ten_tasks_index_9]>>\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7f9f4c054900>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ninitial_tasks = 10, create_index = 9, expected_position = 9\ntitle = 'Группа из 10 тасок, индекс=9'\n\n    @pytest.mark.parametrize(\n        \"initial_tasks, create_index, expected_position, title\",\n        [\n            (0, None, 0, \"Пустая группа, индекс не указан\"),\n            (0, 0, 0, \"Пустая группа, индекс=0\"),\n            (0, 10, 0, \"Пустая группа, индекс=10\"),\n            (10, 2, 2, \"Группа из 10 тасок, индекс=2\"),\n            (10, 999, 10, \"Группа из 10 тасок, индекс=999\"),\n            (10, 0, 0, \"Группа из 10 тасок, индекс=0\"),\n            (10, 10,10, \"Группа из 10 тасок, индекс=10\"),\n            (10,9,9, \"Группа из 10 тасок, индекс=9\")\n        ],\n        ids=[\n            \"empty_group_no_index\",\n            \"empty_group_index_0\",\n            \"empty_group_index_10\",\n            \"ten_tasks_index_2\",\n            \"ten_tasks_index_999\",\n            \"ten_tasks_index_0\",\n            \"ten_tasks_index_10\",\n            \"ten_tasks_index_9\"\n        ]\n    )\n    def test_task_indexing_in_group(\n        request, create_task_in_main, main_space, main_board, initial_tasks, create_index, expected_position, title,\n    ):\n        \"\"\"\n        Тест проверяет корректность позиционирования задач при создании новой задачи в группе на доске (board).\n        \"\"\"\n    \n        with allure.step(\"Получить ID первой группы на доске\"):\n            client = request.getfixturevalue(\"owner_client\")\n            resp = client.post(**get_board_endpoint(main_board, main_space))\n            group_id = resp.json()[\"payload\"][\"board\"][\"groups\"][0][\"_id\"]\n    \n        with allure.step(\"Очистить все задачи в выбранной группе\"):\n            safe_delete_all_tasks_in_group(client, main_board, main_space, group_id)\n>           wait_group_empty(client, main_board, main_space, group_id)\n\ntests/test_backend/task/test_task_indexing_in_group.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nclient = <tests.core.client.APIClient object at 0x7f9f4dcaf290>\nboard_id = '6866731185fb8d104544e826', space_id = '6866309d85fb8d104544a61e'\ngroup_id = '6866731185fb8d104544e827', timeout = 10, poll_interval = 0.5\n\n    def wait_group_empty(client, board_id, space_id, group_id, timeout=10, poll_interval=0.5):\n        \"\"\"Ожидает, пока группа не станет пустой, либо истекает timeout (сек)\"\"\"\n        start_time = time.time()\n        while time.time() - start_time < timeout:\n            board = client.post(**get_board_endpoint(board_id, space_id)).json()[\"payload\"][\"board\"]\n            tasks = board[\"taskOrderByGroups\"].get(group_id, [])\n            if not tasks:\n                return\n            time.sleep(poll_interval)\n        # Если tasks не пуст — значит, что-то не так\n>       raise AssertionError(f\"Группа {group_id} осталась не пустой: {tasks}\")\nE       AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e77cc62b66e4965012913b']\n\ntests/test_backend/task/utils.py:213: AssertionError","steps":[{"name":"Получить ID первой группы на доске","time":{"start":1760014843839,"stop":1760014844074,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Очистить все задачи в выбранной группе","time":{"start":1760014844074,"stop":1760014856959,"duration":12885},"status":"failed","statusMessage":"AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e77cc62b66e4965012913b']\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/test_task_indexing_in_group.py\", line 47, in test_task_indexing_in_group\n    wait_group_empty(client, main_board, main_space, group_id)\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/utils.py\", line 213, in wait_group_empty\n    raise AssertionError(f\"Группа {group_id} осталась не пустой: {tasks}\")\n","steps":[{"name":"Удаляем все задачи из группы 6866731185fb8d104544e827 (безаварийно)","time":{"start":1760014844074,"stop":1760014846929,"duration":2855},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"d2fb6a783a73f8f9","name":"stdout","source":"d2fb6a783a73f8f9.txt","type":"text/plain","size":249}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.task"},{"name":"suite","value":"test_task_indexing_in_group"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2591-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task.test_task_indexing_in_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"create_index","value":"9"},{"name":"expected_position","value":"9"},{"name":"initial_tasks","value":"10"},{"name":"title","value":"'Группа из 10 тасок, индекс=9'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":5},"items":[{"uid":"67a375e45c0da7fc","reportUrl":"https://vaizcom.github.io/autotests/362//#testresult/67a375e45c0da7fc","status":"failed","statusDetails":"AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e77cc62b66e4965012913b']","time":{"start":1760013954585,"stop":1760013968739,"duration":14154}},{"uid":"d43e5bfa3026354a","reportUrl":"https://vaizcom.github.io/autotests/361//#testresult/d43e5bfa3026354a","status":"passed","time":{"start":1759931856777,"stop":1759931868554,"duration":11777}},{"uid":"3819edf709b12b74","reportUrl":"https://vaizcom.github.io/autotests/360//#testresult/3819edf709b12b74","status":"passed","time":{"start":1759916123128,"stop":1759916135317,"duration":12189}},{"uid":"22aad1d91ad09198","reportUrl":"https://vaizcom.github.io/autotests/359//#testresult/22aad1d91ad09198","status":"failed","statusDetails":"AssertionError: Группа 6866731185fb8d104544e827 осталась не пустой: ['68e615e40354864d83fed360']","time":{"start":1759909417572,"stop":1759909430752,"duration":13180}}]},"tags":["backend"]},"source":"14a2ee9ce1fd23ef.json","parameterValues":["9","9","10","'Группа из 10 тасок, индекс=9'"]}