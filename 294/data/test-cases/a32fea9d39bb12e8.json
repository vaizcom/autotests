{"uid":"a32fea9d39bb12e8","name":"Создание Space-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_space_doc_access_by_roles","historyId":"6218d7c20799058e43d1acaef63ed495","time":{"start":1752499327684,"stop":1752499329871,"duration":2187},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n            assert resp.status_code == expected_status\n    \n            if expected_status == 200:\n                doc_id = resp.json()['payload']['document']['_id']\n                with allure.step('Созданный Space-документ содержит title'):\n                    assert resp.json()['payload']['document']['title'] == title\n    \n                with allure.step('Архивация Space-документа'):\n                    archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>                   assert archive_resp.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"main_client","time":{"start":1752499197583,"stop":1752499198409,"duration":826},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752499198409,"stop":1752499199811,"duration":1402},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752499205058,"stop":1752499205645,"duration":587},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n            assert resp.status_code == expected_status\n    \n            if expected_status == 200:\n                doc_id = resp.json()['payload']['document']['_id']\n                with allure.step('Созданный Space-документ содержит title'):\n                    assert resp.json()['payload']['document']['title'] == title\n    \n                with allure.step('Архивация Space-документа'):\n                    archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>                   assert archive_resp.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","steps":[{"name":"member создаёт Space-документ, 200","time":{"start":1752499327684,"stop":1752499329871,"duration":2187},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 41, in test_create_and_archive_space_doc_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[{"name":"Созданный Space-документ содержит title","time":{"start":1752499328885,"stop":1752499328885,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Space-документа","time":{"start":1752499328885,"stop":1752499329871,"duration":986},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 41, in test_create_and_archive_space_doc_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2607-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":27,"unknown":0,"total":28},"items":[{"uid":"be1c9b4092d21fe5","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/be1c9b4092d21fe5","status":"passed","time":{"start":1752498160160,"stop":1752498161257,"duration":1097}},{"uid":"6248e8e02cb7f0ba","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/6248e8e02cb7f0ba","status":"passed","time":{"start":1752496492060,"stop":1752496492635,"duration":575}},{"uid":"2328c9bbe8f36ccd","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/2328c9bbe8f36ccd","status":"passed","time":{"start":1752481636084,"stop":1752481636651,"duration":567}},{"uid":"868f89fde8ff003f","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/868f89fde8ff003f","status":"passed","time":{"start":1752479665014,"stop":1752479665565,"duration":551}},{"uid":"fe7798768f361cd1","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/fe7798768f361cd1","status":"passed","time":{"start":1752477825767,"stop":1752477826260,"duration":493}},{"uid":"a3419d88cdcece4","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/a3419d88cdcece4","status":"passed","time":{"start":1752236692192,"stop":1752236692836,"duration":644}},{"uid":"c1e6d1c12b9b58eb","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/c1e6d1c12b9b58eb","status":"passed","time":{"start":1752236066743,"stop":1752236067300,"duration":557}},{"uid":"83751d1256c3496a","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/83751d1256c3496a","status":"passed","time":{"start":1752235264193,"stop":1752235265605,"duration":1412}},{"uid":"dc9aad4e388b061b","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/dc9aad4e388b061b","status":"passed","time":{"start":1752235248589,"stop":1752235249269,"duration":680}},{"uid":"e25e174f18ff0ef1","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/e25e174f18ff0ef1","status":"passed","time":{"start":1752234309853,"stop":1752234310719,"duration":866}},{"uid":"b1921a4d82acddd0","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/b1921a4d82acddd0","status":"passed","time":{"start":1752234295758,"stop":1752234296284,"duration":526}},{"uid":"72c7d4415435f98b","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/72c7d4415435f98b","status":"passed","time":{"start":1752233471971,"stop":1752233472726,"duration":755}},{"uid":"dbd191646b087917","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/dbd191646b087917","status":"passed","time":{"start":1752232550730,"stop":1752232551376,"duration":646}},{"uid":"a9f015d30f8d57f9","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/a9f015d30f8d57f9","status":"passed","time":{"start":1752232082140,"stop":1752232082782,"duration":642}},{"uid":"4d09a9fa56e2b045","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/4d09a9fa56e2b045","status":"passed","time":{"start":1752223493751,"stop":1752223494405,"duration":654}},{"uid":"5c5d417713daa41a","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/5c5d417713daa41a","status":"passed","time":{"start":1752218256340,"stop":1752218256966,"duration":626}},{"uid":"f6a2c1411d24e3d7","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/f6a2c1411d24e3d7","status":"passed","time":{"start":1752151022419,"stop":1752151022990,"duration":571}},{"uid":"bf2e757be612f611","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/bf2e757be612f611","status":"passed","time":{"start":1752148898096,"stop":1752148898561,"duration":465}},{"uid":"9163480e79999dd1","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/9163480e79999dd1","status":"passed","time":{"start":1752138384349,"stop":1752138384931,"duration":582}},{"uid":"2abe6c42b1266e1","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/2abe6c42b1266e1","status":"passed","time":{"start":1752137259913,"stop":1752137260688,"duration":775}}]},"tags":["backend"]},"source":"a32fea9d39bb12e8.json","parameterValues":["'member_client'","200"]}