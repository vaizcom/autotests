{"uid":"97d22b9a3a428e7","name":"Тестирование создания подзадачи разными пользовательскими ролями: клиент=owner_client, ожидаемый статус=200","fullName":"tests.test_backend.task_service.create_task.access_task.test_create_sub#test_create_subtask_per_role","historyId":"ec937145c064227970372c4806d7151e","time":{"start":1761910013535,"stop":1761910013709,"duration":174},"description":"\n    Тестирование создания подзадачи разными пользовательскими ролями и проверка\n    ожидаемого поведения на основе прав доступа роли.\n\n    Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n    подзадачу для родительской задачи. Также проверяются корректные связи между\n    родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n\n    ","descriptionHtml":"<pre><code>Тестирование создания подзадачи разными пользовательскими ролями и проверка\nожидаемого поведения на основе прав доступа роли.\n\nЭтот тест оценивает может ли клиент с разными уровнями доступа создавать\nподзадачу для родительской задачи. Также проверяются корректные связи между\nродительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n</code></pre>\n","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f7b6371b6d0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7f7b63305a80>\nclient_fixture = 'owner_client', expected_status = 200\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания подзадачи разными пользовательскими ролями и проверка ожидаемого поведения\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_subtask_per_role(\n        owner_client, main_space, main_board, create_task_in_main, client_fixture, expected_status\n    ):\n        \"\"\"\n        Тестирование создания подзадачи разными пользовательскими ролями и проверка\n        ожидаемого поведения на основе прав доступа роли.\n    \n        Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n        подзадачу для родительской задачи. Также проверяются корректные связи между\n        родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n    \n        \"\"\"\n        allure.dynamic.title(\n            f\"Тестирование создания подзадачи разными пользовательскими ролями: клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n        parent_id = subtask_id = None\n    \n        try:\n            with allure.step(\"Создание родительской задачи через owner_client\"):\n>               parent_task = create_task_in_main(\n                    \"owner_client\",\n                    name=\"Main create_task for subtask access test\"\n                )\n\ntests/test_backend/task_service/create_task/access_task/test_create_sub.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/conftest.py:32: in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\ntests/test_backend/task_service/create_task/utils.py:52: in get_random_type_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761909856376,"stop":1761909856684,"duration":308},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761909860625,"stop":1761909861236,"duration":611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761909861236,"stop":1761909861504,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761909861504,"stop":1761909861763,"duration":259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1761909864878,"stop":1761909865136,"duration":258},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_task_in_main","time":{"start":1761910013535,"stop":1761910013535,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тестирование создания подзадачи разными пользовательскими ролями и проверка\n    ожидаемого поведения на основе прав доступа роли.\n\n    Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n    подзадачу для родительской задачи. Также проверяются корректные связи между\n    родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n\n    ","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f7b6371b6d0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7f7b63305a80>\nclient_fixture = 'owner_client', expected_status = 200\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания подзадачи разными пользовательскими ролями и проверка ожидаемого поведения\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_subtask_per_role(\n        owner_client, main_space, main_board, create_task_in_main, client_fixture, expected_status\n    ):\n        \"\"\"\n        Тестирование создания подзадачи разными пользовательскими ролями и проверка\n        ожидаемого поведения на основе прав доступа роли.\n    \n        Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n        подзадачу для родительской задачи. Также проверяются корректные связи между\n        родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n    \n        \"\"\"\n        allure.dynamic.title(\n            f\"Тестирование создания подзадачи разными пользовательскими ролями: клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n        parent_id = subtask_id = None\n    \n        try:\n            with allure.step(\"Создание родительской задачи через owner_client\"):\n>               parent_task = create_task_in_main(\n                    \"owner_client\",\n                    name=\"Main create_task for subtask access test\"\n                )\n\ntests/test_backend/task_service/create_task/access_task/test_create_sub.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/conftest.py:32: in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\ntests/test_backend/task_service/create_task/utils.py:52: in get_random_type_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","steps":[{"name":"Создание родительской задачи через owner_client","time":{"start":1761910013535,"stop":1761910013708,"duration":173},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/access_task/test_create_sub.py\", line 42, in test_create_subtask_per_role\n    parent_task = create_task_in_main(\n                  ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/conftest.py\", line 32, in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\n                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/utils.py\", line 52, in get_random_type_id\n    response.raise_for_status()\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"access_task"},{"name":"tag","value":"backend"},{"name":"suite","value":"test_create_sub"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2551-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task_service.create_task.access_task.test_create_sub"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":9,"skipped":0,"passed":9,"unknown":0,"total":18},"items":[{"uid":"4c6f481157e113e7","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/4c6f481157e113e7","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/GetBoard","time":{"start":1761900045026,"stop":1761900045212,"duration":186}},{"uid":"cd670115f057ac1c","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/cd670115f057ac1c","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard","time":{"start":1761835063606,"stop":1761835063727,"duration":121}},{"uid":"c3b31e6947dec2df","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/c3b31e6947dec2df","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/GetBoard","time":{"start":1761834650658,"stop":1761834650842,"duration":184}},{"uid":"6b680bc2aac5c095","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/6b680bc2aac5c095","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761833486525,"stop":1761833486721,"duration":196}},{"uid":"854c4fac09925ce2","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/854c4fac09925ce2","status":"passed","time":{"start":1761821830460,"stop":1761821833486,"duration":3026}},{"uid":"e9d47a7fda764b84","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/e9d47a7fda764b84","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761818774370,"stop":1761818774543,"duration":173}},{"uid":"1d7f78cb66b32826","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/1d7f78cb66b32826","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761748637338,"stop":1761748637467,"duration":129}},{"uid":"5eb73c1ccd978549","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/5eb73c1ccd978549","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761747914644,"stop":1761747914833,"duration":189}},{"uid":"34fc598e87aac308","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/34fc598e87aac308","status":"passed","time":{"start":1761747043703,"stop":1761747047064,"duration":3361}},{"uid":"5d9680f8ca041d9","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/5d9680f8ca041d9","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761745744730,"stop":1761745744847,"duration":117}},{"uid":"b942f7605a44ecaa","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/b942f7605a44ecaa","status":"passed","time":{"start":1761576863383,"stop":1761576867140,"duration":3757}},{"uid":"ba90844decdfeb00","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/ba90844decdfeb00","status":"passed","time":{"start":1761557482078,"stop":1761557484343,"duration":2265}},{"uid":"9dc9f6ca336dcc6","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/9dc9f6ca336dcc6","status":"passed","time":{"start":1761308698970,"stop":1761308703402,"duration":4432}},{"uid":"a8d65cfa22d2f5fb","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/a8d65cfa22d2f5fb","status":"passed","time":{"start":1761306866902,"stop":1761306869533,"duration":2631}},{"uid":"79b08b8f4f9fcef1","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/79b08b8f4f9fcef1","status":"passed","time":{"start":1761137166930,"stop":1761137169681,"duration":2751}},{"uid":"3e109a2bbfd8bc5d","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/3e109a2bbfd8bc5d","status":"passed","time":{"start":1761135865915,"stop":1761135868974,"duration":3059}},{"uid":"b838e666f15b83b3","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/b838e666f15b83b3","status":"passed","time":{"start":1761134273271,"stop":1761134275837,"duration":2566}}]},"tags":["backend"]},"source":"97d22b9a3a428e7.json","parameterValues":["'owner_client'","200"]}