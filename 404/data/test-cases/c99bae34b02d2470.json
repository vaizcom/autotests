{"uid":"c99bae34b02d2470","name":"Редактирование Personal-документа: создание owner, редактирование owner","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_personal_doc_different_roles","historyId":"fe8a0734d1732a40b85830824e360a93","time":{"start":1761921820007,"stop":1761921820129,"duration":122},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[owner_self_edit_personal]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', editor_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:197: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761921776341,"stop":1761921776747,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[owner_self_edit_personal]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', editor_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:197: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью owner","time":{"start":1761921820007,"stop":1761921820129,"duration":122},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 197, in test_edit_personal_doc_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"editor_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":55},"items":[{"uid":"36a1b58197eeb30b","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/36a1b58197eeb30b","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912130936,"stop":1761912131079,"duration":143}},{"uid":"3da3e0444e3f3923","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/3da3e0444e3f3923","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911230646,"stop":1761911230823,"duration":177}},{"uid":"b459c07f32e63a29","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/b459c07f32e63a29","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910852961,"stop":1761910853091,"duration":130}},{"uid":"ba92dd4a4942d4dc","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/ba92dd4a4942d4dc","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910554079,"stop":1761910554202,"duration":123}},{"uid":"d2d76477f0266f03","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/d2d76477f0266f03","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909931265,"stop":1761909931439,"duration":174}},{"uid":"563d2d1e974e7de5","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/563d2d1e974e7de5","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899962684,"stop":1761899962861,"duration":177}},{"uid":"a1adb4e83d4369d7","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/a1adb4e83d4369d7","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834999059,"stop":1761834999202,"duration":143}},{"uid":"98b0c9e6e382ac64","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/98b0c9e6e382ac64","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834563469,"stop":1761834563644,"duration":175}},{"uid":"e882a02e29151906","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/e882a02e29151906","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833396211,"stop":1761833396402,"duration":191}},{"uid":"2abd2629db047c3e","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/2abd2629db047c3e","status":"passed","time":{"start":1761821590379,"stop":1761821591180,"duration":801}},{"uid":"fa06ec58fda84022","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/fa06ec58fda84022","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818694254,"stop":1761818694426,"duration":172}},{"uid":"79b6aedaa440540c","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/79b6aedaa440540c","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748565818,"stop":1761748565950,"duration":132}},{"uid":"d9604155f958f6ec","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/d9604155f958f6ec","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747832374,"stop":1761747832557,"duration":183}},{"uid":"919aea4e4576c765","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/919aea4e4576c765","status":"passed","time":{"start":1761746728038,"stop":1761746729321,"duration":1283}},{"uid":"1facf010ca146387","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/1facf010ca146387","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745684150,"stop":1761745684271,"duration":121}},{"uid":"7283e06d8ee84d8e","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/7283e06d8ee84d8e","status":"passed","time":{"start":1761576586299,"stop":1761576587241,"duration":942}},{"uid":"4cc585b5ead86000","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/4cc585b5ead86000","status":"passed","time":{"start":1761557243111,"stop":1761557244003,"duration":892}},{"uid":"eb2c90801fe11fa8","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/eb2c90801fe11fa8","status":"passed","time":{"start":1761308468448,"stop":1761308469324,"duration":876}},{"uid":"586a47521ae44879","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/586a47521ae44879","status":"passed","time":{"start":1761306616679,"stop":1761306617693,"duration":1014}},{"uid":"b94952e71b3d5a43","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/b94952e71b3d5a43","status":"passed","time":{"start":1761136914239,"stop":1761136915181,"duration":942}}]},"tags":["backend"]},"source":"c99bae34b02d2470.json","parameterValues":["'owner_client'","'owner_client'","200"]}