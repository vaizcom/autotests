{"uid":"45860afce7978ab0","name":"test_get_siblings_foreign_space_access_denied[space_doc]","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_siblings_foreign_space_access_denied","historyId":"e33b4ec3134c271f76dda43d2a4c53e3","time":{"start":1761921874891,"stop":1761921874891,"duration":0},"description":"\n    Проверяет ограничения доступа при попытке получения siblings документов через чужое пространство.\n    Тест удостоверяется, что попытка получить siblings документов через пространство, где у пользователя\n    нет прав, завершается ошибкой доступа.\n\n    Тест обрабатывает три типа документов: Project, Space и Member. Создается последовательность\n    из трех документов указанного типа в основном пространстве, после чего выполняется попытка\n    получить siblings среднего документа через чужое пространство и проверяется, что доступ запрещен.\n    ","descriptionHtml":"<pre><code>Проверяет ограничения доступа при попытке получения siblings документов через чужое пространство.\nТест удостоверяется, что попытка получить siblings документов через пространство, где у пользователя\nнет прав, завершается ошибкой доступа.\n\nТест обрабатывает три типа документов: Project, Space и Member. Создается последовательность\nиз трех документов указанного типа в основном пространстве, после чего выполняется попытка\nполучить siblings среднего документа через чужое пространство и проверяется, что доступ запрещен.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fc7d133bfd0>\n\n    @pytest.fixture(scope='module')\n    def space_id_module(owner_client):\n        client = owner_client\n        name = generate_space_name()\n        response = client.post(**create_space_endpoint(name=name))\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:192: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"space_id_module","time":{"start":1761921874765,"stop":1761921874883,"duration":118},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 192, in space_id_module\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"container_fixture","value":"'main_space'"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":55},"items":[{"uid":"bc6a92bb0d1d0bea","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/bc6a92bb0d1d0bea","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912185604,"stop":1761912185604,"duration":0}},{"uid":"3f64feceef471fe7","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/3f64feceef471fe7","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911297309,"stop":1761911297309,"duration":0}},{"uid":"b3687f08027abb5","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/b3687f08027abb5","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910910142,"stop":1761910910142,"duration":0}},{"uid":"e4b00a2e685c5c18","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/e4b00a2e685c5c18","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910610481,"stop":1761910610481,"duration":0}},{"uid":"f54d441b50a01ce9","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/f54d441b50a01ce9","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910002242,"stop":1761910002242,"duration":0}},{"uid":"bac6e5c155b8fd06","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/bac6e5c155b8fd06","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761900033815,"stop":1761900033815,"duration":0}},{"uid":"18d2c71e25335114","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/18d2c71e25335114","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835055264,"stop":1761835055264,"duration":0}},{"uid":"96359901f54e0b47","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/96359901f54e0b47","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834638811,"stop":1761834638811,"duration":0}},{"uid":"1c6712a35dfeaaee","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/1c6712a35dfeaaee","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833475017,"stop":1761833475017,"duration":0}},{"uid":"6b2da6b12ff6c90f","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/6b2da6b12ff6c90f","status":"passed","time":{"start":1761821698711,"stop":1761821700307,"duration":1596}},{"uid":"77ed1a9bcf3d480a","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/77ed1a9bcf3d480a","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818763390,"stop":1761818763390,"duration":0}},{"uid":"94a4a9454e584f87","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/94a4a9454e584f87","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748626718,"stop":1761748626718,"duration":0}},{"uid":"9f7504c2a850cb3d","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/9f7504c2a850cb3d","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747902817,"stop":1761747902817,"duration":0}},{"uid":"1966ea148f1294a4","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/1966ea148f1294a4","status":"passed","time":{"start":1761746863120,"stop":1761746865360,"duration":2240}},{"uid":"3385b6e427fecdde","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/3385b6e427fecdde","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745735689,"stop":1761745735689,"duration":0}},{"uid":"c2999492a5469d92","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c2999492a5469d92","status":"passed","time":{"start":1761576704028,"stop":1761576705879,"duration":1851}},{"uid":"8b50dba7e14a980a","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/8b50dba7e14a980a","status":"passed","time":{"start":1761557355941,"stop":1761557357573,"duration":1632}},{"uid":"2e013b2107f783f","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/2e013b2107f783f","status":"passed","time":{"start":1761308579483,"stop":1761308581326,"duration":1843}},{"uid":"a1a0dd4393b105b7","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/a1a0dd4393b105b7","status":"passed","time":{"start":1761306740963,"stop":1761306742807,"duration":1844}},{"uid":"fba7470a5eaf43cc","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/fba7470a5eaf43cc","status":"passed","time":{"start":1761137034013,"stop":1761137035729,"duration":1716}}]},"tags":["backend"]},"source":"45860afce7978ab0.json","parameterValues":["'main_space'","'Space'"]}