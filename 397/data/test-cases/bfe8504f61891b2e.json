{"uid":"bfe8504f61891b2e","name":"Дублирование Space-документа: создание owner, дублирование guest","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_project_and_space_docs_different_roles","historyId":"f29f5292e2b6dbe921182dd748e1e452","time":{"start":1761834524491,"stop":1761834524677,"duration":186},"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","descriptionHtml":"<pre><code>Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\nсозданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-owner_to_guest]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\nduplicator_fixture = 'guest_client', expected_status = 403, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:91: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761834488107,"stop":1761834488727,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761834491509,"stop":1761834491810,"duration":301},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761834491810,"stop":1761834492143,"duration":333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761834494767,"stop":1761834495076,"duration":309},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-owner_to_guest]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\nduplicator_fixture = 'guest_client', expected_status = 403, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:91: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью owner","time":{"start":1761834524491,"stop":1761834524677,"duration":186},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 91, in test_duplicate_project_and_space_docs_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2553-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"duplicator_fixture","value":"'guest_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":47},"items":[{"uid":"dd33ce3ce15d7578","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/dd33ce3ce15d7578","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833354392,"stop":1761833354567,"duration":175}},{"uid":"bab8ec30c5cef777","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/bab8ec30c5cef777","status":"passed","time":{"start":1761821541249,"stop":1761821541853,"duration":604}},{"uid":"b7683f8f249cf219","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/b7683f8f249cf219","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818659052,"stop":1761818659225,"duration":173}},{"uid":"649165928eee723b","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/649165928eee723b","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748533279,"stop":1761748533403,"duration":124}},{"uid":"a4110a347b3698db","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/a4110a347b3698db","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747796007,"stop":1761747796182,"duration":175}},{"uid":"368274ea2a780f84","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/368274ea2a780f84","status":"passed","time":{"start":1761746665413,"stop":1761746666293,"duration":880}},{"uid":"9b484aa52ebeb66a","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/9b484aa52ebeb66a","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745656028,"stop":1761745656143,"duration":115}},{"uid":"c3bba0807427816","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c3bba0807427816","status":"passed","time":{"start":1761576534074,"stop":1761576535225,"duration":1151}},{"uid":"8fb6a6e237c9e6cd","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/8fb6a6e237c9e6cd","status":"passed","time":{"start":1761557190974,"stop":1761557191703,"duration":729}},{"uid":"d85d56cfa5cb23c","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/d85d56cfa5cb23c","status":"passed","time":{"start":1761308416687,"stop":1761308417353,"duration":666}},{"uid":"246c0e4d744de8cd","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/246c0e4d744de8cd","status":"passed","time":{"start":1761306563422,"stop":1761306564119,"duration":697}},{"uid":"6d597327f3854ad9","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/6d597327f3854ad9","status":"passed","time":{"start":1761136858728,"stop":1761136859467,"duration":739}},{"uid":"f574407c5c66df40","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/f574407c5c66df40","status":"passed","time":{"start":1761135516183,"stop":1761135517060,"duration":877}},{"uid":"b68d3e1c9bbbf196","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/b68d3e1c9bbbf196","status":"passed","time":{"start":1761133974302,"stop":1761133974951,"duration":649}},{"uid":"d9f891de801c270e","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/d9f891de801c270e","status":"passed","time":{"start":1761128283841,"stop":1761128284705,"duration":864}},{"uid":"6de5b50e8833b289","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/6de5b50e8833b289","status":"passed","time":{"start":1761124390380,"stop":1761124391261,"duration":881}},{"uid":"191758d797b5fbb5","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/191758d797b5fbb5","status":"passed","time":{"start":1761119234513,"stop":1761119235201,"duration":688}},{"uid":"7785846efe20fce6","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/7785846efe20fce6","status":"passed","time":{"start":1761053274881,"stop":1761053275538,"duration":657}},{"uid":"fa652673bee54f88","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/fa652673bee54f88","status":"passed","time":{"start":1761047165045,"stop":1761047165724,"duration":679}},{"uid":"674a753567a46c82","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/674a753567a46c82","status":"passed","time":{"start":1760614573314,"stop":1760614574108,"duration":794}}]},"tags":["backend"]},"source":"bfe8504f61891b2e.json","parameterValues":["'owner_client'","'main_space'","'Space'","'guest_client'","403"]}