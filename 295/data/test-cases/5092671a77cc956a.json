{"uid":"5092671a77cc956a","name":"Архивирование Space-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_space_doc","historyId":"caa1f26fa1c2a34ffa0bd86c8c25ea11","time":{"start":1752500643337,"stop":1752500643800,"duration":463},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:47: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1752500528125,"stop":1752500528125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752500528125,"stop":1752500528125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752500528125,"stop":1752500528125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500528125,"stop":1752500528872,"duration":747},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500528125,"stop":1752500528125,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500528872,"stop":1752500529464,"duration":592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752500529465,"stop":1752500529957,"duration":492},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752500540234,"stop":1752500540689,"duration":455},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:47: AssertionError","steps":[{"name":"Случайный клиент(owner_client) создаёт Space-документ для архивации (title = 14.07_13:44:03 Space Doc For Archive Check)","time":{"start":1752500643337,"stop":1752500643800,"duration":463},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 47, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки списка","time":{"start":1752500643800,"stop":1752500643800,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 47, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2561-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":41},"items":[{"uid":"76a8c25c6624ea74","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/76a8c25c6624ea74","status":"passed","time":{"start":1752499328081,"stop":1752499330570,"duration":2489}},{"uid":"3f87a1fb30ebcb2e","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/3f87a1fb30ebcb2e","status":"passed","time":{"start":1752498149360,"stop":1752498150652,"duration":1292}},{"uid":"d2f25b425f4af2e6","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/d2f25b425f4af2e6","status":"passed","time":{"start":1752496480573,"stop":1752496481173,"duration":600}},{"uid":"83315b9afdc11cb2","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/83315b9afdc11cb2","status":"passed","time":{"start":1752481625258,"stop":1752481626427,"duration":1169}},{"uid":"1fc1a0052af29bca","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/1fc1a0052af29bca","status":"passed","time":{"start":1752479653582,"stop":1752479655018,"duration":1436}},{"uid":"62e4ad7df821a87a","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/62e4ad7df821a87a","status":"passed","time":{"start":1752477799182,"stop":1752477800320,"duration":1138}},{"uid":"594257100b144c82","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/594257100b144c82","status":"passed","time":{"start":1752236678823,"stop":1752236680122,"duration":1299}},{"uid":"389f18603878a319","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/389f18603878a319","status":"passed","time":{"start":1752236055658,"stop":1752236057152,"duration":1494}},{"uid":"9b751970219cccbd","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/9b751970219cccbd","status":"passed","time":{"start":1752235246153,"stop":1752235246891,"duration":738}},{"uid":"d39f908fab2ca935","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/d39f908fab2ca935","status":"passed","time":{"start":1752235235347,"stop":1752235236761,"duration":1414}},{"uid":"73610c23899090","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/73610c23899090","status":"passed","time":{"start":1752234292213,"stop":1752234293786,"duration":1573}},{"uid":"369d774d1903338","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/369d774d1903338","status":"passed","time":{"start":1752234284948,"stop":1752234285658,"duration":710}},{"uid":"33b9af6030fc7102","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/33b9af6030fc7102","status":"passed","time":{"start":1752233458258,"stop":1752233458903,"duration":645}},{"uid":"f87c8c66dec886a5","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/f87c8c66dec886a5","status":"passed","time":{"start":1752232539831,"stop":1752232541267,"duration":1436}},{"uid":"9fecaa3773d2f153","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/9fecaa3773d2f153","status":"passed","time":{"start":1752232070940,"stop":1752232071526,"duration":586}},{"uid":"aa609f6f76734ba6","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/aa609f6f76734ba6","status":"passed","time":{"start":1752223485358,"stop":1752223485794,"duration":436}},{"uid":"de62905ff941c78b","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/de62905ff941c78b","status":"passed","time":{"start":1752218246041,"stop":1752218246542,"duration":501}},{"uid":"652fedb8bd6a8be4","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/652fedb8bd6a8be4","status":"passed","time":{"start":1752151011297,"stop":1752151011875,"duration":578}},{"uid":"a98a11846960e344","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/a98a11846960e344","status":"passed","time":{"start":1752148889266,"stop":1752148890385,"duration":1119}},{"uid":"b750e072f0500100","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/b750e072f0500100","status":"passed","time":{"start":1752138373739,"stop":1752138374250,"duration":511}}]},"tags":["backend"]},"source":"5092671a77cc956a.json","parameterValues":["'member_client'","200"]}