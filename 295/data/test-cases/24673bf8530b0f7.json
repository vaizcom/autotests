{"uid":"24673bf8530b0f7","name":"Получение соседей Space-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_space_doc_siblings_access_by_roles","historyId":"01464152f19b1b89fea318fcd3ddcf67","time":{"start":1752500678451,"stop":1752500679436,"duration":985},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_access_by_roles[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Получение соседей Space-документа для роли {role}')\n    \n        doc_ids = []\n        with allure.step(f'{role} создаёт три Space-документа для проверки соседей'):\n            for index in range(3):\n                title = f'{current_date}_{role}_Sibling Test Doc {index}'\n                create_resp = api_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                if create_resp.status_code != 200:\n                    with allure.step(f'Не удалось создать документ {index}, статус {create_resp.status_code}'):\n>                       assert expected_status == 403\nE                       assert 200 == 403\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1752500528128,"stop":1752500528128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500528128,"stop":1752500528128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500528128,"stop":1752500528128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752500528128,"stop":1752500528128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500672517,"stop":1752500673025,"duration":508},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500673025,"stop":1752500673347,"duration":322},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752500678451,"stop":1752500678954,"duration":503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_access_by_roles[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Получение соседей Space-документа для роли {role}')\n    \n        doc_ids = []\n        with allure.step(f'{role} создаёт три Space-документа для проверки соседей'):\n            for index in range(3):\n                title = f'{current_date}_{role}_Sibling Test Doc {index}'\n                create_resp = api_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                if create_resp.status_code != 200:\n                    with allure.step(f'Не удалось создать документ {index}, статус {create_resp.status_code}'):\n>                       assert expected_status == 403\nE                       assert 200 == 403\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:42: AssertionError","steps":[{"name":"member создаёт три Space-документа для проверки соседей","time":{"start":1752500678954,"stop":1752500679436,"duration":482},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 42, in test_get_space_doc_siblings_access_by_roles\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ 0, статус 400","time":{"start":1752500679436,"stop":1752500679436,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 42, in test_get_space_doc_siblings_access_by_roles\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2570-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":43},"items":[{"uid":"4fb753cc901f3d52","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/4fb753cc901f3d52","status":"failed","statusDetails":"AssertionError: Некорректный правый сосед\nassert '6875049761182a5aefeb4b52' == '6875049861182a5aefeb4b73'\n  \n  - 6875049861182a5aefeb4b73\n  ?        ^              ^^\n  + 6875049761182a5aefeb4b52\n  ?        ^              ^^","time":{"start":1752499350052,"stop":1752499352611,"duration":2559}},{"uid":"caf327fc6c57f039","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/caf327fc6c57f039","status":"passed","time":{"start":1752498286923,"stop":1752498289133,"duration":2210}},{"uid":"f82a86c6f5b6dd5","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/f82a86c6f5b6dd5","status":"passed","time":{"start":1752496636426,"stop":1752496639079,"duration":2653}},{"uid":"33d5a9f6e12edea4","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/33d5a9f6e12edea4","status":"passed","time":{"start":1752481738492,"stop":1752481740252,"duration":1760}},{"uid":"e17e3cdda3a9e178","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/e17e3cdda3a9e178","status":"passed","time":{"start":1752479782672,"stop":1752479784899,"duration":2227}},{"uid":"5a9935d9276b13b3","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/5a9935d9276b13b3","status":"passed","time":{"start":1752477931930,"stop":1752477933564,"duration":1634}},{"uid":"231d2b9892da1ae9","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/231d2b9892da1ae9","status":"passed","time":{"start":1752236798322,"stop":1752236800833,"duration":2511}},{"uid":"2df70c947383747c","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/2df70c947383747c","status":"passed","time":{"start":1752236166646,"stop":1752236168485,"duration":1839}},{"uid":"7c20b035929147e9","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/7c20b035929147e9","status":"passed","time":{"start":1752235416783,"stop":1752235419723,"duration":2940}},{"uid":"9794066a4de0c5c2","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/9794066a4de0c5c2","status":"passed","time":{"start":1752235381222,"stop":1752235383501,"duration":2279}},{"uid":"1665b6656625f7f8","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/1665b6656625f7f8","status":"passed","time":{"start":1752234436483,"stop":1752234438551,"duration":2068}},{"uid":"43c6cdde60a1904e","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/43c6cdde60a1904e","status":"failed","statusDetails":"AssertionError: Некорректный левый сосед\nassert '6870f9a34aff74363a1be52f' == '6870f9a34aff74363a1be51d'\n  \n  - 6870f9a34aff74363a1be51d\n  ?                       ^^\n  + 6870f9a34aff74363a1be52f\n  ?                       ^^","time":{"start":1752234403043,"stop":1752234404438,"duration":1395}},{"uid":"d01f2cbd07c2309","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/d01f2cbd07c2309","status":"passed","time":{"start":1752233587292,"stop":1752233589766,"duration":2474}},{"uid":"97131e245869a7e1","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/97131e245869a7e1","status":"passed","time":{"start":1752232648084,"stop":1752232650193,"duration":2109}},{"uid":"56337a0ad31e707c","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/56337a0ad31e707c","status":"passed","time":{"start":1752232186246,"stop":1752232188285,"duration":2039}},{"uid":"69cf494574549afc","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/69cf494574549afc","status":"passed","time":{"start":1752223580946,"stop":1752223582584,"duration":1638}},{"uid":"53da01dfd13d6295","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/53da01dfd13d6295","status":"passed","time":{"start":1752218320233,"stop":1752218321886,"duration":1653}},{"uid":"bae697a17bea319a","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/bae697a17bea319a","status":"passed","time":{"start":1752151087651,"stop":1752151089731,"duration":2080}},{"uid":"1508c3380cdd8899","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/1508c3380cdd8899","status":"passed","time":{"start":1752148937277,"stop":1752148939050,"duration":1773}},{"uid":"7c80477378bcff65","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/7c80477378bcff65","status":"passed","time":{"start":1752138413329,"stop":1752138415160,"duration":1831}}]},"tags":["backend"]},"source":"24673bf8530b0f7.json","parameterValues":["'member_client'","200"]}