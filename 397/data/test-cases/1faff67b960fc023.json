{"uid":"1faff67b960fc023","name":"Проверка доступа к списку документов в Space для роли owner","fullName":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles#test_get_project_and_space_docs_access_by_roles","historyId":"681aa250070f0e4939f2508d9ca7fd55","time":{"start":1761834576172,"stop":1761834576691,"duration":519},"description":"\n    Проверяем что разные роли могут получить списки документов из пространства и проекта.\n    Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n\n    Проверяется получение и наличие в ответе всех созданных документов с учетом\n    ожидаемого статуса запроса для каждой роли.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить списки документов из пространства и проекта.\nТест параметризован для проверки разных типов клиентов и контейнеров документов.\n\nПроверяется получение и наличие в ответе всех созданных документов с учетом\nожидаемого статуса запроса для каждой роли.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_docs_access_by_roles[space_docs-owner]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'owner_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f717db20860>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_project_and_space_docs_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить списки документов из пространства и проекта.\n        Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n    \n        Проверяется получение и наличие в ответе всех созданных документов с учетом\n        ожидаемого статуса запроса для каждой роли.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документам в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            space_id = request.getfixturevalue('main_space')\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к списку документов в {kind} для роли {role}')\n    \n        # Создаем документы с помощью фикстуры\n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n>       created_docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Space', kind_id = '6866309d85fb8d104544a61e'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761834488107,"stop":1761834488727,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761834491509,"stop":1761834491810,"duration":301},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761834491810,"stop":1761834492143,"duration":333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761834576171,"stop":1761834576171,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить списки документов из пространства и проекта.\n    Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n\n    Проверяется получение и наличие в ответе всех созданных документов с учетом\n    ожидаемого статуса запроса для каждой роли.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_docs_access_by_roles[space_docs-owner]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'owner_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f717db20860>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_project_and_space_docs_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить списки документов из пространства и проекта.\n        Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n    \n        Проверяется получение и наличие в ответе всех созданных документов с учетом\n        ожидаемого статуса запроса для каждой роли.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документам в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            space_id = request.getfixturevalue('main_space')\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к списку документов в {kind} для роли {role}')\n    \n        # Создаем документы с помощью фикстуры\n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n>       created_docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Space', kind_id = '6866309d85fb8d104544a61e'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документам в Space","time":{"start":1761834576172,"stop":1761834576172,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Space разными ролями","time":{"start":1761834576172,"stop":1761834576691,"duration":519},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1761834576172,"stop":1761834576690,"duration":518},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761834576699,"stop":1761834576699,"duration":0},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761834576699,"stop":1761834576699,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_docs_list_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2553-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":47},"items":[{"uid":"315265b765302747","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/315265b765302747","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833411283,"stop":1761833411463,"duration":180}},{"uid":"f083c0799f4b240f","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/f083c0799f4b240f","status":"passed","time":{"start":1761821616720,"stop":1761821617539,"duration":819}},{"uid":"61ca21b6ce9944ce","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/61ca21b6ce9944ce","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818707445,"stop":1761818707623,"duration":178}},{"uid":"d4cf0d025215cbb","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/d4cf0d025215cbb","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748576996,"stop":1761748577118,"duration":122}},{"uid":"bf92351f21d93d4c","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/bf92351f21d93d4c","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747845065,"stop":1761747845242,"duration":177}},{"uid":"dc3411cac0d532a","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/dc3411cac0d532a","status":"passed","time":{"start":1761746762898,"stop":1761746764082,"duration":1184}},{"uid":"1e710777133aa819","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/1e710777133aa819","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745693249,"stop":1761745693372,"duration":123}},{"uid":"783c2ebac1304baf","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/783c2ebac1304baf","status":"passed","time":{"start":1761576615850,"stop":1761576616793,"duration":943}},{"uid":"705a41a7d0a273df","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/705a41a7d0a273df","status":"passed","time":{"start":1761557270918,"stop":1761557271837,"duration":919}},{"uid":"3f1d3189938be4a","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/3f1d3189938be4a","status":"passed","time":{"start":1761308496101,"stop":1761308496937,"duration":836}},{"uid":"e4b676498fd813b0","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/e4b676498fd813b0","status":"passed","time":{"start":1761306647672,"stop":1761306648683,"duration":1011}},{"uid":"15004b0a4299f97e","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/15004b0a4299f97e","status":"passed","time":{"start":1761136943798,"stop":1761136944713,"duration":915}},{"uid":"63cdc75872a5357d","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/63cdc75872a5357d","status":"passed","time":{"start":1761135610349,"stop":1761135611432,"duration":1083}},{"uid":"79e581779775d3b0","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/79e581779775d3b0","status":"passed","time":{"start":1761134054605,"stop":1761134055488,"duration":883}},{"uid":"8439b9c3aaf36d2d","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/8439b9c3aaf36d2d","status":"passed","time":{"start":1761128385960,"stop":1761128387080,"duration":1120}},{"uid":"7e25f208a4732a64","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/7e25f208a4732a64","status":"passed","time":{"start":1761124496435,"stop":1761124497603,"duration":1168}},{"uid":"d31eaa84749fa85d","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/d31eaa84749fa85d","status":"passed","time":{"start":1761119321644,"stop":1761119323200,"duration":1556}},{"uid":"a47bf3903c1c5c61","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/a47bf3903c1c5c61","status":"passed","time":{"start":1761053357577,"stop":1761053358417,"duration":840}},{"uid":"aaef93ee7085dcd4","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/aaef93ee7085dcd4","status":"passed","time":{"start":1761047250321,"stop":1761047251598,"duration":1277}},{"uid":"85b3141ba6974627","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/85b3141ba6974627","status":"passed","time":{"start":1760614667506,"stop":1760614668517,"duration":1011}}]},"tags":["backend"]},"source":"1faff67b960fc023.json","parameterValues":["'owner_client'","'main_space'","200","'Space'"]}