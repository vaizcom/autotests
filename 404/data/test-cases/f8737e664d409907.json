{"uid":"f8737e664d409907","name":"Проверка доступа к siblings Space-документа: создатель - manager, просматривающий - owner","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_project_and_space_siblings_docs_access_by_roles","historyId":"106b17742737af278b17ce6eed628d38","time":{"start":1761921833716,"stop":1761921834479,"duration":763},"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n- Типа документа (Space/Project)\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-manager_docs_by_owner_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'owner_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n>           assert siblings_resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:95: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761921768380,"stop":1761921768849,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-manager_docs_by_owner_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'owner_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n>           assert siblings_resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:95: AssertionError","steps":[{"name":"Создание трёх Space-документов пользователем manager","time":{"start":1761921833716,"stop":1761921834357,"duration":641},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Попытка получения siblings для среднего документа пользователем owner","time":{"start":1761921834357,"stop":1761921834478,"duration":121},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 95, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert siblings_resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"creator_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":55},"items":[{"uid":"935d2f5ece3b0e24","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/935d2f5ece3b0e24","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912145044,"stop":1761912145851,"duration":807}},{"uid":"574aff1e0a39f99e","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/574aff1e0a39f99e","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911248976,"stop":1761911250247,"duration":1271}},{"uid":"acbcbf6961f0ff26","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/acbcbf6961f0ff26","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910867706,"stop":1761910868539,"duration":833}},{"uid":"5874ee319c7be59d","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/5874ee319c7be59d","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910569356,"stop":1761910570191,"duration":835}},{"uid":"a9c8951b7b0cbfad","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/a9c8951b7b0cbfad","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909949325,"stop":1761909950367,"duration":1042}},{"uid":"86e03b7c847eebec","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/86e03b7c847eebec","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899980479,"stop":1761899981549,"duration":1070}},{"uid":"38ee79e8725db0a1","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/38ee79e8725db0a1","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835013824,"stop":1761835014668,"duration":844}},{"uid":"810c3c3802ebc197","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/810c3c3802ebc197","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834582149,"stop":1761834583259,"duration":1110}},{"uid":"f052371fc048502b","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/f052371fc048502b","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833417469,"stop":1761833418539,"duration":1070}},{"uid":"c14a200e902f91f0","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/c14a200e902f91f0","status":"passed","time":{"start":1761821637955,"stop":1761821640037,"duration":2082}},{"uid":"bde0bac50202cda6","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/bde0bac50202cda6","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818713320,"stop":1761818714352,"duration":1032}},{"uid":"e05adc7b19d1220f","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/e05adc7b19d1220f","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748581438,"stop":1761748582246,"duration":808}},{"uid":"a8bf2d234379dc58","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/a8bf2d234379dc58","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747850420,"stop":1761747851494,"duration":1074}},{"uid":"52c65e5e638278ba","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/52c65e5e638278ba","status":"passed","time":{"start":1761746790237,"stop":1761746792200,"duration":1963}},{"uid":"1f852b80b802bd51","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/1f852b80b802bd51","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745697120,"stop":1761745697887,"duration":767}},{"uid":"73a722bc40d2a450","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/73a722bc40d2a450","status":"passed","time":{"start":1761576639536,"stop":1761576641102,"duration":1566}},{"uid":"3236a431d951dd13","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/3236a431d951dd13","status":"passed","time":{"start":1761557294031,"stop":1761557295545,"duration":1514}},{"uid":"dc807d5b5a34bd99","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/dc807d5b5a34bd99","status":"passed","time":{"start":1761308518316,"stop":1761308519775,"duration":1459}},{"uid":"324dece3994e7a91","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/324dece3994e7a91","status":"passed","time":{"start":1761306672720,"stop":1761306674428,"duration":1708}},{"uid":"a89c09127e90c12","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/a89c09127e90c12","status":"passed","time":{"start":1761136969136,"stop":1761136970914,"duration":1778}}]},"tags":["backend"]},"source":"f8737e664d409907.json","parameterValues":["'owner_client'","'main_space'","'manager_client'","200","'Space'"]}