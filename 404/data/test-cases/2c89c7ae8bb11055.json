{"uid":"2c89c7ae8bb11055","name":"Дублирование Personal-документа: создание guest, дублирование owner","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_personal_doc_different_roles","historyId":"bce03fec28fff2c4c103865f2093ff63","time":{"start":1761921804650,"stop":1761921805197,"duration":547},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[guest_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'guest_client', duplicator_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа\n            with allure.step(\n                f'Дублирование документа пользователем с ролью {duplicator_role} (Нельзя дублировать чужие персональные документы)'\n            ):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:228: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761921770374,"stop":1761921770656,"duration":282},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761921776341,"stop":1761921776747,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[guest_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'guest_client', duplicator_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа\n            with allure.step(\n                f'Дублирование документа пользователем с ролью {duplicator_role} (Нельзя дублировать чужие персональные документы)'\n            ):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:228: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью guest","time":{"start":1761921804650,"stop":1761921804854,"duration":204},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Дублирование документа пользователем с ролью owner (Нельзя дублировать чужие персональные документы)","time":{"start":1761921804854,"stop":1761921804976,"duration":122},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 228, in test_duplicate_personal_doc_different_roles\n    assert duplicate_response.status_code == expected_status, (\n","steps":[],"attachments":[{"uid":"5371d6b53c17478a","name":"Response Body","source":"5371d6b53c17478a.json","type":"application/json","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Архивация исходного документа","time":{"start":1761921804976,"stop":1761921805197,"duration":221},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'guest_client'"},{"name":"duplicator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":55},"items":[{"uid":"fde657570577b588","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/fde657570577b588","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912113194,"stop":1761912113741,"duration":547}},{"uid":"cc91d05a6809c3e4","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/cc91d05a6809c3e4","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911211413,"stop":1761911212063,"duration":650}},{"uid":"32262bca2caa9879","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/32262bca2caa9879","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910835544,"stop":1761910836083,"duration":539}},{"uid":"38d777357d05b442","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/38d777357d05b442","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910538175,"stop":1761910538723,"duration":548}},{"uid":"98ced66fda6e71fd","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/98ced66fda6e71fd","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909910152,"stop":1761909911930,"duration":1778}},{"uid":"954a351709d1cf0f","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/954a351709d1cf0f","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899942257,"stop":1761899943012,"duration":755}},{"uid":"d8840bb071d2be36","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/d8840bb071d2be36","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834983392,"stop":1761834984115,"duration":723}},{"uid":"34f9bbbea5412584","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/34f9bbbea5412584","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834542036,"stop":1761834542841,"duration":805}},{"uid":"b6f7f8b418ce9fff","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/b6f7f8b418ce9fff","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833371541,"stop":1761833373123,"duration":1582}},{"uid":"c757754c632d2111","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/c757754c632d2111","status":"passed","time":{"start":1761821557415,"stop":1761821558022,"duration":607}},{"uid":"3f7565839c38279e","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/3f7565839c38279e","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818674761,"stop":1761818675470,"duration":709}},{"uid":"b0d6269b8bfa9a5c","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/b0d6269b8bfa9a5c","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748547796,"stop":1761748548345,"duration":549}},{"uid":"6c7bde1fec63f5f7","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/6c7bde1fec63f5f7","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747812327,"stop":1761747813042,"duration":715}},{"uid":"1495e55cab8cd0b","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/1495e55cab8cd0b","status":"passed","time":{"start":1761746686114,"stop":1761746686972,"duration":858}},{"uid":"e574d5bc585f4b95","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/e574d5bc585f4b95","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745668568,"stop":1761745669105,"duration":537}},{"uid":"1b2c739ba61e4033","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/1b2c739ba61e4033","status":"passed","time":{"start":1761576552595,"stop":1761576553230,"duration":635}},{"uid":"8db1ccd3f6abb44b","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/8db1ccd3f6abb44b","status":"passed","time":{"start":1761557208133,"stop":1761557209220,"duration":1087}},{"uid":"9c4c562c8651ddce","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/9c4c562c8651ddce","status":"passed","time":{"start":1761308434373,"stop":1761308435034,"duration":661}},{"uid":"e812156d8c120bc5","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/e812156d8c120bc5","status":"passed","time":{"start":1761306580431,"stop":1761306581105,"duration":674}},{"uid":"6285f83fd37b61a9","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/6285f83fd37b61a9","status":"passed","time":{"start":1761136878110,"stop":1761136878817,"duration":707}}]},"tags":["backend"]},"source":"2c89c7ae8bb11055.json","parameterValues":["'guest_client'","'owner_client'","403"]}