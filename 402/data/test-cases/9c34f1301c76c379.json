{"uid":"9c34f1301c76c379","name":"Архивирование Space-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_space_doc","historyId":"b5cd4275c510ddbcdef07537105da578","time":{"start":1761910801948,"stop":1761910802090,"duration":142},"description":"\n    Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\n    Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n    и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n    Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n    Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n    с использованием случайного клиента с повышенными правами.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\nТест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\nи оценивает возможность архивации документа на основе предоставленной роли client_fixture.\nПроверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\nДополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\nс использованием случайного клиента с повышенными правами.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n    \n        Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n        и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n        Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n        Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n        с использованием случайного клиента с повышенными правами.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:56: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761910792963,"stop":1761910793391,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761910792963,"stop":1761910792963,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761910796070,"stop":1761910796305,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761910796305,"stop":1761910796513,"duration":208},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\n    Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n    и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n    Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n    Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n    с использованием случайного клиента с повышенными правами.\n    ","status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n    \n        Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n        и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n        Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n        Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n        с использованием случайного клиента с повышенными правами.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:56: AssertionError","steps":[{"name":"Случайный клиент(owner_client) создаёт Space-документ для архивации (title = 31.10_11:40:01 Space Doc For Archive Check)","time":{"start":1761910801949,"stop":1761910802089,"duration":140},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 56, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки списка","time":{"start":1761910802089,"stop":1761910802089,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 56, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2545-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":52},"items":[{"uid":"4bd5c021c41624c2","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/4bd5c021c41624c2","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910504289,"stop":1761910504793,"duration":504}},{"uid":"cd5e200b9213c5e6","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/cd5e200b9213c5e6","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909867326,"stop":1761909867764,"duration":438}},{"uid":"a4e338b2a5d8750c","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/a4e338b2a5d8750c","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899901247,"stop":1761899901695,"duration":448}},{"uid":"8286a9bb9979d9c","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/8286a9bb9979d9c","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761834950233,"stop":1761834950359,"duration":126}},{"uid":"dda25475bdcc10b2","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/dda25475bdcc10b2","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834498002,"stop":1761834498845,"duration":843}},{"uid":"ee5280dc24cb0959","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/ee5280dc24cb0959","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833327624,"stop":1761833328075,"duration":451}},{"uid":"403b9c27dd1ab616","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/403b9c27dd1ab616","status":"passed","time":{"start":1761821508337,"stop":1761821508958,"duration":621}},{"uid":"37bdc298aad629f","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/37bdc298aad629f","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818627911,"stop":1761818628993,"duration":1082}},{"uid":"c7a33814bd2f8ba7","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/c7a33814bd2f8ba7","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748512498,"stop":1761748512896,"duration":398}},{"uid":"dba9f28b7c65c16b","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/dba9f28b7c65c16b","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747772080,"stop":1761747772571,"duration":491}},{"uid":"65671bd10ae26c14","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/65671bd10ae26c14","status":"passed","time":{"start":1761746626398,"stop":1761746627363,"duration":965}},{"uid":"61478533f61b7c66","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/61478533f61b7c66","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745637369,"stop":1761745637960,"duration":591}},{"uid":"65567fb5cb913059","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/65567fb5cb913059","status":"passed","time":{"start":1761576500655,"stop":1761576501554,"duration":899}},{"uid":"d9d1e6aa0697ea21","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/d9d1e6aa0697ea21","status":"passed","time":{"start":1761557156712,"stop":1761557157575,"duration":863}},{"uid":"ae9a1eab0d1fc80a","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/ae9a1eab0d1fc80a","status":"passed","time":{"start":1761308381666,"stop":1761308382320,"duration":654}},{"uid":"2742bb82fee6a87b","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/2742bb82fee6a87b","status":"passed","time":{"start":1761306529277,"stop":1761306530143,"duration":866}},{"uid":"7127c9b3d9b3dc20","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/7127c9b3d9b3dc20","status":"passed","time":{"start":1761136823845,"stop":1761136824576,"duration":731}},{"uid":"a94f5efb9dc2229","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/a94f5efb9dc2229","status":"passed","time":{"start":1761135476903,"stop":1761135477728,"duration":825}},{"uid":"60b49316fb029a13","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/60b49316fb029a13","status":"passed","time":{"start":1761133941001,"stop":1761133941915,"duration":914}},{"uid":"336fab93eb12c953","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/336fab93eb12c953","status":"passed","time":{"start":1761128241932,"stop":1761128242735,"duration":803}}]},"tags":["backend"]},"source":"9c34f1301c76c379.json","parameterValues":["'owner_client'","200"]}