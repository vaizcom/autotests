{"uid":"344817b97a622cf6","name":"test_get_siblings_foreign_space_access_denied[project_doc]","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_siblings_foreign_space_access_denied","historyId":"3efdfb26192361e4940bdb24b5c10706","time":{"start":1761921874765,"stop":1761921874765,"duration":0},"description":"\n    Проверяет ограничения доступа при попытке получения siblings документов через чужое пространство.\n    Тест удостоверяется, что попытка получить siblings документов через пространство, где у пользователя\n    нет прав, завершается ошибкой доступа.\n\n    Тест обрабатывает три типа документов: Project, Space и Member. Создается последовательность\n    из трех документов указанного типа в основном пространстве, после чего выполняется попытка\n    получить siblings среднего документа через чужое пространство и проверяется, что доступ запрещен.\n    ","descriptionHtml":"<pre><code>Проверяет ограничения доступа при попытке получения siblings документов через чужое пространство.\nТест удостоверяется, что попытка получить siblings документов через пространство, где у пользователя\nнет прав, завершается ошибкой доступа.\n\nТест обрабатывает три типа документов: Project, Space и Member. Создается последовательность\nиз трех документов указанного типа в основном пространстве, после чего выполняется попытка\nполучить siblings среднего документа через чужое пространство и проверяется, что доступ запрещен.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fc7d133bfd0>\n\n    @pytest.fixture(scope='module')\n    def space_id_module(owner_client):\n        client = owner_client\n        name = generate_space_name()\n        response = client.post(**create_space_endpoint(name=name))\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:192: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"space_id_module","time":{"start":1761921874765,"stop":1761921874883,"duration":118},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 192, in space_id_module\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"container_fixture","value":"'main_project'"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":55},"items":[{"uid":"5d055948c57de6c7","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/5d055948c57de6c7","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912185463,"stop":1761912185463,"duration":0}},{"uid":"8b0533107836ffd1","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/8b0533107836ffd1","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911297124,"stop":1761911297124,"duration":0}},{"uid":"f7b846ee3815514d","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/f7b846ee3815514d","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910910008,"stop":1761910910008,"duration":0}},{"uid":"15f40ebfa37f3859","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/15f40ebfa37f3859","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910610349,"stop":1761910610349,"duration":0}},{"uid":"82ff698ae9ac0219","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/82ff698ae9ac0219","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910002045,"stop":1761910002045,"duration":0}},{"uid":"511677b55ef16eb7","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/511677b55ef16eb7","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761900033627,"stop":1761900033627,"duration":0}},{"uid":"ceb5daf8931a5912","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/ceb5daf8931a5912","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835055130,"stop":1761835055130,"duration":0}},{"uid":"4b33361881a767d","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/4b33361881a767d","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834638625,"stop":1761834638625,"duration":0}},{"uid":"41a04d3508ce93cc","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/41a04d3508ce93cc","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833474824,"stop":1761833474824,"duration":0}},{"uid":"a537d181b72fe6","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/a537d181b72fe6","status":"passed","time":{"start":1761821696947,"stop":1761821698708,"duration":1761}},{"uid":"cf1f861e9714324f","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/cf1f861e9714324f","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818763211,"stop":1761818763211,"duration":0}},{"uid":"234fe4767fd544f","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/234fe4767fd544f","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748626589,"stop":1761748626589,"duration":0}},{"uid":"e47190140cd1f20a","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/e47190140cd1f20a","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747902608,"stop":1761747902608,"duration":0}},{"uid":"de18d43fa6d547e0","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/de18d43fa6d547e0","status":"passed","time":{"start":1761746859894,"stop":1761746863118,"duration":3224}},{"uid":"54d010ee8b85c957","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/54d010ee8b85c957","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745735561,"stop":1761745735561,"duration":0}},{"uid":"7dd3c9bb9f03c68b","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/7dd3c9bb9f03c68b","status":"passed","time":{"start":1761576702141,"stop":1761576704026,"duration":1885}},{"uid":"41b48973873c51f4","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/41b48973873c51f4","status":"passed","time":{"start":1761557353714,"stop":1761557355939,"duration":2225}},{"uid":"508a3adf7c69c694","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/508a3adf7c69c694","status":"passed","time":{"start":1761308577669,"stop":1761308579481,"duration":1812}},{"uid":"ce069aaba064bd54","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/ce069aaba064bd54","status":"passed","time":{"start":1761306738944,"stop":1761306740960,"duration":2016}},{"uid":"f287be17a4ce07fb","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/f287be17a4ce07fb","status":"passed","time":{"start":1761137032051,"stop":1761137034010,"duration":1959}}]},"tags":["backend"]},"source":"344817b97a622cf6.json","parameterValues":["'main_project'","'Project'"]}