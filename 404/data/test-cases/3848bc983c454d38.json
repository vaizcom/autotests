{"uid":"3848bc983c454d38","name":"Редактирование Space-документа: создание manager, редактирование manager","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_project_and_space_docs_different_roles","historyId":"1b19ac3acfc9f2827d97cc0033ce10f6","time":{"start":1761921808273,"stop":1761921809009,"duration":736},"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\nмогут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\nдокументы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\nтестирования различных комбинаций ролей создателей и редакторов документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[space_doc-manager_self_edit]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\neditor_fixture = 'manager_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n                assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\n    \n                if expected_status == 200:\n                    with allure.step('Проверка видимости изменений документа для всех ролей'):\n                        # Собираем всех клиентов, которые должны видеть документ\n                        with allure.step('Получение клиентов для проверки'):\n                            clients_to_check = {\n                                'owner': request.getfixturevalue('owner_client'),\n                                'manager': request.getfixturevalue('manager_client'),\n                                'member': request.getfixturevalue('member_client'),\n                                'guest': request.getfixturevalue('guest_client'),\n                            }\n    \n                        # Проверяем видимость изменений для каждого клиента\n                        for role, client in clients_to_check.items():\n                            with allure.step(f'Проверка для роли {role}'):\n                                with allure.step(f'Запрос документа от имени {role}'):\n                                    get_response = client.post(\n                                        **get_document_endpoint(document_id=doc_id, space_id=main_space)\n                                    )\n    \n                                with allure.step(f'Проверка статуса ответа для {role}'):\n>                                   assert get_response.status_code == 200, (\n                                        f'Ошибка при получении документа для роли {role}: '\n                                        f'статус {get_response.status_code}'\n                                    )\nE                                   AssertionError: Ошибка при получении документа для роли owner: статус 400\nE                                   assert 400 == 200\nE                                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:122: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761921768380,"stop":1761921768849,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761921769502,"stop":1761921769951,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761921770374,"stop":1761921770656,"duration":282},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[space_doc-manager_self_edit]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\neditor_fixture = 'manager_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n                assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\n    \n                if expected_status == 200:\n                    with allure.step('Проверка видимости изменений документа для всех ролей'):\n                        # Собираем всех клиентов, которые должны видеть документ\n                        with allure.step('Получение клиентов для проверки'):\n                            clients_to_check = {\n                                'owner': request.getfixturevalue('owner_client'),\n                                'manager': request.getfixturevalue('manager_client'),\n                                'member': request.getfixturevalue('member_client'),\n                                'guest': request.getfixturevalue('guest_client'),\n                            }\n    \n                        # Проверяем видимость изменений для каждого клиента\n                        for role, client in clients_to_check.items():\n                            with allure.step(f'Проверка для роли {role}'):\n                                with allure.step(f'Запрос документа от имени {role}'):\n                                    get_response = client.post(\n                                        **get_document_endpoint(document_id=doc_id, space_id=main_space)\n                                    )\n    \n                                with allure.step(f'Проверка статуса ответа для {role}'):\n>                                   assert get_response.status_code == 200, (\n                                        f'Ошибка при получении документа для роли {role}: '\n                                        f'статус {get_response.status_code}'\n                                    )\nE                                   AssertionError: Ошибка при получении документа для роли owner: статус 400\nE                                   assert 400 == 200\nE                                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:122: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью manager","time":{"start":1761921808274,"stop":1761921808486,"duration":212},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью manager","time":{"start":1761921808486,"stop":1761921808798,"duration":312},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Проверка видимости изменений документа для всех ролей","time":{"start":1761921808678,"stop":1761921808798,"duration":120},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Получение клиентов для проверки","time":{"start":1761921808678,"stop":1761921808678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка для роли owner","time":{"start":1761921808678,"stop":1761921808798,"duration":120},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Запрос документа от имени owner","time":{"start":1761921808678,"stop":1761921808798,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статуса ответа для owner","time":{"start":1761921808798,"stop":1761921808798,"duration":0},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":5,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1761921808799,"stop":1761921809009,"duration":210},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'manager_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"editor_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":55},"items":[{"uid":"1efc57c4bf409764","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/1efc57c4bf409764","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912117003,"stop":1761912117763,"duration":760}},{"uid":"483c686e4ba0b91b","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/483c686e4ba0b91b","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911216236,"stop":1761911217241,"duration":1005}},{"uid":"9e0c80cc14cdf798","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/9e0c80cc14cdf798","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910840253,"stop":1761910841014,"duration":761}},{"uid":"827e0e91787aa555","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/827e0e91787aa555","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910542073,"stop":1761910542812,"duration":739}},{"uid":"c1bc289dc06b740b","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/c1bc289dc06b740b","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909916210,"stop":1761909917248,"duration":1038}},{"uid":"b772e50bdcaf2ff5","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/b772e50bdcaf2ff5","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899947818,"stop":1761899948834,"duration":1016}},{"uid":"740fd5fcf9c1e1e0","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/740fd5fcf9c1e1e0","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834987594,"stop":1761834988319,"duration":725}},{"uid":"6587a46b3c77504d","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/6587a46b3c77504d","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834548030,"stop":1761834549136,"duration":1106}},{"uid":"e734065ebcd4aaba","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/e734065ebcd4aaba","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833378482,"stop":1761833379978,"duration":1496}},{"uid":"89ee6090a61ad3fd","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/89ee6090a61ad3fd","status":"passed","time":{"start":1761821566465,"stop":1761821567760,"duration":1295}},{"uid":"85073df9d74acde6","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/85073df9d74acde6","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818679615,"stop":1761818680605,"duration":990}},{"uid":"d419017e73ff4b9e","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/d419017e73ff4b9e","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748551745,"stop":1761748552505,"duration":760}},{"uid":"cc6b77d522ba2dbc","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/cc6b77d522ba2dbc","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747817696,"stop":1761747818688,"duration":992}},{"uid":"18900a3aeb74a770","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/18900a3aeb74a770","status":"passed","time":{"start":1761746698183,"stop":1761746699957,"duration":1774}},{"uid":"1133087c0c54dc51","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/1133087c0c54dc51","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745672694,"stop":1761745673476,"duration":782}},{"uid":"56805cf4de17c37e","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/56805cf4de17c37e","status":"passed","time":{"start":1761576562394,"stop":1761576563834,"duration":1440}},{"uid":"92c5c133e65ee5bb","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/92c5c133e65ee5bb","status":"passed","time":{"start":1761557217788,"stop":1761557219206,"duration":1418}},{"uid":"a44bb0a29fa848fb","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/a44bb0a29fa848fb","status":"passed","time":{"start":1761308443463,"stop":1761308444851,"duration":1388}},{"uid":"348f8efe403c3b24","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/348f8efe403c3b24","status":"passed","time":{"start":1761306589776,"stop":1761306591267,"duration":1491}},{"uid":"e93ef2c4eb344d94","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/e93ef2c4eb344d94","status":"passed","time":{"start":1761136888111,"stop":1761136889595,"duration":1484}}]},"tags":["backend"]},"source":"3848bc983c454d38.json","parameterValues":["'manager_client'","'main_space'","'Space'","'manager_client'","200"]}