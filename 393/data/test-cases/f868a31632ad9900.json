{"uid":"f868a31632ad9900","name":"Архивирование Project-документа для роли manager","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"095f967bb8ed7e1afafe0b879db5dfa8","time":{"start":1761747775179,"stop":1761747775363,"duration":184},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:112: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761747760278,"stop":1761747760278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761747760278,"stop":1761747760906,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761747765139,"stop":1761747765458,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761747765458,"stop":1761747765749,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761747765749,"stop":1761747766336,"duration":587},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761747766550,"stop":1761747766846,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:112: AssertionError","steps":[{"name":"Случайный клиент (owner_client) создаёт Project-документ для архивации (title: 29.10_14:22:55 Project Doc For archive Check)","time":{"start":1761747775179,"stop":1761747775363,"duration":184},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 112, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки архивирования","time":{"start":1761747775362,"stop":1761747775363,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 112, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"7cb0bb94ee2cded3","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/7cb0bb94ee2cded3","status":"passed","time":{"start":1761746631720,"stop":1761746632504,"duration":784}},{"uid":"9d2282736c5cede0","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/9d2282736c5cede0","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761745638727,"stop":1761745639048,"duration":321}},{"uid":"1762f63043a72ff8","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/1762f63043a72ff8","status":"passed","time":{"start":1761576504367,"stop":1761576505044,"duration":677}},{"uid":"95ffeca752170aa4","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/95ffeca752170aa4","status":"passed","time":{"start":1761557160919,"stop":1761557161677,"duration":758}},{"uid":"b9f7fad682991aa1","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/b9f7fad682991aa1","status":"passed","time":{"start":1761308385590,"stop":1761308386257,"duration":667}},{"uid":"5073eeeee6ae9f33","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/5073eeeee6ae9f33","status":"passed","time":{"start":1761306532861,"stop":1761306533557,"duration":696}},{"uid":"b50d33760a6ca5bf","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/b50d33760a6ca5bf","status":"passed","time":{"start":1761136827888,"stop":1761136828600,"duration":712}},{"uid":"d1faf9a40e4ec419","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/d1faf9a40e4ec419","status":"passed","time":{"start":1761135481916,"stop":1761135482865,"duration":949}},{"uid":"e5402574695aa35d","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/e5402574695aa35d","status":"passed","time":{"start":1761133944667,"stop":1761133945373,"duration":706}},{"uid":"115d648ba5dec314","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/115d648ba5dec314","status":"passed","time":{"start":1761128247124,"stop":1761128247952,"duration":828}},{"uid":"e322012392dd6321","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/e322012392dd6321","status":"passed","time":{"start":1761124353293,"stop":1761124354130,"duration":837}},{"uid":"6fb8e33bae63e43b","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/6fb8e33bae63e43b","status":"passed","time":{"start":1761119202019,"stop":1761119203379,"duration":1360}},{"uid":"24f48112aa675c8c","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/24f48112aa675c8c","status":"passed","time":{"start":1761053244607,"stop":1761053245253,"duration":646}},{"uid":"3561d7404a82b58c","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/3561d7404a82b58c","status":"passed","time":{"start":1761047133295,"stop":1761047134022,"duration":727}},{"uid":"90c360a1f0466790","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/90c360a1f0466790","status":"passed","time":{"start":1760614540071,"stop":1760614540904,"duration":833}},{"uid":"56e9ed41c93bb46a","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/56e9ed41c93bb46a","status":"passed","time":{"start":1760599342116,"stop":1760599342864,"duration":748}},{"uid":"6480378c19781e45","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/6480378c19781e45","status":"passed","time":{"start":1760535377121,"stop":1760535378525,"duration":1404}},{"uid":"5027e81f2d2a4a10","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/5027e81f2d2a4a10","status":"passed","time":{"start":1760533821113,"stop":1760533822021,"duration":908}},{"uid":"73e41c45c3e5a1e1","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/73e41c45c3e5a1e1","status":"passed","time":{"start":1760532413411,"stop":1760532414188,"duration":777}},{"uid":"ec2229befd156d37","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/ec2229befd156d37","status":"passed","time":{"start":1760529235940,"stop":1760529236615,"duration":675}}]},"tags":["backend"]},"source":"f868a31632ad9900.json","parameterValues":["'manager_client'","200"]}