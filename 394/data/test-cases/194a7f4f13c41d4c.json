{"uid":"194a7f4f13c41d4c","name":"Редактирование Personal-документа: создание owner, редактирование guest","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_personal_doc_different_roles","historyId":"f0959b98c354ab6a775f8c7ab989f6c9","time":{"start":1761818694783,"stop":1761818695277,"duration":494},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[owner_personal_by_guest]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', editor_fixture = 'guest_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:197: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761818618313,"stop":1761818618313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761818618313,"stop":1761818618921,"duration":608},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761818622457,"stop":1761818623066,"duration":609},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761818623066,"stop":1761818623350,"duration":284},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761818625210,"stop":1761818625496,"duration":286},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761818633318,"stop":1761818633592,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[owner_personal_by_guest]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', editor_fixture = 'guest_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:197: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью owner","time":{"start":1761818694783,"stop":1761818695276,"duration":493},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 197, in test_edit_personal_doc_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2546-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"editor_fixture","value":"'guest_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":44},"items":[{"uid":"ad7b27a8972640a5","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ad7b27a8972640a5","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748566217,"stop":1761748566339,"duration":122}},{"uid":"a4906d37bedf537a","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/a4906d37bedf537a","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747832945,"stop":1761747833127,"duration":182}},{"uid":"3b54861bca8ffae2","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/3b54861bca8ffae2","status":"passed","time":{"start":1761746731200,"stop":1761746732053,"duration":853}},{"uid":"d5646177377051f9","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/d5646177377051f9","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745684533,"stop":1761745684652,"duration":119}},{"uid":"868c5e1410d892f5","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/868c5e1410d892f5","status":"passed","time":{"start":1761576588561,"stop":1761576589217,"duration":656}},{"uid":"b56f561d5f0f950d","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/b56f561d5f0f950d","status":"passed","time":{"start":1761557245719,"stop":1761557246419,"duration":700}},{"uid":"1b3cb8974b6af5f0","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/1b3cb8974b6af5f0","status":"passed","time":{"start":1761308470604,"stop":1761308471225,"duration":621}},{"uid":"b22e4f97e80570de","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/b22e4f97e80570de","status":"passed","time":{"start":1761306619131,"stop":1761306619812,"duration":681}},{"uid":"c5bf2ae6084e430f","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/c5bf2ae6084e430f","status":"passed","time":{"start":1761136916559,"stop":1761136917267,"duration":708}},{"uid":"797541e58a385a4e","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/797541e58a385a4e","status":"passed","time":{"start":1761135579484,"stop":1761135580272,"duration":788}},{"uid":"d61a621659d88ad7","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/d61a621659d88ad7","status":"passed","time":{"start":1761134027908,"stop":1761134028541,"duration":633}},{"uid":"da26450fd39f2e07","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/da26450fd39f2e07","status":"passed","time":{"start":1761128353544,"stop":1761128354358,"duration":814}},{"uid":"16f27b274819778d","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/16f27b274819778d","status":"passed","time":{"start":1761124462053,"stop":1761124462906,"duration":853}},{"uid":"86c152c720b320fe","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/86c152c720b320fe","status":"passed","time":{"start":1761119294175,"stop":1761119295008,"duration":833}},{"uid":"69635ccb207de7a1","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/69635ccb207de7a1","status":"passed","time":{"start":1761053331034,"stop":1761053331672,"duration":638}},{"uid":"c76363856660c261","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/c76363856660c261","status":"passed","time":{"start":1761047221871,"stop":1761047222568,"duration":697}},{"uid":"3d042cc3ca0a2cdc","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/3d042cc3ca0a2cdc","status":"passed","time":{"start":1760614637571,"stop":1760614638345,"duration":774}},{"uid":"aea9de45a5573472","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/aea9de45a5573472","status":"passed","time":{"start":1760599435153,"stop":1760599435885,"duration":732}},{"uid":"12e0bddd33280403","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/12e0bddd33280403","status":"passed","time":{"start":1760535468194,"stop":1760535468831,"duration":637}},{"uid":"6dc14d2a1b58b0b6","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/6dc14d2a1b58b0b6","status":"passed","time":{"start":1760533938071,"stop":1760533938944,"duration":873}}]},"tags":["backend"]},"source":"194a7f4f13c41d4c.json","parameterValues":["'owner_client'","'guest_client'","403"]}