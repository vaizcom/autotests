{"uid":"6bbe1ff1420d1a1","name":"Получение соседей Space-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_space_doc_siblings_access_by_roles","historyId":"29ab9b704ae2807dcbabe08d8f5724a7","time":{"start":1752234399867,"stop":1752234400780,"duration":913},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Получение соседей Space-документа для роли {role}')\n    \n        doc_ids = []\n        with allure.step(f'{role} создаёт три Space-документа для проверки соседей'):\n            for index in range(3):\n                title = f'{current_date}_{role}_Sibling Test Doc {index}'\n                create_resp = api_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                if create_resp.status_code != 200:\n                    with allure.step(f'Не удалось создать документ {index}, статус {create_resp.status_code}'):\n>                       assert expected_status == 403\nE                       assert 200 == 403\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1752234256305,"stop":1752234256305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752234256305,"stop":1752234256305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752234256305,"stop":1752234256305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752234256305,"stop":1752234256819,"duration":514},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752234256305,"stop":1752234256305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752234281745,"stop":1752234282019,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752234282019,"stop":1752234282520,"duration":501},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Получение соседей Space-документа для роли {role}')\n    \n        doc_ids = []\n        with allure.step(f'{role} создаёт три Space-документа для проверки соседей'):\n            for index in range(3):\n                title = f'{current_date}_{role}_Sibling Test Doc {index}'\n                create_resp = api_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                if create_resp.status_code != 200:\n                    with allure.step(f'Не удалось создать документ {index}, статус {create_resp.status_code}'):\n>                       assert expected_status == 403\nE                       assert 200 == 403\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:42: AssertionError","steps":[{"name":"owner создаёт три Space-документа для проверки соседей","time":{"start":1752234399867,"stop":1752234400780,"duration":913},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 42, in test_get_space_doc_siblings_access_by_roles\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ 2, статус 400","time":{"start":1752234400780,"stop":1752234400780,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 42, in test_get_space_doc_siblings_access_by_roles\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2527-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":29,"unknown":0,"total":31},"items":[{"uid":"7d1d601fd65caf4c","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/7d1d601fd65caf4c","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1752233584915,"stop":1752233585280,"duration":365}},{"uid":"5af536593a9245a4","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/5af536593a9245a4","status":"passed","time":{"start":1752232644191,"stop":1752232646148,"duration":1957}},{"uid":"5696a3c9155557c7","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/5696a3c9155557c7","status":"passed","time":{"start":1752232182099,"stop":1752232184191,"duration":2092}},{"uid":"6160f193cbe25327","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/6160f193cbe25327","status":"passed","time":{"start":1752223577522,"stop":1752223579211,"duration":1689}},{"uid":"a1b7f12c2d5d806f","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/a1b7f12c2d5d806f","status":"passed","time":{"start":1752218316681,"stop":1752218318442,"duration":1761}},{"uid":"84b1ea7ab13f76e6","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/84b1ea7ab13f76e6","status":"passed","time":{"start":1752151083411,"stop":1752151085519,"duration":2108}},{"uid":"a72442af0132de83","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/a72442af0132de83","status":"passed","time":{"start":1752148933816,"stop":1752148935630,"duration":1814}},{"uid":"96e0711a458ebcd","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/96e0711a458ebcd","status":"passed","time":{"start":1752138408944,"stop":1752138410916,"duration":1972}},{"uid":"87edb0ef3c69951f","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/87edb0ef3c69951f","status":"passed","time":{"start":1752137283688,"stop":1752137285648,"duration":1960}},{"uid":"8f22e940d7f7aaf9","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/8f22e940d7f7aaf9","status":"passed","time":{"start":1752133920552,"stop":1752133922755,"duration":2203}},{"uid":"4c0493a66a50c7d8","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/4c0493a66a50c7d8","status":"passed","time":{"start":1752066507462,"stop":1752066509419,"duration":1957}},{"uid":"d8ac5981d8675025","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/d8ac5981d8675025","status":"passed","time":{"start":1752065513021,"stop":1752065514888,"duration":1867}},{"uid":"6d5e980e92941532","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/6d5e980e92941532","status":"passed","time":{"start":1752064730921,"stop":1752064732942,"duration":2021}},{"uid":"715c88e8779683db","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/715c88e8779683db","status":"passed","time":{"start":1752062514558,"stop":1752062516463,"duration":1905}},{"uid":"d244b9fc90528336","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/d244b9fc90528336","status":"passed","time":{"start":1752060652143,"stop":1752060654075,"duration":1932}},{"uid":"dd1614d70eaf1924","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/dd1614d70eaf1924","status":"passed","time":{"start":1752059626545,"stop":1752059628637,"duration":2092}},{"uid":"108e33cf7495d5c1","reportUrl":"https://vaizcom.github.io/autotests/265//#testresult/108e33cf7495d5c1","status":"passed","time":{"start":1752050804877,"stop":1752050806674,"duration":1797}},{"uid":"8ba25b0c4a3face4","reportUrl":"https://vaizcom.github.io/autotests/264//#testresult/8ba25b0c4a3face4","status":"passed","time":{"start":1752049401699,"stop":1752049403875,"duration":2176}},{"uid":"8ef380ce957d24e0","reportUrl":"https://vaizcom.github.io/autotests/263//#testresult/8ef380ce957d24e0","status":"passed","time":{"start":1752047982259,"stop":1752047984435,"duration":2176}},{"uid":"1912a410890f44a6","reportUrl":"https://vaizcom.github.io/autotests/262//#testresult/1912a410890f44a6","status":"passed","time":{"start":1752046668973,"stop":1752046670974,"duration":2001}}]},"tags":["backend"]},"source":"6bbe1ff1420d1a1.json","parameterValues":["'owner_client'","200"]}