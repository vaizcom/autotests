{"uid":"bd692dc80bc7bded","name":"Создание Project-документа для роли manager","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_project_doc_access_by_roles","historyId":"1b628a28e1e30098bb08b5d1d699ba83","time":{"start":1752235267977,"stop":1752235269285,"duration":1308},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n            assert resp.status_code == expected_status\n    \n            if expected_status == 200:\n                with allure.step('Созданный Project-документ содержит title'):\n                    assert resp.json()['payload']['document']['title'] == title\n                    doc_id = resp.json()['payload']['document']['_id']\n                with allure.step(f'Архивация Project-документа, {expected_status}'):\n                    archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>                   assert archive_resp.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:76: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1752235204429,"stop":1752235204429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752235204429,"stop":1752235204429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752235204429,"stop":1752235204429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752235204429,"stop":1752235204429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752235241221,"stop":1752235241593,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752235241593,"stop":1752235242262,"duration":669},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752235244282,"stop":1752235244976,"duration":694},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1752235248929,"stop":1752235249285,"duration":356},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_project_doc_access_by_roles[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_project_doc_access_by_roles(\n        request, main_project, main_space, client_fixture, expected_status\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Project Doc'\n    \n        allure.dynamic.title(f'Создание Project-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Project-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n            assert resp.status_code == expected_status\n    \n            if expected_status == 200:\n                with allure.step('Созданный Project-документ содержит title'):\n                    assert resp.json()['payload']['document']['title'] == title\n                    doc_id = resp.json()['payload']['document']['_id']\n                with allure.step(f'Архивация Project-документа, {expected_status}'):\n                    archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>                   assert archive_resp.status_code == 200\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:76: AssertionError","steps":[{"name":"manager создаёт Project-документ, 200","time":{"start":1752235267978,"stop":1752235269285,"duration":1307},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 76, in test_create_and_archive_project_doc_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[{"name":"Созданный Project-документ содержит title","time":{"start":1752235268867,"stop":1752235268867,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Project-документа, 200","time":{"start":1752235268867,"stop":1752235269285,"duration":418},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 76, in test_create_and_archive_project_doc_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":17,"unknown":0,"total":20},"items":[{"uid":"7f00230caa1bbe08","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/7f00230caa1bbe08","status":"passed","time":{"start":1752235250990,"stop":1752235251958,"duration":968}},{"uid":"16003274aed66b87","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/16003274aed66b87","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752234312049,"stop":1752234312436,"duration":387}},{"uid":"358d58506756bf35","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/358d58506756bf35","status":"passed","time":{"start":1752234297083,"stop":1752234298011,"duration":928}},{"uid":"2f2713e23aae5c99","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/2f2713e23aae5c99","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752233473668,"stop":1752233474411,"duration":743}},{"uid":"5ee4778810dbece3","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/5ee4778810dbece3","status":"passed","time":{"start":1752232552228,"stop":1752232552842,"duration":614}},{"uid":"3753140beb23c5d1","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/3753140beb23c5d1","status":"passed","time":{"start":1752232083694,"stop":1752232084362,"duration":668}},{"uid":"adccd89bd5335e8f","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/adccd89bd5335e8f","status":"passed","time":{"start":1752223495489,"stop":1752223496045,"duration":556}},{"uid":"8be089f179e8eff9","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/8be089f179e8eff9","status":"passed","time":{"start":1752218257792,"stop":1752218258442,"duration":650}},{"uid":"8bfba34f392e7e82","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/8bfba34f392e7e82","status":"passed","time":{"start":1752151023985,"stop":1752151024905,"duration":920}},{"uid":"74f20584f1c56cef","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/74f20584f1c56cef","status":"passed","time":{"start":1752148899292,"stop":1752148899936,"duration":644}},{"uid":"e5d265eb4e0c4cce","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/e5d265eb4e0c4cce","status":"passed","time":{"start":1752138385823,"stop":1752138386589,"duration":766}},{"uid":"c625644d76ec0223","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/c625644d76ec0223","status":"passed","time":{"start":1752137261528,"stop":1752137262216,"duration":688}},{"uid":"7ff0b8f62eca612","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/7ff0b8f62eca612","status":"passed","time":{"start":1752133893053,"stop":1752133894040,"duration":987}},{"uid":"40c2d2a02ce9672d","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/40c2d2a02ce9672d","status":"passed","time":{"start":1752066489651,"stop":1752066490286,"duration":635}},{"uid":"68db42cd452a1ca8","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/68db42cd452a1ca8","status":"passed","time":{"start":1752065495363,"stop":1752065496007,"duration":644}},{"uid":"8e55448b08b41050","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/8e55448b08b41050","status":"passed","time":{"start":1752064710193,"stop":1752064710834,"duration":641}},{"uid":"cc584674dbd693e6","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/cc584674dbd693e6","status":"passed","time":{"start":1752062494845,"stop":1752062496151,"duration":1306}},{"uid":"93ce6a227f5611a3","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/93ce6a227f5611a3","status":"passed","time":{"start":1752060634977,"stop":1752060635630,"duration":653}},{"uid":"2ff324dedf14256d","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/2ff324dedf14256d","status":"passed","time":{"start":1752059606143,"stop":1752059606840,"duration":697}}]},"tags":["backend"]},"source":"bd692dc80bc7bded.json","parameterValues":["'manager_client'","200"]}