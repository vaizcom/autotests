{"uid":"14a50659db8e1635","name":"Проверка доступа к документу в Space для роли manager","fullName":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles#test_get_project_and_space_doc_access_by_roles","historyId":"552237e626c9178cbe90448d11adca87","time":{"start":1761747839982,"stop":1761747840186,"duration":204},"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\nдля проверки разных типов клиентов и контейнеров документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[space_doc-manager]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'manager_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7ff3c6cb0680>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Space', kind_id = '6866309d85fb8d104544a61e'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761747760278,"stop":1761747760278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761747760278,"stop":1761747760906,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761747765139,"stop":1761747765458,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761747765458,"stop":1761747765749,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761747766550,"stop":1761747766846,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761747839982,"stop":1761747839982,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[space_doc-manager]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'manager_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7ff3c6cb0680>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Space', kind_id = '6866309d85fb8d104544a61e'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документу в Space","time":{"start":1761747839982,"stop":1761747839982,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Space разными ролями","time":{"start":1761747839982,"stop":1761747840185,"duration":203},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1761747839982,"stop":1761747840185,"duration":203},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761747840192,"stop":1761747840192,"duration":0},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761747840192,"stop":1761747840192,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"678b191d7a5adfd2","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/678b191d7a5adfd2","status":"passed","time":{"start":1761746742980,"stop":1761746744535,"duration":1555}},{"uid":"ad03b8a9dbd8c543","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/ad03b8a9dbd8c543","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745689991,"stop":1761745690112,"duration":121}},{"uid":"989076c55aef74fb","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/989076c55aef74fb","status":"passed","time":{"start":1761576597100,"stop":1761576598345,"duration":1245}},{"uid":"591cd5b6b66b911a","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/591cd5b6b66b911a","status":"passed","time":{"start":1761557254021,"stop":1761557255250,"duration":1229}},{"uid":"868605533dedf421","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/868605533dedf421","status":"passed","time":{"start":1761308478701,"stop":1761308479912,"duration":1211}},{"uid":"25fa262275de9672","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/25fa262275de9672","status":"passed","time":{"start":1761306627797,"stop":1761306630063,"duration":2266}},{"uid":"3ada32928716494e","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/3ada32928716494e","status":"passed","time":{"start":1761136925739,"stop":1761136927099,"duration":1360}},{"uid":"1064327c96466fad","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/1064327c96466fad","status":"passed","time":{"start":1761135589178,"stop":1761135590731,"duration":1553}},{"uid":"e85b1efd465c60a1","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/e85b1efd465c60a1","status":"passed","time":{"start":1761134036956,"stop":1761134038477,"duration":1521}},{"uid":"a7ee41c9c87cdbf2","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/a7ee41c9c87cdbf2","status":"passed","time":{"start":1761128364737,"stop":1761128366387,"duration":1650}},{"uid":"c30c453a55a0ea14","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/c30c453a55a0ea14","status":"passed","time":{"start":1761124473769,"stop":1761124475562,"duration":1793}},{"uid":"d5a4d2b2b8496070","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/d5a4d2b2b8496070","status":"passed","time":{"start":1761119303641,"stop":1761119304952,"duration":1311}},{"uid":"a70f981a9d9676b5","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/a70f981a9d9676b5","status":"passed","time":{"start":1761053339450,"stop":1761053340895,"duration":1445}},{"uid":"a01e7d5716dbe11b","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/a01e7d5716dbe11b","status":"passed","time":{"start":1761047230930,"stop":1761047232252,"duration":1322}},{"uid":"f0740c216bd48283","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/f0740c216bd48283","status":"passed","time":{"start":1760614647523,"stop":1760614649022,"duration":1499}},{"uid":"6159ee5cc176f99b","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/6159ee5cc176f99b","status":"passed","time":{"start":1760599447200,"stop":1760599448743,"duration":1543}},{"uid":"63dc93035c2a997a","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/63dc93035c2a997a","status":"passed","time":{"start":1760535477004,"stop":1760535478301,"duration":1297}},{"uid":"c2bb356d519eb521","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/c2bb356d519eb521","status":"passed","time":{"start":1760533949648,"stop":1760533951494,"duration":1846}},{"uid":"59a4de237e42837","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/59a4de237e42837","status":"passed","time":{"start":1760532514187,"stop":1760532515482,"duration":1295}},{"uid":"e34f9896c23bd89","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/e34f9896c23bd89","status":"passed","time":{"start":1760529327640,"stop":1760529328918,"duration":1278}}]},"tags":["backend"]},"source":"14a50659db8e1635.json","parameterValues":["'manager_client'","'main_space'","200","'Space'"]}