import pytest

from test_backend.data.endpoints.Document.document_endpoints import create_document_endpoint
import allure


pytestmark = [pytest.mark.backend]


@pytest.mark.parametrize('kind', ['Space', 'Project', 'Member'])
def test_create_document(owner_client, temp_space, temp_project, temp_member, kind):
    kind_id_map = {
        'Space': temp_space,
        'Project': temp_project,
        'Member': temp_member,
    }

    kind_id = kind_id_map[kind]
    title = f'Document for {kind}'

    allure.dynamic.title(f'–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {kind}')

    with allure.step(f'POST /CreateDocument –¥–ª—è {kind}, –ü—Ä–æ–≤–µ—Ä–∫–∞ status_code –∏ title'):
        response = owner_client.post(
            **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title=title)
        )

    assert response.status_code == 200
    payload = response.json()['payload']
    assert payload['document']['title'] == title


MAX_DOC_NAME_LENGTH = 2048


@pytest.mark.parametrize(
    'title, expected_status, expected_actual_title',
    [
        (None, 200, 'Untitled document'),
        ('', 400, None),
        (' ', 200, ' '),
        ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),
        ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
        (123, 400, None),
        (True, 400, None),
        ([], 400, None),
        ('–î–æ–∫—É–º–µ–Ω—Ç', 200, '–î–æ–∫—É–º–µ–Ω—Ç'),
        ('üòäüìÑ‚ú®', 200, 'üòäüìÑ‚ú®'),
        ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),
        ('Title with & < > " \'', 200, 'Title with & < > " \''),
    ],
    ids=[
        'None',
        'empty string',
        'single space',
        'title = MAX length (2048)',
        'title > MAX length (2049)',
        'int as title',
        'bool as title',
        'list as title',
        'cyrillic',
        'emoji',
        'html injection',
        'special chars',
    ],
)
@allure.title('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ title ‚Äî –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å {expected_status}')
def test_document_title_validation(
    owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request
):
    allure.dynamic.title(f'–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Äî –∫–µ–π—Å: [{request.node.callspec.id}] (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_status})')

    with allure.step(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ [{request.node.callspec.id}] (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_status})'):
        response = owner_client.post(
            **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)
        )

    with allure.step(f'–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ = {expected_status}'):
        assert response.status_code == expected_status

    if expected_status == 200:
        with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ª—è title –≤ payload'):
            document = response.json()['payload']['document']
            assert document['_id']
            actual_title = document.get('title')
            assert actual_title == expected_actual_title

    elif response.status_code == 400:
        with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—é "title"'):
            body = response.json()
            error = body.get('error', {})

            with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ error.code == "InvalidForm"'):
                assert (
                    error.get('code') == 'InvalidForm'
                ), f'–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ "InvalidForm", –Ω–æ –ø–æ–ª—É—á–µ–Ω: {error.get("code")}'

            title_codes = []
            with allure.step('–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –ø–æ –ø–æ–ª—é "title" –≤ error.fields'):
                for field in error.get('fields', []):
                    if field.get('name') == 'title':
                        title_codes = field.get('codes', [])
                        break
                assert title_codes, '–ü–æ–ª–µ "title" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ error.fields –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–¥—ã –æ—à–∏–±–æ–∫'

            with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è title'):
                if title == '':
                    assert (
                        'title should not be empty' in title_codes
                    ), f'–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ "TitleShouldNotBeEmpty", –ø–æ–ª—É—á–µ–Ω—ã: {title_codes}'
                elif isinstance(title, str) and len(title) > MAX_DOC_NAME_LENGTH:
                    assert (
                        'FieldTooLong' in title_codes
                    ), f'–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ "FieldTooLong" –ø—Ä–∏ –¥–ª–∏–Ω–µ > {MAX_DOC_NAME_LENGTH}, –ø–æ–ª—É—á–µ–Ω—ã: {title_codes}'


@allure.title('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ü—Ä–æ–≤–µ—Ä–∫–∞ status_code –∏ title')
def test_create_child_document(owner_client, temp_space, temp_project):
    with allure.step('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞'):
        parent_title = 'Parent Doc'
        parent_resp = owner_client.post(
            **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=parent_title)
        )
        assert parent_resp.status_code == 200
        parent = parent_resp.json()['payload']['document']
        parent_id = parent['_id']

    with allure.step('2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (index=0)'):
        first_title = 'Child 1'
        first_resp = owner_client.post(
            **create_document_endpoint(
                kind='Project',
                kind_id=temp_project,
                space_id=temp_space,
                parent_document_id=parent_id,
                index=0,
                title=first_title,
            )
        )
        assert first_resp.status_code == 200
        first_doc = first_resp.json()['payload']['document']
        assert first_doc['title'] == first_title

    with allure.step('3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (index=1)'):
        second_title = 'Child 2'
        second_resp = owner_client.post(
            **create_document_endpoint(
                kind='Project',
                kind_id=temp_project,
                space_id=temp_space,
                parent_document_id=parent_id,
                index=1,
                title=second_title,
            )
        )
        assert second_resp.status_code == 200
        second_doc = second_resp.json()['payload']['document']
        assert second_doc['title'] == second_title


@pytest.mark.skip('BUG: APP-2842 CreateDocument –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç index –∏ parentDocumentId –≤ –æ—Ç–≤–µ—Ç–µ')
@pytest.mark.parametrize(
    'index, expected_status',
    [
        (0, 200),
        (None, 200),
        (-1, 400),
        (9999, 400),
    ],
    ids=['zero', 'none', 'negative', 'too large'],
)
def test_document_index_validation(owner_client, temp_space, temp_project, index, expected_status):
    allure.dynamic.title(f'–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è index ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ: {index} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_status})')
    title = f'Document with index {index}'

    with allure.step(f'–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å index={index} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_status})'):
        response = owner_client.post(
            **create_document_endpoint(
                kind='Project', kind_id=temp_project, space_id=temp_space, title=title, index=index
            )
        )

    with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞'):
        assert response.status_code == expected_status


@pytest.mark.skip('BUG: APP-2842 CreateDocument –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç index –∏ parentDocumentId –≤ –æ—Ç–≤–µ—Ç–µ')
@pytest.mark.parametrize(
    'parent_id, expected_status',
    [
        (None, 200),
        ('nonexistent_id', 400),
        ('000000000000000000000000', 400),
    ],
    ids=['no parent', 'invalid id', 'nonexistent'],
)
def test_document_parent_validation(owner_client, temp_space, temp_project, parent_id, expected_status):
    allure.dynamic.title(f'–í–∞–ª–∏–¥–∞—Ü–∏—è parentDocumentId ‚Äî –∫–µ–π—Å: {parent_id} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_status})')
    title = 'Document with parent'

    with allure.step(f'–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å parentDocumentId={parent_id} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_status})'):
        response = owner_client.post(
            **create_document_endpoint(
                kind='Project', kind_id=temp_project, space_id=temp_space, title=title, parent_document_id=parent_id
            )
        )

    with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞'):
        assert response.status_code == expected_status


@pytest.mark.parametrize(
    'kind, get_fixture, expected_status',
    [
        ('Project', 'temp_project', 200),
        ('Space', 'temp_space', 200),
        ('Member', 'temp_member', 200),
        ('WrongKind', 'temp_project', 400),
        ('Project', 'nonexistent_id', 400),
    ],
    ids=['project', 'space', 'member', 'wrong kind', 'wrong id'],
)
def test_document_kind_and_id(owner_client, temp_space, request, kind, get_fixture, expected_status):
    allure.dynamic.title(f'–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –∫–µ–π—Å —Å kind={kind} –∏ kindId (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_status})')

    kind_id = request.getfixturevalue(get_fixture) if get_fixture != 'nonexistent_id' else 'invalid_id'

    with allure.step(f'–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ kind={kind}, kindId={kind_id} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_status})'):
        response = owner_client.post(
            **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Kind Test')
        )

    with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞'):
        assert response.status_code == expected_status


@allure.title('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è title')
def test_document_title_duplicates(owner_client, temp_space, temp_project):
    title = 'Duplicate Title'

    with allure.step('–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º title'):
        resp1 = owner_client.post(
            **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)
        )
        assert resp1.status_code == 200

    with allure.step('–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ç–µ–º –∂–µ title'):
        resp2 = owner_client.post(
            **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)
        )
        assert resp2.status_code == 200, '–ü–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã'


@allure.title('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
def test_document_response_structure(owner_client, temp_space, temp_project):
    with allure.step('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'):
        response = owner_client.post(
            **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space)
        )
        assert response.status_code == 200

    with allure.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ'):
        document = response.json()['payload']['document']
        for field in ['_id', 'kind']:
            assert field in document, f'–ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ payload'


@allure.title('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
def test_create_document_without_auth(foreign_client, temp_space, temp_project):
    with allure.step('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≥–æ—Å—Ç–µ–º'):
        response = foreign_client.post(
            **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title='Guest test')
        )
    with allure.step('–û–∂–∏–¥–∞–µ–º 400 Unauthorized, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ SpaceIdNotSpecified'):
        assert response.status_code == 400
        assert response.json()['error']['code'] == 'SpaceIdNotSpecified'


@allure.title('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —á—É–∂–æ–º space')
def test_create_document_in_foreign_space(owner_client, foreign_space, temp_project):
    with allure.step('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ —á—É–∂–æ–º space'):
        response = owner_client.post(
            **create_document_endpoint(
                kind='Project', kind_id=temp_project, space_id=foreign_space, title='Wrong space'
            )
        )
    with allure.step('–û–∂–∏–¥–∞–µ–º 400, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ SpaceIdNotSpecified'):
        assert response.status_code == 400
        assert response.json()['error']['code'] == 'SpaceIdNotSpecified'
