{"uid":"9f61ad60a487d5c0","name":"Создание Space-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_space_doc_access_by_roles","historyId":"d9ef71fb375b91e3448c594aa8e7af45","time":{"start":1761910512988,"stop":1761910513101,"duration":113},"description":"\n    Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n    Тест выполняет следующие шаги для каждой роли:\n    1. Создает Space-документ с использованием предоставленной клиентской роли.\n    2. Проверяет, что статус ответа соответствует ожидаемому результату.\n    3. Если создание документа успешно (статус 200):\n       - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n       - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n    ","descriptionHtml":"<pre><code>Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\nТест выполняет следующие шаги для каждой роли:\n1. Создает Space-документ с использованием предоставленной клиентской роли.\n2. Проверяет, что статус ответа соответствует ожидаемому результату.\n3. Если создание документа успешно (статус 200):\n   - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n   - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n        Тест выполняет следующие шаги для каждой роли:\n        1. Создает Space-документ с использованием предоставленной клиентской роли.\n        2. Проверяет, что статус ответа соответствует ожидаемому результату.\n        3. Если создание документа успешно (статус 200):\n           - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n           - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761910495818,"stop":1761910495819,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761910495819,"stop":1761910496047,"duration":228},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761910498993,"stop":1761910499413,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761910499414,"stop":1761910499610,"duration":196},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n    Тест выполняет следующие шаги для каждой роли:\n    1. Создает Space-документ с использованием предоставленной клиентской роли.\n    2. Проверяет, что статус ответа соответствует ожидаемому результату.\n    3. Если создание документа успешно (статус 200):\n       - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n       - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n    ","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[owner]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n        Тест выполняет следующие шаги для каждой роли:\n        1. Создает Space-документ с использованием предоставленной клиентской роли.\n        2. Проверяет, что статус ответа соответствует ожидаемому результату.\n        3. Если создание документа успешно (статус 200):\n           - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n           - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","steps":[{"name":"owner создаёт Space-документ, 200","time":{"start":1761910512988,"stop":1761910513101,"duration":113},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 41, in test_create_and_archive_space_doc_access_by_roles\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2557-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":51},"items":[{"uid":"b5a66c06efb2a07b","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/b5a66c06efb2a07b","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909875488,"stop":1761909875661,"duration":173}},{"uid":"418430e716b544e5","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/418430e716b544e5","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899909363,"stop":1761899909538,"duration":175}},{"uid":"d2ac5e47a9b71aeb","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/d2ac5e47a9b71aeb","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834955476,"stop":1761834955607,"duration":131}},{"uid":"6d6a0880c3bb740c","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/6d6a0880c3bb740c","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834508094,"stop":1761834508266,"duration":172}},{"uid":"65d877a95a8a0629","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/65d877a95a8a0629","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833336810,"stop":1761833336997,"duration":187}},{"uid":"7fde85f94ff178f7","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/7fde85f94ff178f7","status":"passed","time":{"start":1761821517011,"stop":1761821517461,"duration":450}},{"uid":"7308d27be67c8ef8","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/7308d27be67c8ef8","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818637323,"stop":1761818637495,"duration":172}},{"uid":"af8c7a1045b4faee","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/af8c7a1045b4faee","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748519749,"stop":1761748519872,"duration":123}},{"uid":"9352f3d98d1d3623","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/9352f3d98d1d3623","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747780238,"stop":1761747780426,"duration":188}},{"uid":"1cb57b29211e673","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/1cb57b29211e673","status":"passed","time":{"start":1761746637122,"stop":1761746637767,"duration":645}},{"uid":"9b06ab9ae7cc5714","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/9b06ab9ae7cc5714","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745643063,"stop":1761745643191,"duration":128}},{"uid":"c4c36dc60ce64aec","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c4c36dc60ce64aec","status":"passed","time":{"start":1761576509806,"stop":1761576510307,"duration":501}},{"uid":"9dd902891619be9b","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/9dd902891619be9b","status":"passed","time":{"start":1761557166677,"stop":1761557167154,"duration":477}},{"uid":"20f6a51a8af40034","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/20f6a51a8af40034","status":"passed","time":{"start":1761308390664,"stop":1761308391320,"duration":656}},{"uid":"4b4a0194d10a1422","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/4b4a0194d10a1422","status":"passed","time":{"start":1761306538382,"stop":1761306538852,"duration":470}},{"uid":"59648e8de87ab4df","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/59648e8de87ab4df","status":"passed","time":{"start":1761136833800,"stop":1761136834271,"duration":471}},{"uid":"98c8e633fd9a5b89","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/98c8e633fd9a5b89","status":"passed","time":{"start":1761135488465,"stop":1761135489005,"duration":540}},{"uid":"8de5d08024ab4a1b","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/8de5d08024ab4a1b","status":"passed","time":{"start":1761133949992,"stop":1761133950669,"duration":677}},{"uid":"dc50a5033a581069","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/dc50a5033a581069","status":"passed","time":{"start":1761128253210,"stop":1761128253763,"duration":553}},{"uid":"f01a402f60b959a5","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/f01a402f60b959a5","status":"passed","time":{"start":1761124359863,"stop":1761124361044,"duration":1181}}]},"tags":["backend"]},"source":"9f61ad60a487d5c0.json","parameterValues":["'owner_client'","200"]}