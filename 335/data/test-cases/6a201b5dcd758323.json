{"uid":"6a201b5dcd758323","name":"Create task with minimal payload: клиент=member_client, ожидаемый статус=200","fullName":"tests.test_backend.task.access_task.test_create_task#test_create_task_with_minimal_payload","historyId":"b3f7091db66090294e334bca994bcfd6","time":{"start":1758892138975,"stop":1758892139799,"duration":824},"status":"broken","statusMessage":"TypeError: validate_hrid() missing 3 required positional arguments: 'space_id', 'project_id', and 'task_hrid'","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_minimal_payload[member]>>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nclient_fixture = 'member_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_task_with_minimal_payload(request, main_space, main_board, client_fixture, expected_status):\n        allure.dynamic.title(\n            f\"Create task with minimal payload: клиент={client_fixture}, ожидаемый статус={expected_status}\")\n    \n        with allure.step(f\"Получение клиента для {client_fixture}\"):\n            client = get_client(request, client_fixture)\n    \n        with allure.step(f\"Получение id пользователя который создает задачу\"):\n            member_id = get_member_profile(client, main_space)\n    \n        with allure.step(\"Создание задачи с минимальным payload\"):\n            payload = create_task_endpoint(space_id=main_space, board=main_board)\n            response = create_task(client, payload)\n    \n        # Проверяем статус ответа\n        with allure.step(f\"Проверка статус-кода: ожидаем {expected_status}\"):\n            assert response.status_code == expected_status, response.text\n    \n        # Если запрос успешен, проверяем содержимое ответа\n        if response.status_code == 200:\n            with allure.step(\"Проверяем содержимое ответа с задачей\"):\n                task = response.json()[\"payload\"][\"task\"]\n    \n                with allure.step(\"Проверка обязательных полей\"):\n                    assert task[\"board\"] == main_board, \"Ошибка: неверное значение поля 'board'\"\n                    assert task[\"name\"] == \"Untitled task\", \"Ошибка: неверное значение поля 'name'\"\n                    assert task[\"completed\"] is False, \"Ошибка: поле 'completed' должно быть False\"\n                    assert task[\"creator\"] == member_id, \"Ошибка: 'creator' не соответствует memberId пользователя\"\n    \n                with allure.step(\"Проверка системных полей\"):\n                    assert \"_id\" in task, \"Ошибка: отсутствует поле '_id'\"\n                    assert task[\"createdAt\"] is not None, \"Ошибка: поле 'createdAt' должно быть задано\"\n                    assert task[\"updatedAt\"] is not None, \"Ошибка: поле 'updatedAt' должно быть задано\"\n    \n                # Проверка корректности формата `hrid`\n                with allure.step(\"Проверяем поле 'hrid'\"):\n                    assert \"hrid\" in task, \"Поле 'hrid' отсутствует\"\n>                   validate_hrid(task[\"hrid\"])\nE                   TypeError: validate_hrid() missing 3 required positional arguments: 'space_id', 'project_id', and 'task_hrid'\n\ntests/test_backend/task/access_task/test_create_task.py:60: TypeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1758891603278,"stop":1758891603278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1758891603279,"stop":1758891603279,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1758891603279,"stop":1758891603279,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1758891603279,"stop":1758891603279,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1758891603279,"stop":1758891604175,"duration":896},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1758891604175,"stop":1758891604914,"duration":739},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1758891609206,"stop":1758891609604,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1758891611749,"stop":1758891612288,"duration":539},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"TypeError: validate_hrid() missing 3 required positional arguments: 'space_id', 'project_id', and 'task_hrid'","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_minimal_payload[member]>>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nclient_fixture = 'member_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_task_with_minimal_payload(request, main_space, main_board, client_fixture, expected_status):\n        allure.dynamic.title(\n            f\"Create task with minimal payload: клиент={client_fixture}, ожидаемый статус={expected_status}\")\n    \n        with allure.step(f\"Получение клиента для {client_fixture}\"):\n            client = get_client(request, client_fixture)\n    \n        with allure.step(f\"Получение id пользователя который создает задачу\"):\n            member_id = get_member_profile(client, main_space)\n    \n        with allure.step(\"Создание задачи с минимальным payload\"):\n            payload = create_task_endpoint(space_id=main_space, board=main_board)\n            response = create_task(client, payload)\n    \n        # Проверяем статус ответа\n        with allure.step(f\"Проверка статус-кода: ожидаем {expected_status}\"):\n            assert response.status_code == expected_status, response.text\n    \n        # Если запрос успешен, проверяем содержимое ответа\n        if response.status_code == 200:\n            with allure.step(\"Проверяем содержимое ответа с задачей\"):\n                task = response.json()[\"payload\"][\"task\"]\n    \n                with allure.step(\"Проверка обязательных полей\"):\n                    assert task[\"board\"] == main_board, \"Ошибка: неверное значение поля 'board'\"\n                    assert task[\"name\"] == \"Untitled task\", \"Ошибка: неверное значение поля 'name'\"\n                    assert task[\"completed\"] is False, \"Ошибка: поле 'completed' должно быть False\"\n                    assert task[\"creator\"] == member_id, \"Ошибка: 'creator' не соответствует memberId пользователя\"\n    \n                with allure.step(\"Проверка системных полей\"):\n                    assert \"_id\" in task, \"Ошибка: отсутствует поле '_id'\"\n                    assert task[\"createdAt\"] is not None, \"Ошибка: поле 'createdAt' должно быть задано\"\n                    assert task[\"updatedAt\"] is not None, \"Ошибка: поле 'updatedAt' должно быть задано\"\n    \n                # Проверка корректности формата `hrid`\n                with allure.step(\"Проверяем поле 'hrid'\"):\n                    assert \"hrid\" in task, \"Поле 'hrid' отсутствует\"\n>                   validate_hrid(task[\"hrid\"])\nE                   TypeError: validate_hrid() missing 3 required positional arguments: 'space_id', 'project_id', and 'task_hrid'\n\ntests/test_backend/task/access_task/test_create_task.py:60: TypeError","steps":[{"name":"Получение клиента для member_client","time":{"start":1758892138975,"stop":1758892138975,"duration":0},"status":"passed","steps":[{"name":"Получение клиента для member_client","time":{"start":1758892138975,"stop":1758892138975,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Получение id пользователя который создает задачу","time":{"start":1758892138975,"stop":1758892139481,"duration":506},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание задачи с минимальным payload","time":{"start":1758892139481,"stop":1758892139798,"duration":317},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статус-кода: ожидаем 200","time":{"start":1758892139798,"stop":1758892139798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем содержимое ответа с задачей","time":{"start":1758892139798,"stop":1758892139798,"duration":0},"status":"broken","statusMessage":"TypeError: validate_hrid() missing 3 required positional arguments: 'space_id', 'project_id', and 'task_hrid'\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/access_task/test_create_task.py\", line 60, in test_create_task_with_minimal_payload\n    validate_hrid(task[\"hrid\"])\n","steps":[{"name":"Проверка обязательных полей","time":{"start":1758892139798,"stop":1758892139798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка системных полей","time":{"start":1758892139798,"stop":1758892139798,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем поле 'hrid'","time":{"start":1758892139798,"stop":1758892139798,"duration":0},"status":"broken","statusMessage":"TypeError: validate_hrid() missing 3 required positional arguments: 'space_id', 'project_id', and 'task_hrid'\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/access_task/test_create_task.py\", line 60, in test_create_task_with_minimal_payload\n    validate_hrid(task[\"hrid\"])\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":9,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.task.access_task"},{"name":"suite","value":"test_create_task"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task.access_task.test_create_task"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"98aa9475dbaa4952","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/98aa9475dbaa4952","status":"passed","time":{"start":1758808076463,"stop":1758808077251,"duration":788}},{"uid":"d3078376ab2cfb7d","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/d3078376ab2cfb7d","status":"passed","time":{"start":1758806947977,"stop":1758806948795,"duration":818}}]},"tags":["backend"]},"source":"6a201b5dcd758323.json","parameterValues":["'member_client'","200"]}