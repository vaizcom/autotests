{"uid":"38346be7d196acbc","name":"Создание Space-документа для роли manager","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_space_doc_access_by_roles","historyId":"849ed52b30c2bef60875190cb8c888da","time":{"start":1759767330538,"stop":1759767330937,"duration":399},"description":"\n    Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n    Тест выполняет следующие шаги для каждой роли:\n    1. Создает Space-документ с использованием предоставленной клиентской роли.\n    2. Проверяет, что статус ответа соответствует ожидаемому результату.\n    3. Если создание документа успешно (статус 200):\n       - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n       - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n    ","descriptionHtml":"<pre><code>Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\nТест выполняет следующие шаги для каждой роли:\n1. Создает Space-документ с использованием предоставленной клиентской роли.\n2. Проверяет, что статус ответа соответствует ожидаемому результату.\n3. Если создание документа успешно (статус 200):\n   - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n   - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[manager]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n        Тест выполняет следующие шаги для каждой роли:\n        1. Создает Space-документ с использованием предоставленной клиентской роли.\n        2. Проверяет, что статус ответа соответствует ожидаемому результату.\n        3. Если создание документа успешно (статус 200):\n           - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n           - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1759767275032,"stop":1759767275032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767275033,"stop":1759767275653,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767275653,"stop":1759767276290,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767278005,"stop":1759767278446,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n    Тест выполняет следующие шаги для каждой роли:\n    1. Создает Space-документ с использованием предоставленной клиентской роли.\n    2. Проверяет, что статус ответа соответствует ожидаемому результату.\n    3. Если создание документа успешно (статус 200):\n       - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n       - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n    ","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_space_doc_access_by_roles[manager]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_space_doc_access_by_roles(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Тест для проверки создания и архивирования Space-документа с разными клиентскими ролями.\n        Тест выполняет следующие шаги для каждой роли:\n        1. Создает Space-документ с использованием предоставленной клиентской роли.\n        2. Проверяет, что статус ответа соответствует ожидаемому результату.\n        3. Если создание документа успешно (статус 200):\n           - Проверяет, что заголовок созданного документа соответствует ожидаемому.\n           - Архивирует созданный Space-документ и проверяет статус запроса на архивирование.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} {role} Space Doc'\n    \n        allure.dynamic.title(f'Создание Space-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Space-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:41: AssertionError","steps":[{"name":"manager создаёт Space-документ, 200","time":{"start":1759767330539,"stop":1759767330936,"duration":397},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 41, in test_create_and_archive_space_doc_access_by_roles\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":1,"skipped":0,"passed":71,"unknown":0,"total":76},"items":[{"uid":"2afc6cd16588564d","reportUrl":"https://vaizcom.github.io/autotests/343//#testresult/2afc6cd16588564d","status":"passed","time":{"start":1759767297611,"stop":1759767299129,"duration":1518}},{"uid":"b48cbe72ce0a941d","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/b48cbe72ce0a941d","status":"passed","time":{"start":1759753761199,"stop":1759753761674,"duration":475}},{"uid":"4b1f116da66e886a","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/4b1f116da66e886a","status":"passed","time":{"start":1759743722678,"stop":1759743723254,"duration":576}},{"uid":"914676ede99a32d1","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/914676ede99a32d1","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485385413,"stop":1759485385413,"duration":0}},{"uid":"846131b912cc201f","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/846131b912cc201f","status":"passed","time":{"start":1759232349159,"stop":1759232349645,"duration":486}},{"uid":"63f0b4a97d76bb","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/63f0b4a97d76bb","status":"passed","time":{"start":1759140638934,"stop":1759140639428,"duration":494}},{"uid":"9483377267f54d7d","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/9483377267f54d7d","status":"passed","time":{"start":1758891664218,"stop":1758891664929,"duration":711}},{"uid":"2544d6b1457f0239","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/2544d6b1457f0239","status":"passed","time":{"start":1758807607395,"stop":1758807608095,"duration":700}},{"uid":"2d685efd3ec1999b","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/2d685efd3ec1999b","status":"passed","time":{"start":1758806488706,"stop":1758806489472,"duration":766}},{"uid":"707872d6c8907636","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/707872d6c8907636","status":"passed","time":{"start":1758791050407,"stop":1758791051057,"duration":650}},{"uid":"f828f70d1dfaa12f","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/f828f70d1dfaa12f","status":"passed","time":{"start":1758540402928,"stop":1758540403529,"duration":601}},{"uid":"6c4817a6b2b362b1","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/6c4817a6b2b362b1","status":"passed","time":{"start":1758289003033,"stop":1758289003735,"duration":702}},{"uid":"cb41554f8cb01ecd","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/cb41554f8cb01ecd","status":"passed","time":{"start":1755852215957,"stop":1755852216442,"duration":485}},{"uid":"76f42078dde968d8","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/76f42078dde968d8","status":"passed","time":{"start":1755851715885,"stop":1755851716412,"duration":527}},{"uid":"8a25a23febe0bd6c","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/8a25a23febe0bd6c","status":"passed","time":{"start":1755847843369,"stop":1755847844021,"duration":652}},{"uid":"9d8198edd3523f15","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/9d8198edd3523f15","status":"passed","time":{"start":1755777711726,"stop":1755777712263,"duration":537}},{"uid":"7b4e7d9b36894eb8","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/7b4e7d9b36894eb8","status":"passed","time":{"start":1755774358414,"stop":1755774358948,"duration":534}},{"uid":"f92225143b7c689f","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/f92225143b7c689f","status":"passed","time":{"start":1755694453917,"stop":1755694454581,"duration":664}},{"uid":"c5c4f842203d281c","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/c5c4f842203d281c","status":"passed","time":{"start":1755693886884,"stop":1755693887411,"duration":527}},{"uid":"139814f50634e76a","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/139814f50634e76a","status":"passed","time":{"start":1755686986479,"stop":1755686987021,"duration":542}}]},"tags":["backend"]},"source":"38346be7d196acbc.json","parameterValues":["'manager_client'","200"]}