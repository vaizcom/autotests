{"uid":"b6a5d80cc09da409","name":"Просмотр соседей Space-документа для роли member (без создания)","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_space_doc_siblings_view_only_access","historyId":"03bbbf4ee5af7d6d6eb167f4948a8ed5","time":{"start":1752235386375,"stop":1752235387629,"duration":1254},"status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '6870fd7a4aff74363a1c8e8f' == '6870fd7b4aff74363a1c8eab'\n  \n  - 6870fd7b4aff74363a1c8eab\n  ?        ^              ^^\n  + 6870fd7a4aff74363a1c8e8f\n  ?        ^              ^^","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_view_only_access[member]>>\nmain_space = '6866309d85fb8d104544a61e'\nmember_client = <tests.core.client.APIClient object at 0x7fb9bb82d990>\nclient_fixture = 'member_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_view_only_access(request, main_space, member_client, client_fixture, expected_status):\n        role = client_fixture.replace('_client', '')\n        api_client = request.getfixturevalue(client_fixture)\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Просмотр соседей Space-документа для роли {role} (без создания)')\n    \n        with allure.step('Создание документов (в рандомной роли) для теста просмотра siblings'):\n            random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n            doc_ids = []\n            for index in range(3):\n                title = f'{current_date}_member_create_Sibling Test Doc {index}'\n                create_resp = random_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                assert create_resp.status_code == 200\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n    \n        with allure.step(f'{role} пытается получить соседей для среднего документа'):\n            siblings_resp = api_client.post(\n                **get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space)\n            )\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка наличия левого и правого соседа'):\n                    assert 'prevSibling' in payload, 'Нет prevSibling в ответе'\n                    assert 'nextSibling' in payload, 'Нет nextSibling в ответе'\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n>                   assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\nE                   AssertionError: Некорректный правый сосед\nE                   assert '6870fd7a4aff74363a1c8e8f' == '6870fd7b4aff74363a1c8eab'\nE                     \nE                     - 6870fd7b4aff74363a1c8eab\nE                     ?        ^              ^^\nE                     + 6870fd7a4aff74363a1c8e8f\nE                     ?        ^              ^^\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:112: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1752235198931,"stop":1752235198931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752235198931,"stop":1752235198931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752235198931,"stop":1752235198931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752235198931,"stop":1752235198931,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752235198932,"stop":1752235199408,"duration":476},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752235231054,"stop":1752235232639,"duration":1585},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752235232639,"stop":1752235233118,"duration":479},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752235235347,"stop":1752235235851,"duration":504},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '6870fd7a4aff74363a1c8e8f' == '6870fd7b4aff74363a1c8eab'\n  \n  - 6870fd7b4aff74363a1c8eab\n  ?        ^              ^^\n  + 6870fd7a4aff74363a1c8e8f\n  ?        ^              ^^","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_view_only_access[member]>>\nmain_space = '6866309d85fb8d104544a61e'\nmember_client = <tests.core.client.APIClient object at 0x7fb9bb82d990>\nclient_fixture = 'member_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_view_only_access(request, main_space, member_client, client_fixture, expected_status):\n        role = client_fixture.replace('_client', '')\n        api_client = request.getfixturevalue(client_fixture)\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Просмотр соседей Space-документа для роли {role} (без создания)')\n    \n        with allure.step('Создание документов (в рандомной роли) для теста просмотра siblings'):\n            random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n            doc_ids = []\n            for index in range(3):\n                title = f'{current_date}_member_create_Sibling Test Doc {index}'\n                create_resp = random_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                assert create_resp.status_code == 200\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n    \n        with allure.step(f'{role} пытается получить соседей для среднего документа'):\n            siblings_resp = api_client.post(\n                **get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space)\n            )\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка наличия левого и правого соседа'):\n                    assert 'prevSibling' in payload, 'Нет prevSibling в ответе'\n                    assert 'nextSibling' in payload, 'Нет nextSibling в ответе'\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n>                   assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\nE                   AssertionError: Некорректный правый сосед\nE                   assert '6870fd7a4aff74363a1c8e8f' == '6870fd7b4aff74363a1c8eab'\nE                     \nE                     - 6870fd7b4aff74363a1c8eab\nE                     ?        ^              ^^\nE                     + 6870fd7a4aff74363a1c8e8f\nE                     ?        ^              ^^\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:112: AssertionError","steps":[{"name":"Создание документов (в рандомной роли) для теста просмотра siblings","time":{"start":1752235386375,"stop":1752235387366,"duration":991},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member пытается получить соседей для среднего документа","time":{"start":1752235387366,"stop":1752235387628,"duration":262},"status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '6870fd7a4aff74363a1c8e8f' == '6870fd7b4aff74363a1c8eab'\n  \n  - 6870fd7b4aff74363a1c8eab\n  ?        ^              ^^\n  + 6870fd7a4aff74363a1c8e8f\n  ?        ^              ^^\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 112, in test_get_space_doc_siblings_view_only_access\n    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n","steps":[{"name":"Проверка наличия левого и правого соседа","time":{"start":1752235387628,"stop":1752235387628,"duration":0},"status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '6870fd7a4aff74363a1c8e8f' == '6870fd7b4aff74363a1c8eab'\n  \n  - 6870fd7b4aff74363a1c8eab\n  ?        ^              ^^\n  + 6870fd7a4aff74363a1c8e8f\n  ?        ^              ^^\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 112, in test_get_space_doc_siblings_view_only_access\n    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2615-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":32,"unknown":0,"total":33},"items":[{"uid":"76491ae0cf4ab035","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/76491ae0cf4ab035","status":"passed","time":{"start":1752234443708,"stop":1752234446754,"duration":3046}},{"uid":"6e826affe6bfb115","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/6e826affe6bfb115","status":"passed","time":{"start":1752234408729,"stop":1752234411043,"duration":2314}},{"uid":"3df56ae5de49fe47","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/3df56ae5de49fe47","status":"passed","time":{"start":1752233595177,"stop":1752233597501,"duration":2324}},{"uid":"9d5f6892e407d056","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/9d5f6892e407d056","status":"passed","time":{"start":1752232654718,"stop":1752232656660,"duration":1942}},{"uid":"9b20b40ad3b02d4b","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/9b20b40ad3b02d4b","status":"passed","time":{"start":1752232192698,"stop":1752232194688,"duration":1990}},{"uid":"b3b06705bea8d5b4","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/b3b06705bea8d5b4","status":"passed","time":{"start":1752223586150,"stop":1752223587755,"duration":1605}},{"uid":"a27061a82b66845f","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/a27061a82b66845f","status":"passed","time":{"start":1752218325913,"stop":1752218327729,"duration":1816}},{"uid":"355466f5f3c5181e","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/355466f5f3c5181e","status":"passed","time":{"start":1752151094348,"stop":1752151096258,"duration":1910}},{"uid":"cdcfdcc61b95286","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/cdcfdcc61b95286","status":"passed","time":{"start":1752148942542,"stop":1752148944096,"duration":1554}},{"uid":"8b41cf204cc60ca","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/8b41cf204cc60ca","status":"passed","time":{"start":1752138419202,"stop":1752138421117,"duration":1915}},{"uid":"157dffde95d42272","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/157dffde95d42272","status":"passed","time":{"start":1752137293695,"stop":1752137295544,"duration":1849}},{"uid":"12a0eb21b1ce465b","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/12a0eb21b1ce465b","status":"passed","time":{"start":1752133931425,"stop":1752133933515,"duration":2090}},{"uid":"6793805f00dd4266","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/6793805f00dd4266","status":"passed","time":{"start":1752066516581,"stop":1752066518278,"duration":1697}},{"uid":"5bf3069e6e96862b","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/5bf3069e6e96862b","status":"passed","time":{"start":1752065523176,"stop":1752065524972,"duration":1796}},{"uid":"72981eea91e186a0","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/72981eea91e186a0","status":"passed","time":{"start":1752064741901,"stop":1752064743998,"duration":2097}},{"uid":"134b1957a0ac061c","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/134b1957a0ac061c","status":"passed","time":{"start":1752062525155,"stop":1752062527037,"duration":1882}},{"uid":"ccb9fd6dc54198a4","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/ccb9fd6dc54198a4","status":"passed","time":{"start":1752060662591,"stop":1752060664553,"duration":1962}},{"uid":"41b6f1f3b051944","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/41b6f1f3b051944","status":"passed","time":{"start":1752059637624,"stop":1752059639743,"duration":2119}},{"uid":"2b8bc698acaa7b90","reportUrl":"https://vaizcom.github.io/autotests/265//#testresult/2b8bc698acaa7b90","status":"passed","time":{"start":1752050814629,"stop":1752050816403,"duration":1774}},{"uid":"ac3e35debb422221","reportUrl":"https://vaizcom.github.io/autotests/264//#testresult/ac3e35debb422221","status":"passed","time":{"start":1752049412341,"stop":1752049414475,"duration":2134}}]},"tags":["backend"]},"source":"b6a5d80cc09da409.json","parameterValues":["'member_client'","200"]}