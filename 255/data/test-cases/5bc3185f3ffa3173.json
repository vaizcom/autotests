{"uid":"5bc3185f3ffa3173","name":"Создание документа — кейс: [empty string] (ожидается 400)","fullName":"tests.test_backend.document.test_create_document#test_document_title_validation","historyId":"bcebe45f2c128a57770baa0f71120465","time":{"start":1751965086115,"stop":1751965086412,"duration":297},"status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f1376664d50>\ntemp_space = '686cdd4fdc7db2861c7d5387'\ntemp_project = '686cdd50dc7db2861c7d5412', title = '', expected_status = 400\nexpected_actual_title = None\nrequest = <FixtureRequest for <Function test_document_title_validation[empty string]>>\n\n    @pytest.mark.parametrize(\n        'title, expected_status, expected_actual_title',\n        [\n            (None, 200, 'Untitled document'),\n            ('', 400, None),\n            (' ', 200, ' '),\n            ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),\n            ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),\n            # Дополнительно:\n            (123, 400, None),\n            (True, 400, None),\n            ([], 400, None),\n            ('Документ', 200, 'Документ'),\n            ('\uD83D\uDE0A\uD83D\uDCC4✨', 200, '\uD83D\uDE0A\uD83D\uDCC4✨'),\n            ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),\n            ('Title with & < > \" \\'', 200, 'Title with & < > \" \\''),\n        ],\n        ids=[\n            'None',\n            'empty string',\n            'single space',\n            'title = MAX length (2048)',\n            'title > MAX length (2049)',\n            'int as title',\n            'bool as title',\n            'list as title',\n            'cyrillic',\n            'emoji',\n            'html injection',\n            'special chars',\n        ],\n    )\n    @allure.title('Создание документа с различными значениями title — ожидаемый статус {expected_status}')\n    def test_document_title_validation(\n        owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request\n    ):\n        allure.dynamic.title(f'Создание документа — кейс: [{request.node.callspec.id}] (ожидается {expected_status})')\n    \n        with allure.step(f'Отправка запроса [{request.node.callspec.id}] (ожидается {expected_status})'):\n            response = owner_client.post(\n                **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)\n            )\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status}'):\n>           assert response.status_code == expected_status\nE           assert 200 == 400\nE            +  where 200 = <Response [200]>.status_code\n\ntests/test_backend/document/test_create_document.py:80: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1751965006757,"stop":1751965006757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1751965006757,"stop":1751965006757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1751965006757,"stop":1751965006757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1751965006757,"stop":1751965006757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1751965006758,"stop":1751965007510,"duration":752},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1751965007511,"stop":1751965008487,"duration":976},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1751965008487,"stop":1751965009041,"duration":554},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f1376664d50>\ntemp_space = '686cdd4fdc7db2861c7d5387'\ntemp_project = '686cdd50dc7db2861c7d5412', title = '', expected_status = 400\nexpected_actual_title = None\nrequest = <FixtureRequest for <Function test_document_title_validation[empty string]>>\n\n    @pytest.mark.parametrize(\n        'title, expected_status, expected_actual_title',\n        [\n            (None, 200, 'Untitled document'),\n            ('', 400, None),\n            (' ', 200, ' '),\n            ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),\n            ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),\n            # Дополнительно:\n            (123, 400, None),\n            (True, 400, None),\n            ([], 400, None),\n            ('Документ', 200, 'Документ'),\n            ('\uD83D\uDE0A\uD83D\uDCC4✨', 200, '\uD83D\uDE0A\uD83D\uDCC4✨'),\n            ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),\n            ('Title with & < > \" \\'', 200, 'Title with & < > \" \\''),\n        ],\n        ids=[\n            'None',\n            'empty string',\n            'single space',\n            'title = MAX length (2048)',\n            'title > MAX length (2049)',\n            'int as title',\n            'bool as title',\n            'list as title',\n            'cyrillic',\n            'emoji',\n            'html injection',\n            'special chars',\n        ],\n    )\n    @allure.title('Создание документа с различными значениями title — ожидаемый статус {expected_status}')\n    def test_document_title_validation(\n        owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request\n    ):\n        allure.dynamic.title(f'Создание документа — кейс: [{request.node.callspec.id}] (ожидается {expected_status})')\n    \n        with allure.step(f'Отправка запроса [{request.node.callspec.id}] (ожидается {expected_status})'):\n            response = owner_client.post(\n                **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)\n            )\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status}'):\n>           assert response.status_code == expected_status\nE           assert 200 == 400\nE            +  where 200 = <Response [200]>.status_code\n\ntests/test_backend/document/test_create_document.py:80: AssertionError","steps":[{"name":"Отправка запроса [empty string] (ожидается 400)","time":{"start":1751965086115,"stop":1751965086411,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что статус ответа = 400","time":{"start":1751965086411,"stop":1751965086411,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_create_document.py\", line 80, in test_document_title_validation\n    assert response.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_project::0","time":{"start":1751965235371,"stop":1751965235371,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1751965235372,"stop":1751965236002,"duration":630},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_create_document"},{"name":"host","value":"pkrvmbietmlfzoi"},{"name":"thread","value":"2586-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_create_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_actual_title","value":"None"},{"name":"expected_status","value":"400"},{"name":"title","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":79,"unknown":0,"total":81},"items":[{"uid":"f048130065bef2f6","reportUrl":"https://vaizcom.github.io/autotests/254//#testresult/f048130065bef2f6","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1751959176554,"stop":1751959176851,"duration":297}},{"uid":"401174affc64a3c4","reportUrl":"https://vaizcom.github.io/autotests/253//#testresult/401174affc64a3c4","status":"passed","time":{"start":1751897295743,"stop":1751897296040,"duration":297}},{"uid":"652ab7fb507666f","reportUrl":"https://vaizcom.github.io/autotests/252//#testresult/652ab7fb507666f","status":"passed","time":{"start":1751893984446,"stop":1751893984740,"duration":294}},{"uid":"5e36b0ca4e695639","reportUrl":"https://vaizcom.github.io/autotests/251//#testresult/5e36b0ca4e695639","status":"passed","time":{"start":1751889668177,"stop":1751889668516,"duration":339}},{"uid":"6eb959d34b96a5b0","reportUrl":"https://vaizcom.github.io/autotests/250//#testresult/6eb959d34b96a5b0","status":"passed","time":{"start":1751888345848,"stop":1751888346128,"duration":280}},{"uid":"b862cb9b398522e3","reportUrl":"https://vaizcom.github.io/autotests/249//#testresult/b862cb9b398522e3","status":"passed","time":{"start":1751887740991,"stop":1751887741305,"duration":314}},{"uid":"10e81c6338932ca6","reportUrl":"https://vaizcom.github.io/autotests/248//#testresult/10e81c6338932ca6","status":"passed","time":{"start":1751884516346,"stop":1751884516684,"duration":338}},{"uid":"79a43e658800b1a4","reportUrl":"https://vaizcom.github.io/autotests/247//#testresult/79a43e658800b1a4","status":"passed","time":{"start":1751882756047,"stop":1751882756365,"duration":318}},{"uid":"750f1e7c2d38b4b4","reportUrl":"https://vaizcom.github.io/autotests/246//#testresult/750f1e7c2d38b4b4","status":"passed","time":{"start":1751534994948,"stop":1751534995237,"duration":289}},{"uid":"a6bde9cb09f7dd99","reportUrl":"https://vaizcom.github.io/autotests/245//#testresult/a6bde9cb09f7dd99","status":"passed","time":{"start":1751525393492,"stop":1751525393840,"duration":348}},{"uid":"28e9f6f85b1a34fb","reportUrl":"https://vaizcom.github.io/autotests/244//#testresult/28e9f6f85b1a34fb","status":"passed","time":{"start":1751463817024,"stop":1751463817225,"duration":201}},{"uid":"ae3334bd5cbfdc4f","reportUrl":"https://vaizcom.github.io/autotests/243//#testresult/ae3334bd5cbfdc4f","status":"passed","time":{"start":1751463528473,"stop":1751463528757,"duration":284}},{"uid":"f0249d28bcd716cc","reportUrl":"https://vaizcom.github.io/autotests/242//#testresult/f0249d28bcd716cc","status":"passed","time":{"start":1751463327889,"stop":1751463328180,"duration":291}},{"uid":"67ee5f4135ff3cc6","reportUrl":"https://vaizcom.github.io/autotests/241//#testresult/67ee5f4135ff3cc6","status":"passed","time":{"start":1751457946232,"stop":1751457946542,"duration":310}},{"uid":"10f3d14c6820ee8","reportUrl":"https://vaizcom.github.io/autotests/240//#testresult/10f3d14c6820ee8","status":"passed","time":{"start":1751454646352,"stop":1751454646628,"duration":276}},{"uid":"3699baa44b9a4318","reportUrl":"https://vaizcom.github.io/autotests/239//#testresult/3699baa44b9a4318","status":"passed","time":{"start":1751446328573,"stop":1751446328919,"duration":346}},{"uid":"15596ec01f926cd1","reportUrl":"https://vaizcom.github.io/autotests/238//#testresult/15596ec01f926cd1","status":"passed","time":{"start":1751445997639,"stop":1751445997937,"duration":298}},{"uid":"45dcd7383537f67c","reportUrl":"https://vaizcom.github.io/autotests/237//#testresult/45dcd7383537f67c","status":"passed","time":{"start":1751445280524,"stop":1751445280919,"duration":395}},{"uid":"a8740d88952be794","reportUrl":"https://vaizcom.github.io/autotests/236//#testresult/a8740d88952be794","status":"passed","time":{"start":1751442799230,"stop":1751442799541,"duration":311}},{"uid":"1a857a1880ae3d39","reportUrl":"https://vaizcom.github.io/autotests/235//#testresult/1a857a1880ae3d39","status":"passed","time":{"start":1751442422961,"stop":1751442423691,"duration":730}}]},"tags":["backend"]},"source":"5bc3185f3ffa3173.json","parameterValues":["None","400","''"]}