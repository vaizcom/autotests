{"uid":"eeac597f4d3d44e1","name":"Архивирование Project-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"40ffb62620ea30d2684cda2caee27ab6","time":{"start":1761921774809,"stop":1761921775166,"duration":357},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n                    assert expected_status == 403\n                return\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n    \n        with allure.step(f'Архивация Project-документа в роли {role} (ожидается статус {expected_status})'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>           assert archive_resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:119: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761921767725,"stop":1761921768196,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761921768380,"stop":1761921768849,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n                    assert expected_status == 403\n                return\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n    \n        with allure.step(f'Архивация Project-документа в роли {role} (ожидается статус {expected_status})'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>           assert archive_resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:119: AssertionError","steps":[{"name":"Случайный клиент (manager_client) создаёт Project-документ для архивации (title: 31.10_14:42:54 Project Doc For archive Check)","time":{"start":1761921774809,"stop":1761921775026,"duration":217},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Project-документа в роли owner (ожидается статус 200)","time":{"start":1761921775026,"stop":1761921775165,"duration":139},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 119, in test_archive_project_doc\n    assert archive_resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":55},"items":[{"uid":"7a5712f95c800dd4","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/7a5712f95c800dd4","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761912083327,"stop":1761912083452,"duration":125}},{"uid":"d542f01558536310","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/d542f01558536310","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761911176479,"stop":1761911176655,"duration":176}},{"uid":"27c767abf3696d79","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/27c767abf3696d79","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761910803754,"stop":1761910803881,"duration":127}},{"uid":"5c75f58877dc3cb8","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/5c75f58877dc3cb8","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910506706,"stop":1761910507068,"duration":362}},{"uid":"d3314df8b839808d","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/d3314df8b839808d","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761909870229,"stop":1761909870406,"duration":177}},{"uid":"c41e7e5934ae16e2","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/c41e7e5934ae16e2","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761899903780,"stop":1761899903960,"duration":180}},{"uid":"7a944dae080d6b22","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/7a944dae080d6b22","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834951432,"stop":1761834951780,"duration":348}},{"uid":"12f1e03bc6e1495e","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/12f1e03bc6e1495e","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834502357,"stop":1761834502835,"duration":478}},{"uid":"55d1381652220777","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/55d1381652220777","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761833329273,"stop":1761833329450,"duration":177}},{"uid":"caff1aa843143477","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/caff1aa843143477","status":"passed","time":{"start":1761821510937,"stop":1761821512240,"duration":1303}},{"uid":"5d9a4b8d6cef92e","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/5d9a4b8d6cef92e","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761818631373,"stop":1761818631545,"duration":172}},{"uid":"98f7f62080dc016d","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/98f7f62080dc016d","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748514348,"stop":1761748514984,"duration":636}},{"uid":"2057fff925b0ba0d","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/2057fff925b0ba0d","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761747774989,"stop":1761747775173,"duration":184}},{"uid":"53ae4419f9dd0623","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/53ae4419f9dd0623","status":"passed","time":{"start":1761746630721,"stop":1761746631718,"duration":997}},{"uid":"5241b71bbf76ed69","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/5241b71bbf76ed69","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745638348,"stop":1761745638721,"duration":373}},{"uid":"e6a526d63f699b78","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/e6a526d63f699b78","status":"passed","time":{"start":1761576503647,"stop":1761576504365,"duration":718}},{"uid":"e5ff180a989c5eb4","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/e5ff180a989c5eb4","status":"passed","time":{"start":1761557159948,"stop":1761557160917,"duration":969}},{"uid":"ec41851708bffd74","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/ec41851708bffd74","status":"passed","time":{"start":1761308384785,"stop":1761308385588,"duration":803}},{"uid":"871e3bad123c4354","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/871e3bad123c4354","status":"passed","time":{"start":1761306532143,"stop":1761306532859,"duration":716}},{"uid":"60aa931daf4d4246","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/60aa931daf4d4246","status":"passed","time":{"start":1761136827123,"stop":1761136827886,"duration":763}}]},"tags":["backend"]},"source":"eeac597f4d3d44e1.json","parameterValues":["'owner_client'","200"]}