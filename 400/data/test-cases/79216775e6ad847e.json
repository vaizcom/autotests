{"uid":"79216775e6ad847e","name":"Дублирование Personal-документа: создание owner, дублирование owner","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_personal_doc_different_roles","historyId":"5085e776703f81b896edfd527200f999","time":{"start":1761909900000,"stop":1761909900188,"duration":188},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[owner_self_personal]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', duplicator_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:208: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761909856376,"stop":1761909856684,"duration":308},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761909860625,"stop":1761909861236,"duration":611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761909861236,"stop":1761909861504,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761909872152,"stop":1761909872728,"duration":576},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[owner_self_personal]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', duplicator_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:208: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью owner","time":{"start":1761909900000,"stop":1761909900187,"duration":187},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 208, in test_duplicate_personal_doc_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2551-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"duplicator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":50},"items":[{"uid":"84d0461299767885","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/84d0461299767885","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899933861,"stop":1761899934037,"duration":176}},{"uid":"4a076d431a6713ff","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/4a076d431a6713ff","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834976425,"stop":1761834976740,"duration":315}},{"uid":"3deb5123f264349e","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/3deb5123f264349e","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834533200,"stop":1761834533385,"duration":185}},{"uid":"7a40061c1eefdca1","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/7a40061c1eefdca1","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833363513,"stop":1761833363692,"duration":179}},{"uid":"236c7337d69c23e2","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/236c7337d69c23e2","status":"passed","time":{"start":1761821548829,"stop":1761821549720,"duration":891}},{"uid":"f3c94318d4f745c8","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/f3c94318d4f745c8","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818666576,"stop":1761818666746,"duration":170}},{"uid":"c7266be0c7585cc6","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/c7266be0c7585cc6","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748540401,"stop":1761748540518,"duration":117}},{"uid":"47812233a96d4711","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/47812233a96d4711","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747804453,"stop":1761747804650,"duration":197}},{"uid":"2e97b6b0e8e77187","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2e97b6b0e8e77187","status":"passed","time":{"start":1761746674571,"stop":1761746675985,"duration":1414}},{"uid":"e6cf8935d93b6080","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/e6cf8935d93b6080","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745662225,"stop":1761745662352,"duration":127}},{"uid":"8d78fd6b7d5ed298","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/8d78fd6b7d5ed298","status":"passed","time":{"start":1761576542773,"stop":1761576543814,"duration":1041}},{"uid":"a4763c20962a1c93","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/a4763c20962a1c93","status":"passed","time":{"start":1761557199321,"stop":1761557200339,"duration":1018}},{"uid":"a456f95017f95548","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/a456f95017f95548","status":"passed","time":{"start":1761308424249,"stop":1761308425184,"duration":935}},{"uid":"2e71fc7534e77664","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/2e71fc7534e77664","status":"passed","time":{"start":1761306571448,"stop":1761306572431,"duration":983}},{"uid":"7dd1bb612f4d4c36","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/7dd1bb612f4d4c36","status":"passed","time":{"start":1761136867898,"stop":1761136868912,"duration":1014}},{"uid":"91f029a1cf67295e","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/91f029a1cf67295e","status":"passed","time":{"start":1761135525429,"stop":1761135526618,"duration":1189}},{"uid":"36d719820c1028b7","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/36d719820c1028b7","status":"passed","time":{"start":1761133982161,"stop":1761133983259,"duration":1098}},{"uid":"1ab5de55123331c7","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/1ab5de55123331c7","status":"passed","time":{"start":1761128294370,"stop":1761128295532,"duration":1162}},{"uid":"6d55abda01f7160a","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/6d55abda01f7160a","status":"passed","time":{"start":1761124401229,"stop":1761124402473,"duration":1244}},{"uid":"adf283f6d9707a7","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/adf283f6d9707a7","status":"passed","time":{"start":1761119243290,"stop":1761119244317,"duration":1027}}]},"tags":["backend"]},"source":"79216775e6ad847e.json","parameterValues":["'owner_client'","'owner_client'","200"]}