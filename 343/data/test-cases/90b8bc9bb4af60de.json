{"uid":"90b8bc9bb4af60de","name":"Проверка доступа к siblings Space-документа: создатель - manager, просматривающий - member","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_project_and_space_siblings_docs_access_by_roles","historyId":"9ebed49ff2d3158dc52a6176e2ee691b","time":{"start":1759767446450,"stop":1759767447478,"duration":1028},"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n- Типа документа (Space/Project)\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Некорректный левый сосед\nassert '68e3eb967fd6ea7a1c48ea1e' == '68e3eb961140fad5d3ded7ce'\n  \n  - 68e3eb961140fad5d3ded7ce\n  + 68e3eb967fd6ea7a1c48ea1e","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-manager_docs_by_member_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'member_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n>                   assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\nE                   AssertionError: Некорректный левый сосед\nE                   assert '68e3eb967fd6ea7a1c48ea1e' == '68e3eb961140fad5d3ded7ce'\nE                     \nE                     - 68e3eb961140fad5d3ded7ce\nE                     + 68e3eb967fd6ea7a1c48ea1e\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:106: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767260767,"stop":1759767261300,"duration":533},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767261301,"stop":1759767261750,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767263179,"stop":1759767263448,"duration":269},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1759767264277,"stop":1759767264703,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","status":"failed","statusMessage":"AssertionError: Некорректный левый сосед\nassert '68e3eb967fd6ea7a1c48ea1e' == '68e3eb961140fad5d3ded7ce'\n  \n  - 68e3eb961140fad5d3ded7ce\n  + 68e3eb967fd6ea7a1c48ea1e","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-manager_docs_by_member_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'member_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n>                   assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\nE                   AssertionError: Некорректный левый сосед\nE                   assert '68e3eb967fd6ea7a1c48ea1e' == '68e3eb961140fad5d3ded7ce'\nE                     \nE                     - 68e3eb961140fad5d3ded7ce\nE                     + 68e3eb967fd6ea7a1c48ea1e\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:106: AssertionError","steps":[{"name":"Создание трёх Space-документов пользователем manager","time":{"start":1759767446450,"stop":1759767447262,"duration":812},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Попытка получения siblings для среднего документа пользователем member","time":{"start":1759767447262,"stop":1759767447478,"duration":216},"status":"failed","statusMessage":"AssertionError: Некорректный левый сосед\nassert '68e3eb967fd6ea7a1c48ea1e' == '68e3eb961140fad5d3ded7ce'\n  \n  - 68e3eb961140fad5d3ded7ce\n  + 68e3eb967fd6ea7a1c48ea1e\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 106, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n","steps":[{"name":"Проверка корректности данных siblings","time":{"start":1759767447478,"stop":1759767447478,"duration":0},"status":"failed","statusMessage":"AssertionError: Некорректный левый сосед\nassert '68e3eb967fd6ea7a1c48ea1e' == '68e3eb961140fad5d3ded7ce'\n  \n  - 68e3eb961140fad5d3ded7ce\n  + 68e3eb967fd6ea7a1c48ea1e\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 106, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2672-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"creator_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":32,"unknown":0,"total":34},"items":[{"uid":"af5ea6d2d084b6ae","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/af5ea6d2d084b6ae","status":"passed","time":{"start":1759753907736,"stop":1759753909436,"duration":1700}},{"uid":"5909b601631bf7fa","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/5909b601631bf7fa","status":"passed","time":{"start":1759743871736,"stop":1759743873573,"duration":1837}},{"uid":"d9d345678455dbe0","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/d9d345678455dbe0","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485533887,"stop":1759485533887,"duration":0}},{"uid":"c15dcf36c884d93f","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/c15dcf36c884d93f","status":"passed","time":{"start":1759232496923,"stop":1759232498623,"duration":1700}},{"uid":"508dbee362f7412c","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/508dbee362f7412c","status":"passed","time":{"start":1759140778234,"stop":1759140779883,"duration":1649}},{"uid":"292d0f9b50b1a2df","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/292d0f9b50b1a2df","status":"passed","time":{"start":1758891848319,"stop":1758891850487,"duration":2168}},{"uid":"8123f4489fc099b0","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/8123f4489fc099b0","status":"passed","time":{"start":1758807799774,"stop":1758807802078,"duration":2304}},{"uid":"78d1382f09436ba8","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/78d1382f09436ba8","status":"passed","time":{"start":1758806673506,"stop":1758806675598,"duration":2092}},{"uid":"aa93fc635424d5b3","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/aa93fc635424d5b3","status":"passed","time":{"start":1758791253039,"stop":1758791255250,"duration":2211}},{"uid":"4b3350ecadf3812f","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/4b3350ecadf3812f","status":"passed","time":{"start":1758540563250,"stop":1758540565094,"duration":1844}},{"uid":"44ec4ff11cbb0297","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/44ec4ff11cbb0297","status":"passed","time":{"start":1758289192684,"stop":1758289195122,"duration":2438}},{"uid":"1756e861c0514607","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/1756e861c0514607","status":"passed","time":{"start":1755852364930,"stop":1755852366698,"duration":1768}},{"uid":"f1de0b088395961a","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/f1de0b088395961a","status":"passed","time":{"start":1755851873034,"stop":1755851874803,"duration":1769}},{"uid":"266f152479787421","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/266f152479787421","status":"passed","time":{"start":1755848011876,"stop":1755848013845,"duration":1969}},{"uid":"63226bc99734c936","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/63226bc99734c936","status":"passed","time":{"start":1755777876774,"stop":1755777878789,"duration":2015}},{"uid":"87d93df7dd3e3901","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/87d93df7dd3e3901","status":"passed","time":{"start":1755774514623,"stop":1755774516496,"duration":1873}},{"uid":"2197870e40679da4","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/2197870e40679da4","status":"passed","time":{"start":1755694645322,"stop":1755694647576,"duration":2254}},{"uid":"dab03676747dc47f","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/dab03676747dc47f","status":"passed","time":{"start":1755694076442,"stop":1755694078287,"duration":1845}},{"uid":"6f2b52265d23e63d","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/6f2b52265d23e63d","status":"passed","time":{"start":1755687146733,"stop":1755687149188,"duration":2455}},{"uid":"7b5036dea8caa134","reportUrl":"https://vaizcom.github.io/autotests/321//#testresult/7b5036dea8caa134","status":"passed","time":{"start":1755682894636,"stop":1755682896499,"duration":1863}}]},"tags":["backend"]},"source":"90b8bc9bb4af60de.json","parameterValues":["'member_client'","'main_space'","'manager_client'","200","'Space'"]}