{"uid":"d15792470cade650","name":"Проверка доступа к personal документам для роли owner","fullName":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles#test_get_personal_docs_access_by_roles","historyId":"16989149ddf043ceadeadd4158895014","time":{"start":1761899976299,"stop":1761899977065,"duration":766},"description":"Проверяем что пользователи могут получить только свои personal документы","descriptionHtml":"<p>Проверяем что пользователи могут получить только свои personal документы</p>\n","status":"failed","statusMessage":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_docs_access_by_roles[owner]>>\nclient_fixture = 'owner_client', expected_status = 403\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f2708b05440>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 403),  # владелец не может получить чужие personal docs\n            ('manager_client', 403),  # менеджер не может получить чужие personal docs\n            ('member_client', 200),  # участник может получить свои personal docs\n            ('guest_client', 403),  # гость не может получить чужие personal docs\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_personal_docs_access_by_roles(\n        request, client_fixture, expected_status, main_space, main_personal, create_main_documents\n    ):\n        \"\"\"Проверяем что пользователи могут получить только свои personal документы\"\"\"\n        with allure.step('Подготовка тестовых данных'):\n            api_client = request.getfixturevalue(client_fixture)\n            role = client_fixture.replace('_client', '')\n            member_id = main_personal['member'][0]  # Берём ID member для проверки доступа к его документам\n    \n        allure.dynamic.title(f'Проверка доступа к personal документам для роли {role}')\n    \n        # Создаем документы с помощью фикстуры\n        creator_roles = {'member_client': 'member'}\n        created_docs = create_main_documents('Member', member_id, creator_roles)\n    \n        with allure.step(f'Проверка получения personal документов ролью {role}'):\n            list_resp = api_client.post(**get_documents_endpoint(kind='Member', kind_id=member_id, space_id=main_space))\n    \n>           assert list_resp.status_code == expected_status, (\n                f'Ошибка при получении списка документов: '\n                f'ожидался статус {expected_status}, получили {list_resp.status_code}'\n            )\nE           AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:95: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761899890641,"stop":1761899890641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761899890642,"stop":1761899891240,"duration":598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761899894466,"stop":1761899894790,"duration":324},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761899894790,"stop":1761899895081,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761899896748,"stop":1761899897340,"duration":592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761899905935,"stop":1761899906218,"duration":283},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761899976298,"stop":1761899976298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Проверяем что пользователи могут получить только свои personal документы","status":"failed","statusMessage":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_docs_access_by_roles[owner]>>\nclient_fixture = 'owner_client', expected_status = 403\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f2708b05440>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 403),  # владелец не может получить чужие personal docs\n            ('manager_client', 403),  # менеджер не может получить чужие personal docs\n            ('member_client', 200),  # участник может получить свои personal docs\n            ('guest_client', 403),  # гость не может получить чужие personal docs\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_personal_docs_access_by_roles(\n        request, client_fixture, expected_status, main_space, main_personal, create_main_documents\n    ):\n        \"\"\"Проверяем что пользователи могут получить только свои personal документы\"\"\"\n        with allure.step('Подготовка тестовых данных'):\n            api_client = request.getfixturevalue(client_fixture)\n            role = client_fixture.replace('_client', '')\n            member_id = main_personal['member'][0]  # Берём ID member для проверки доступа к его документам\n    \n        allure.dynamic.title(f'Проверка доступа к personal документам для роли {role}')\n    \n        # Создаем документы с помощью фикстуры\n        creator_roles = {'member_client': 'member'}\n        created_docs = create_main_documents('Member', member_id, creator_roles)\n    \n        with allure.step(f'Проверка получения personal документов ролью {role}'):\n            list_resp = api_client.post(**get_documents_endpoint(kind='Member', kind_id=member_id, space_id=main_space))\n    \n>           assert list_resp.status_code == expected_status, (\n                f'Ошибка при получении списка документов: '\n                f'ожидался статус {expected_status}, получили {list_resp.status_code}'\n            )\nE           AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:95: AssertionError","steps":[{"name":"Подготовка тестовых данных","time":{"start":1761899976299,"stop":1761899976299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Member разными ролями","time":{"start":1761899976299,"stop":1761899976665,"duration":366},"status":"passed","steps":[{"name":"Создание документа пользователем member","time":{"start":1761899976299,"stop":1761899976665,"duration":366},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Проверка получения personal документов ролью owner","time":{"start":1761899976665,"stop":1761899977064,"duration":399},"status":"failed","statusMessage":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py\", line 95, in test_get_personal_docs_access_by_roles\n    assert list_resp.status_code == expected_status, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761899977068,"stop":1761899977337,"duration":269},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761899977068,"stop":1761899977337,"duration":269},"status":"passed","steps":[{"name":"Удаление документа \"Member doc by member 2025.10.31_08:39:36\" (создан member)","time":{"start":1761899977068,"stop":1761899977337,"duration":269},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_docs_list_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2554-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":49},"items":[{"uid":"30fa48dccf73ab28","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/30fa48dccf73ab28","status":"failed","statusDetails":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835010627,"stop":1761835010949,"duration":322}},{"uid":"103e06ae70dab577","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/103e06ae70dab577","status":"failed","statusDetails":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834578068,"stop":1761834578542,"duration":474}},{"uid":"3652b90d7eb41e0c","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/3652b90d7eb41e0c","status":"failed","statusDetails":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833413462,"stop":1761833413922,"duration":460}},{"uid":"eb973a214ce7fa38","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/eb973a214ce7fa38","status":"passed","time":{"start":1761821629942,"stop":1761821630368,"duration":426}},{"uid":"ef051a8ae1c8472b","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/ef051a8ae1c8472b","status":"failed","statusDetails":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818709446,"stop":1761818709891,"duration":445}},{"uid":"523b2c21290557b8","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/523b2c21290557b8","status":"failed","statusDetails":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748578039,"stop":1761748578444,"duration":405}},{"uid":"ace481fc2bde3b56","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ace481fc2bde3b56","status":"failed","statusDetails":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747846563,"stop":1761747847025,"duration":462}},{"uid":"4d2350663c1b662f","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/4d2350663c1b662f","status":"passed","time":{"start":1761746778369,"stop":1761746778894,"duration":525}},{"uid":"7e59def463a9c3e0","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/7e59def463a9c3e0","status":"failed","statusDetails":"AssertionError: Ошибка при получении списка документов: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745694304,"stop":1761745694630,"duration":326}},{"uid":"3741eb760853abca","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/3741eb760853abca","status":"passed","time":{"start":1761576629655,"stop":1761576630132,"duration":477}},{"uid":"84cd0a04a4726b9e","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/84cd0a04a4726b9e","status":"passed","time":{"start":1761557284779,"stop":1761557285440,"duration":661}},{"uid":"e66ce36de9239b88","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/e66ce36de9239b88","status":"passed","time":{"start":1761308509749,"stop":1761308510176,"duration":427}},{"uid":"e3f2047d83fb7e2b","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/e3f2047d83fb7e2b","status":"passed","time":{"start":1761306662120,"stop":1761306662641,"duration":521}},{"uid":"a0b954740bfa6105","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/a0b954740bfa6105","status":"passed","time":{"start":1761136959143,"stop":1761136959632,"duration":489}},{"uid":"b6ed06c2ac0cce95","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/b6ed06c2ac0cce95","status":"passed","time":{"start":1761135626624,"stop":1761135627213,"duration":589}},{"uid":"53e4a082bb6dc350","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/53e4a082bb6dc350","status":"passed","time":{"start":1761134067540,"stop":1761134067970,"duration":430}},{"uid":"fb227dc33771ee34","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/fb227dc33771ee34","status":"passed","time":{"start":1761128404581,"stop":1761128405185,"duration":604}},{"uid":"c369299fe89ba648","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/c369299fe89ba648","status":"passed","time":{"start":1761124515475,"stop":1761124516010,"duration":535}},{"uid":"39e5358cf3c9d4a4","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/39e5358cf3c9d4a4","status":"passed","time":{"start":1761119336717,"stop":1761119337193,"duration":476}},{"uid":"5d47d1668b6ea564","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/5d47d1668b6ea564","status":"passed","time":{"start":1761053371310,"stop":1761053371727,"duration":417}}]},"tags":["backend"]},"source":"d15792470cade650.json","parameterValues":["'owner_client'","403"]}