{"uid":"72b58393152bbec3","name":"Редактирование Project-документа: создание member, редактирование owner","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_project_and_space_docs_different_roles","historyId":"66469864d4ed5ac51dcfa1382acf9fbe","time":{"start":1761912127835,"stop":1761912128480,"duration":645},"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\nмогут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\nдокументы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\nтестирования различных комбинаций ролей создателей и редакторов документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[project_doc-member_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\neditor_fixture = 'owner_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:98: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761912073100,"stop":1761912073571,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761912076138,"stop":1761912076602,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761912076602,"stop":1761912076805,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761912076805,"stop":1761912077004,"duration":199},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761912078093,"stop":1761912078541,"duration":448},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[project_doc-member_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\neditor_fixture = 'owner_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:98: AssertionError","steps":[{"name":"Создание Project-документа пользователем с ролью member","time":{"start":1761912127835,"stop":1761912128090,"duration":255},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью owner","time":{"start":1761912128090,"stop":1761912128249,"duration":159},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 98, in test_edit_project_and_space_docs_different_roles\n    assert edit_response.status_code == expected_status, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1761912128250,"stop":1761912128480,"duration":230},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2535-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'member_client'"},{"name":"doc_container","value":"'main_project'"},{"name":"doc_type","value":"'Project'"},{"name":"editor_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":54},"items":[{"uid":"2a21d7c79dfea88e","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/2a21d7c79dfea88e","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911227126,"stop":1761911227824,"duration":698}},{"uid":"75a613672803b391","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/75a613672803b391","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910850060,"stop":1761910850644,"duration":584}},{"uid":"cfc236d16b5c3dd6","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/cfc236d16b5c3dd6","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910551295,"stop":1761910551862,"duration":567}},{"uid":"89936f071e2dd1cd","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/89936f071e2dd1cd","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909927822,"stop":1761909928519,"duration":697}},{"uid":"adb548aec6ac2c25","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/adb548aec6ac2c25","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899958604,"stop":1761899959310,"duration":706}},{"uid":"3f9a54e7edba4f5b","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/3f9a54e7edba4f5b","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834996249,"stop":1761834996784,"duration":535}},{"uid":"b71b485ca78c21c","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/b71b485ca78c21c","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834559130,"stop":1761834559891,"duration":761}},{"uid":"fa162a6daa20a9d4","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/fa162a6daa20a9d4","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833392187,"stop":1761833393103,"duration":916}},{"uid":"15a369e9c65a3ad0","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/15a369e9c65a3ad0","status":"passed","time":{"start":1761821585711,"stop":1761821587087,"duration":1376}},{"uid":"5ac3fbd32245d008","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/5ac3fbd32245d008","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818690960,"stop":1761818691664,"duration":704}},{"uid":"359b7c047d5279b2","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/359b7c047d5279b2","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748561499,"stop":1761748562344,"duration":845}},{"uid":"c231ed59c789403f","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/c231ed59c789403f","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747828480,"stop":1761747829573,"duration":1093}},{"uid":"6332a8090fb338e","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/6332a8090fb338e","status":"passed","time":{"start":1761746722388,"stop":1761746724113,"duration":1725}},{"uid":"df0b7e6af0d56a52","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/df0b7e6af0d56a52","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745681213,"stop":1761745681847,"duration":634}},{"uid":"a439b9ad284d3b","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/a439b9ad284d3b","status":"passed","time":{"start":1761576581336,"stop":1761576582816,"duration":1480}},{"uid":"ae6d2a67a2e7738b","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/ae6d2a67a2e7738b","status":"passed","time":{"start":1761557237973,"stop":1761557239433,"duration":1460}},{"uid":"104d24db921b72da","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/104d24db921b72da","status":"passed","time":{"start":1761308463155,"stop":1761308464675,"duration":1520}},{"uid":"bbe672dbc8038783","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/bbe672dbc8038783","status":"passed","time":{"start":1761306611033,"stop":1761306612749,"duration":1716}},{"uid":"e0b98a28b7bba621","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/e0b98a28b7bba621","status":"passed","time":{"start":1761136908498,"stop":1761136910028,"duration":1530}},{"uid":"ba7a8e4e912453e3","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/ba7a8e4e912453e3","status":"passed","time":{"start":1761135570629,"stop":1761135572377,"duration":1748}}]},"tags":["backend"]},"source":"72b58393152bbec3.json","parameterValues":["'member_client'","'main_project'","'Project'","'owner_client'","200"]}