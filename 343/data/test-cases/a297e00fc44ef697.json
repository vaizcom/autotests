{"uid":"a297e00fc44ef697","name":"Проверка доступа к документу в Project для роли manager","fullName":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles#test_get_project_and_space_doc_access_by_roles","historyId":"dfb0efc46edc2e499ddb8749e1cf0015","time":{"start":1759767408032,"stop":1759767409901,"duration":1869},"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\nдля проверки разных типов клиентов и контейнеров документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-manager]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'manager_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7fc4fd16a8e0>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем member: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767260767,"stop":1759767260767,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767260767,"stop":1759767261300,"duration":533},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767261301,"stop":1759767261750,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1759767261751,"stop":1759767262153,"duration":402},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759767262154,"stop":1759767262666,"duration":512},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767263179,"stop":1759767263448,"duration":269},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1759767264277,"stop":1759767264703,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1759767408032,"stop":1759767408032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-manager]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'manager_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7fc4fd16a8e0>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем member: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документу в Project","time":{"start":1759767408032,"stop":1759767408033,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Project разными ролями","time":{"start":1759767408033,"stop":1759767409901,"duration":1868},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1759767408033,"stop":1759767409377,"duration":1344},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание документа пользователем manager","time":{"start":1759767409377,"stop":1759767409640,"duration":263},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание документа пользователем member","time":{"start":1759767409640,"stop":1759767409901,"duration":261},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1759767409909,"stop":1759767410482,"duration":573},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1759767409909,"stop":1759767410482,"duration":573},"status":"passed","steps":[{"name":"Удаление документа \"Project doc by owner 2025.10.06_16:16:48\" (создан owner)","time":{"start":1759767409909,"stop":1759767410197,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Удаление документа \"Project doc by manager 2025.10.06_16:16:49\" (создан manager)","time":{"start":1759767410198,"stop":1759767410482,"duration":284},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2672-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"container_fixture","value":"'main_project'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":37,"unknown":0,"total":39},"items":[{"uid":"614a46d23f56f3b3","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/614a46d23f56f3b3","status":"passed","time":{"start":1759753866384,"stop":1759753867983,"duration":1599}},{"uid":"cb539ad1703a985d","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/cb539ad1703a985d","status":"passed","time":{"start":1759743831588,"stop":1759743833120,"duration":1532}},{"uid":"d8d4667857799a58","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/d8d4667857799a58","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485531267,"stop":1759485531267,"duration":0}},{"uid":"d9e457a183dd772","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/d9e457a183dd772","status":"passed","time":{"start":1759232457394,"stop":1759232458925,"duration":1531}},{"uid":"da04abb097700770","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/da04abb097700770","status":"passed","time":{"start":1759140740628,"stop":1759140742130,"duration":1502}},{"uid":"bc192506f8fcfb43","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/bc192506f8fcfb43","status":"passed","time":{"start":1758891800466,"stop":1758891802270,"duration":1804}},{"uid":"c11bc0050382da79","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/c11bc0050382da79","status":"passed","time":{"start":1758807747124,"stop":1758807749867,"duration":2743}},{"uid":"a9e2a1671b1a8af7","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/a9e2a1671b1a8af7","status":"passed","time":{"start":1758806623148,"stop":1758806625993,"duration":2845}},{"uid":"bc49a1cef1a23f23","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/bc49a1cef1a23f23","status":"passed","time":{"start":1758791195538,"stop":1758791197664,"duration":2126}},{"uid":"eff1062bbc314a84","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/eff1062bbc314a84","status":"passed","time":{"start":1758540518575,"stop":1758540520431,"duration":1856}},{"uid":"954fdf38ad767269","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/954fdf38ad767269","status":"passed","time":{"start":1758289140401,"stop":1758289143541,"duration":3140}},{"uid":"f11828d3d3cb9dfa","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/f11828d3d3cb9dfa","status":"passed","time":{"start":1755852323464,"stop":1755852325222,"duration":1758}},{"uid":"c32105f4f16a3d86","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/c32105f4f16a3d86","status":"passed","time":{"start":1755851828812,"stop":1755851830829,"duration":2017}},{"uid":"b9f14c90ea3f0c78","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/b9f14c90ea3f0c78","status":"passed","time":{"start":1755847964004,"stop":1755847965880,"duration":1876}},{"uid":"d108af3191bb96ff","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/d108af3191bb96ff","status":"passed","time":{"start":1755777828448,"stop":1755777830176,"duration":1728}},{"uid":"8b0f81b82f3cec47","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/8b0f81b82f3cec47","status":"passed","time":{"start":1755774471497,"stop":1755774473284,"duration":1787}},{"uid":"7339287d12f58e5a","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/7339287d12f58e5a","status":"passed","time":{"start":1755694593010,"stop":1755694595478,"duration":2468}},{"uid":"645ca8edb78e2baf","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/645ca8edb78e2baf","status":"passed","time":{"start":1755694028803,"stop":1755694030718,"duration":1915}},{"uid":"7239390b98799ca6","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/7239390b98799ca6","status":"passed","time":{"start":1755687102319,"stop":1755687104045,"duration":1726}},{"uid":"5b6cfdc65aabfe81","reportUrl":"https://vaizcom.github.io/autotests/321//#testresult/5b6cfdc65aabfe81","status":"passed","time":{"start":1755682849428,"stop":1755682851646,"duration":2218}}]},"tags":["backend"]},"source":"a297e00fc44ef697.json","parameterValues":["'manager_client'","'main_project'","200","'Project'"]}