{"uid":"49aacaf2aae34a5","name":"Тест создания доски: клиент=owner_client, ожидаемый статус=200","fullName":"tests.test_backend.board.access_board.test_create_board#test_create_board_access_by_roles","historyId":"4a7ed2ad41947245e4ff9b507189b109","time":{"start":1761899895655,"stop":1761899895828,"duration":173},"status":"failed","statusMessage":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_board_access_by_roles[owner]>>\nclient_fixture = 'owner_client', expected_status = 200\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 403),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_board_access_by_roles(request, client_fixture, expected_status, main_project, main_space):\n        allure.dynamic.title(f'Тест создания доски: клиент={client_fixture}, ожидаемый статус={expected_status}')\n    \n        with allure.step(f'Получение клиента: {client_fixture}'):\n            client = request.getfixturevalue(client_fixture)\n    \n        with allure.step('Генерация уникального имени доски'):\n            board_name = f'board_{uuid.uuid4().hex[:8]}'\n            allure.attach(board_name, name='Сгенерированное имя доски', attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(f\"Отправка запроса на создание доски с именем '{board_name}'\"):\n            payload = create_board_endpoint(\n                name=board_name,\n                project=main_project,\n                space_id=main_space,\n                groups=[],\n                typesList=[],\n                customFields=[],\n            )\n            response = client.post(**payload)\n    \n        with allure.step(f'Проверка статус-кода: ожидаемый {expected_status}'):\n>           assert response.status_code == expected_status, response.text\nE           AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/board/access_board/test_create_board.py:45: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761899890641,"stop":1761899890641,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761899890642,"stop":1761899891240,"duration":598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761899890642,"stop":1761899890642,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761899894466,"stop":1761899894790,"duration":324},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761899894790,"stop":1761899895081,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761899895081,"stop":1761899895654,"duration":573},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_board_access_by_roles[owner]>>\nclient_fixture = 'owner_client', expected_status = 200\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 403),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_board_access_by_roles(request, client_fixture, expected_status, main_project, main_space):\n        allure.dynamic.title(f'Тест создания доски: клиент={client_fixture}, ожидаемый статус={expected_status}')\n    \n        with allure.step(f'Получение клиента: {client_fixture}'):\n            client = request.getfixturevalue(client_fixture)\n    \n        with allure.step('Генерация уникального имени доски'):\n            board_name = f'board_{uuid.uuid4().hex[:8]}'\n            allure.attach(board_name, name='Сгенерированное имя доски', attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(f\"Отправка запроса на создание доски с именем '{board_name}'\"):\n            payload = create_board_endpoint(\n                name=board_name,\n                project=main_project,\n                space_id=main_space,\n                groups=[],\n                typesList=[],\n                customFields=[],\n            )\n            response = client.post(**payload)\n    \n        with allure.step(f'Проверка статус-кода: ожидаемый {expected_status}'):\n>           assert response.status_code == expected_status, response.text\nE           AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/board/access_board/test_create_board.py:45: AssertionError","steps":[{"name":"Получение клиента: owner_client","time":{"start":1761899895655,"stop":1761899895655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Генерация уникального имени доски","time":{"start":1761899895655,"stop":1761899895655,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"3a9dc0a6edf7831f","name":"Сгенерированное имя доски","source":"3a9dc0a6edf7831f.txt","type":"text/plain","size":14}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Отправка запроса на создание доски с именем 'board_82d8a477'","time":{"start":1761899895655,"stop":1761899895827,"duration":172},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статус-кода: ожидаемый 200","time":{"start":1761899895828,"stop":1761899895828,"duration":0},"status":"failed","statusMessage":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/board/access_board/test_create_board.py\", line 45, in test_create_board_access_by_roles\n    assert response.status_code == expected_status, response.text\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.board.access_board"},{"name":"suite","value":"test_create_board"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2554-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.board.access_board.test_create_board"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":49},"items":[{"uid":"ebdf57ced906c77b","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/ebdf57ced906c77b","status":"failed","statusDetails":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834945749,"stop":1761834945875,"duration":126}},{"uid":"9a7d6042ae48d788","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/9a7d6042ae48d788","status":"failed","statusDetails":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834492409,"stop":1761834492904,"duration":495}},{"uid":"2180d660e7257c78","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/2180d660e7257c78","status":"failed","statusDetails":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833320473,"stop":1761833320968,"duration":495}},{"uid":"5b45945fa54e7891","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/5b45945fa54e7891","status":"passed","time":{"start":1761821484258,"stop":1761821485497,"duration":1239}},{"uid":"739ff51bba1a9d3c","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/739ff51bba1a9d3c","status":"failed","statusDetails":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818623607,"stop":1761818623777,"duration":170}},{"uid":"f8d0ec0de6155f42","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/f8d0ec0de6155f42","status":"failed","statusDetails":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748506421,"stop":1761748506738,"duration":317}},{"uid":"109a04f73f98307d","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/109a04f73f98307d","status":"failed","statusDetails":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747766337,"stop":1761747766519,"duration":182}},{"uid":"b62f147f469e4249","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/b62f147f469e4249","status":"passed","time":{"start":1761746593661,"stop":1761746594320,"duration":659}},{"uid":"b4bd633b55b82ce2","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/b4bd633b55b82ce2","status":"failed","statusDetails":"AssertionError: {\"payload\":null,\"type\":\"CreateBoard\",\"error\":{\"code\":\"JwtDoesNotExits\",\"originalType\":\"CreateBoard\"}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745632792,"stop":1761745633124,"duration":332}},{"uid":"dc9b8d101e210fbf","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/dc9b8d101e210fbf","status":"passed","time":{"start":1761576474049,"stop":1761576474525,"duration":476}},{"uid":"5558dc6d17a434ac","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/5558dc6d17a434ac","status":"passed","time":{"start":1761557132102,"stop":1761557133222,"duration":1120}},{"uid":"ff281cfa6a28f95","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/ff281cfa6a28f95","status":"passed","time":{"start":1761308356468,"stop":1761308357811,"duration":1343}},{"uid":"37e6872bcb60592","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/37e6872bcb60592","status":"passed","time":{"start":1761306502925,"stop":1761306504095,"duration":1170}},{"uid":"f2e60aa706de970f","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/f2e60aa706de970f","status":"passed","time":{"start":1761136795996,"stop":1761136797029,"duration":1033}},{"uid":"999112148dfc6c9a","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/999112148dfc6c9a","status":"passed","time":{"start":1761135444854,"stop":1761135446354,"duration":1500}},{"uid":"43d7d9e2cfbd8ee1","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/43d7d9e2cfbd8ee1","status":"passed","time":{"start":1761133914135,"stop":1761133915283,"duration":1148}},{"uid":"adc50e7a96033f05","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/adc50e7a96033f05","status":"passed","time":{"start":1761128210366,"stop":1761128211548,"duration":1182}},{"uid":"73f8fc128e9e6b66","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/73f8fc128e9e6b66","status":"passed","time":{"start":1761124314838,"stop":1761124315755,"duration":917}},{"uid":"a067e19ba62702c","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/a067e19ba62702c","status":"passed","time":{"start":1761119171159,"stop":1761119172321,"duration":1162}},{"uid":"157fc779b62f0ad6","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/157fc779b62f0ad6","status":"passed","time":{"start":1761053216831,"stop":1761053218109,"duration":1278}}]},"tags":["backend"]},"source":"49aacaf2aae34a5.json","parameterValues":["'owner_client'","200"]}