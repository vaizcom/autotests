{"uid":"d253a136ede446f9","name":"Дублирование Personal-документа: создание owner, дублирование manager","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_personal_doc_different_roles","historyId":"9638a5c08d89de54830400919f20b400","time":{"start":1761921798694,"stop":1761921798813,"duration":119},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[owner_personal_by_manager]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', duplicator_fixture = 'manager_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:208: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761921768380,"stop":1761921768849,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761921776341,"stop":1761921776747,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[owner_personal_by_manager]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'owner_client', duplicator_fixture = 'manager_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:208: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью owner","time":{"start":1761921798694,"stop":1761921798813,"duration":119},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 208, in test_duplicate_personal_doc_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"duplicator_fixture","value":"'manager_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":55},"items":[{"uid":"3504bd3c83a58e73","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/3504bd3c83a58e73","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912107145,"stop":1761912107278,"duration":133}},{"uid":"d0f97b90985ad2de","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/d0f97b90985ad2de","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911204140,"stop":1761911204316,"duration":176}},{"uid":"af7197d97a3838b0","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/af7197d97a3838b0","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910829297,"stop":1761910829420,"duration":123}},{"uid":"656b2cd7cb44a668","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/656b2cd7cb44a668","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910531444,"stop":1761910531554,"duration":110}},{"uid":"5a78fbc4e3eee0c9","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/5a78fbc4e3eee0c9","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909900195,"stop":1761909900372,"duration":177}},{"uid":"2bad15b65a4bc93e","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/2bad15b65a4bc93e","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899934044,"stop":1761899934215,"duration":171}},{"uid":"cdd4e57d4c57ee35","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/cdd4e57d4c57ee35","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834976747,"stop":1761834976865,"duration":118}},{"uid":"7e59ba5c3a03dcb0","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/7e59ba5c3a03dcb0","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834533393,"stop":1761834533578,"duration":185}},{"uid":"f0abbdbe25aa881c","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/f0abbdbe25aa881c","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833363698,"stop":1761833363901,"duration":203}},{"uid":"3318d70be908fe1e","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/3318d70be908fe1e","status":"passed","time":{"start":1761821549722,"stop":1761821550718,"duration":996}},{"uid":"dcdc09f53b1fff9e","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/dcdc09f53b1fff9e","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818666753,"stop":1761818666922,"duration":169}},{"uid":"fd45e468d917ccfc","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/fd45e468d917ccfc","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748540525,"stop":1761748540650,"duration":125}},{"uid":"7a54f80d291ca763","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/7a54f80d291ca763","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747804656,"stop":1761747804837,"duration":181}},{"uid":"673683cfbbbc8d07","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/673683cfbbbc8d07","status":"passed","time":{"start":1761746675987,"stop":1761746676939,"duration":952}},{"uid":"327f4ef6d2825df","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/327f4ef6d2825df","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745662359,"stop":1761745662483,"duration":124}},{"uid":"a351e58227f0b277","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/a351e58227f0b277","status":"passed","time":{"start":1761576543817,"stop":1761576544507,"duration":690}},{"uid":"a6091c98aee7f69e","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/a6091c98aee7f69e","status":"passed","time":{"start":1761557200341,"stop":1761557201066,"duration":725}},{"uid":"b772855790b47d4e","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/b772855790b47d4e","status":"passed","time":{"start":1761308425187,"stop":1761308425831,"duration":644}},{"uid":"5fcedadbf58dc3fb","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/5fcedadbf58dc3fb","status":"passed","time":{"start":1761306572433,"stop":1761306573171,"duration":738}},{"uid":"3ad031d592d0b6ac","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/3ad031d592d0b6ac","status":"passed","time":{"start":1761136868914,"stop":1761136869707,"duration":793}}]},"tags":["backend"]},"source":"d253a136ede446f9.json","parameterValues":["'owner_client'","'manager_client'","403"]}