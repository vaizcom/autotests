{"uid":"b73867829541f729","name":"Создание Personal-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles#test_create_and_archive_personal_doc_access_by_roles","historyId":"f564c615cc7de914d0b50e1cf4067b94","time":{"start":1761745645805,"stop":1761745645927,"duration":122},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_personal_doc_access_by_roles[owner]>>\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\nclient_fixture = 'owner_client', expected_status = 200\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_personal_doc_access_by_roles(\n        request, main_personal, client_fixture, expected_status, main_space\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        personal_id = main_personal[role][0]\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Personal Doc'\n    \n        allure.dynamic.title(f'Создание Personal-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Personal-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Member', kind_id=personal_id, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:113: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761745640561,"stop":1761745640795,"duration":234},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_and_archive_personal_doc_access_by_roles[owner]>>\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\nclient_fixture = 'owner_client', expected_status = 200\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_and_archive_personal_doc_access_by_roles(\n        request, main_personal, client_fixture, expected_status, main_space\n    ):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        personal_id = main_personal[role][0]\n        current_date = datetime.now().strftime('%Y.%m.%d_%H:%M:%S')\n        title = f'{current_date} Personal Doc'\n    \n        allure.dynamic.title(f'Создание Personal-документа для роли {role}')\n    \n        with allure.step(f'{role} создаёт Personal-документ, {expected_status}'):\n            resp = api_client.post(\n                **create_document_endpoint(kind='Member', kind_id=personal_id, space_id=main_space, title=title)\n            )\n>           assert resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_create_doc_access_by_roles.py:113: AssertionError","steps":[{"name":"owner создаёт Personal-документ, 200","time":{"start":1761745645805,"stop":1761745645926,"duration":121},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_create_doc_access_by_roles.py\", line 113, in test_create_and_archive_personal_doc_access_by_roles\n    assert resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_create_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_create_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"b538cf9ba3dad8b7","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/b538cf9ba3dad8b7","status":"passed","time":{"start":1761576513625,"stop":1761576514102,"duration":477}},{"uid":"eaa51b4b1b6edb18","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/eaa51b4b1b6edb18","status":"passed","time":{"start":1761557170356,"stop":1761557170805,"duration":449}},{"uid":"f6a89d8c5f495928","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/f6a89d8c5f495928","status":"passed","time":{"start":1761308394386,"stop":1761308395529,"duration":1143}},{"uid":"91148dfb4fcdd896","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/91148dfb4fcdd896","status":"passed","time":{"start":1761306542501,"stop":1761306543036,"duration":535}},{"uid":"beae2af27f62e01f","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/beae2af27f62e01f","status":"passed","time":{"start":1761136837175,"stop":1761136837661,"duration":486}},{"uid":"558a8f6d1a8dc5fd","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/558a8f6d1a8dc5fd","status":"passed","time":{"start":1761135492562,"stop":1761135493131,"duration":569}},{"uid":"e0d1a80bb94f3137","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/e0d1a80bb94f3137","status":"passed","time":{"start":1761133953771,"stop":1761133954240,"duration":469}},{"uid":"979f05719b0ff9cf","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/979f05719b0ff9cf","status":"passed","time":{"start":1761128257396,"stop":1761128258660,"duration":1264}},{"uid":"53bc386e320ba8c5","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/53bc386e320ba8c5","status":"passed","time":{"start":1761124365029,"stop":1761124365652,"duration":623}},{"uid":"c683ad0aba995869","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/c683ad0aba995869","status":"passed","time":{"start":1761119211752,"stop":1761119212238,"duration":486}},{"uid":"ccbdca5af36ca38c","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/ccbdca5af36ca38c","status":"passed","time":{"start":1761053253639,"stop":1761053254089,"duration":450}},{"uid":"4022ccb79f6aa8bd","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/4022ccb79f6aa8bd","status":"passed","time":{"start":1761047142060,"stop":1761047142536,"duration":476}},{"uid":"1e9fa98e93bac70f","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/1e9fa98e93bac70f","status":"passed","time":{"start":1760614550048,"stop":1760614550561,"duration":513}},{"uid":"d3debe65a00c6322","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/d3debe65a00c6322","status":"passed","time":{"start":1760599352166,"stop":1760599352660,"duration":494}},{"uid":"69456068c09fcdfc","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/69456068c09fcdfc","status":"passed","time":{"start":1760535387933,"stop":1760535388462,"duration":529}},{"uid":"fa2dd2f84df17c5b","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/fa2dd2f84df17c5b","status":"passed","time":{"start":1760533833075,"stop":1760533833665,"duration":590}},{"uid":"2f324bfc353ce920","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/2f324bfc353ce920","status":"passed","time":{"start":1760532423885,"stop":1760532424359,"duration":474}},{"uid":"79af871597aa654e","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/79af871597aa654e","status":"passed","time":{"start":1760529245774,"stop":1760529246236,"duration":462}},{"uid":"ae93e52b210d7df7","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/ae93e52b210d7df7","status":"passed","time":{"start":1760510614042,"stop":1760510614591,"duration":549}},{"uid":"47466cde33925ca0","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/47466cde33925ca0","status":"passed","time":{"start":1760449140942,"stop":1760449141470,"duration":528}}]},"tags":["backend"]},"source":"b73867829541f729.json","parameterValues":["'owner_client'","200"]}