{"uid":"6f98c799a2fe5047","name":"Проверка доступа к siblings Project-документа: создатель - manager, просматривающий - guest","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_project_and_space_siblings_docs_access_by_roles","historyId":"94539551396e81cb04e8c2ee666ab24a","time":{"start":1759767523112,"stop":1759767524517,"duration":1405},"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n- Типа документа (Space/Project)\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[project_doc-manager_docs_by_guest_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'guest_client', expected_status = 200, kind = 'Project'\ncontainer_fixture = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n                    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n    \n                    # Проверка дополнительных полей в siblings\n                    for sibling in [payload['prevSibling'], payload['nextSibling']]:\n                        assert 'title' in sibling, 'Отсутствует поле title в siblings'\n                        assert 'kind' in sibling, 'Отсутствует поле kind в siblings'\n                        assert sibling['kind'] == kind, f'Некорректный kind в siblings: {sibling[\"kind\"]}, ожидался: {kind}'\n    \n        with allure.step('Архивация созданных документов'):\n            for doc_id in doc_ids:\n                archive_resp = creator.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>               assert archive_resp.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:118: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1759767275032,"stop":1759767275032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767275033,"stop":1759767275653,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767275653,"stop":1759767276290,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1759767276290,"stop":1759767276592,"duration":302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767278005,"stop":1759767278446,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1759767279938,"stop":1759767280423,"duration":485},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[project_doc-manager_docs_by_guest_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nclient_fixture = 'guest_client', expected_status = 200, kind = 'Project'\ncontainer_fixture = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n                    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n    \n                    # Проверка дополнительных полей в siblings\n                    for sibling in [payload['prevSibling'], payload['nextSibling']]:\n                        assert 'title' in sibling, 'Отсутствует поле title в siblings'\n                        assert 'kind' in sibling, 'Отсутствует поле kind в siblings'\n                        assert sibling['kind'] == kind, f'Некорректный kind в siblings: {sibling[\"kind\"]}, ожидался: {kind}'\n    \n        with allure.step('Архивация созданных документов'):\n            for doc_id in doc_ids:\n                archive_resp = creator.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>               assert archive_resp.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:118: AssertionError","steps":[{"name":"Создание трёх Project-документов пользователем manager","time":{"start":1759767523113,"stop":1759767524014,"duration":901},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Попытка получения siblings для среднего документа пользователем guest","time":{"start":1759767524014,"stop":1759767524294,"duration":280},"status":"passed","steps":[{"name":"Проверка корректности данных siblings","time":{"start":1759767524294,"stop":1759767524294,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Архивация созданных документов","time":{"start":1759767524294,"stop":1759767524516,"duration":222},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 118, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert archive_resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"container_fixture","value":"'main_project'"},{"name":"creator_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":33,"unknown":0,"total":35},"items":[{"uid":"7a57554c170b7eaa","reportUrl":"https://vaizcom.github.io/autotests/343//#testresult/7a57554c170b7eaa","status":"passed","time":{"start":1759767467344,"stop":1759767469318,"duration":1974}},{"uid":"88e979b29a8efd93","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/88e979b29a8efd93","status":"passed","time":{"start":1759753934372,"stop":1759753936179,"duration":1807}},{"uid":"e130e62616667bd9","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/e130e62616667bd9","status":"passed","time":{"start":1759743895493,"stop":1759743897329,"duration":1836}},{"uid":"bd4c2b71a15e1eb2","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/bd4c2b71a15e1eb2","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485535233,"stop":1759485535233,"duration":0}},{"uid":"56e51c8c14077670","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/56e51c8c14077670","status":"passed","time":{"start":1759232521759,"stop":1759232523732,"duration":1973}},{"uid":"d8615dc6bbe2afae","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/d8615dc6bbe2afae","status":"passed","time":{"start":1759140802578,"stop":1759140804451,"duration":1873}},{"uid":"9176968da08d668a","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/9176968da08d668a","status":"passed","time":{"start":1758891879293,"stop":1758891881498,"duration":2205}},{"uid":"37de41bdf02e5bbf","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/37de41bdf02e5bbf","status":"passed","time":{"start":1758807831488,"stop":1758807834212,"duration":2724}},{"uid":"ad278b84b23ed990","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/ad278b84b23ed990","status":"passed","time":{"start":1758806704680,"stop":1758806708649,"duration":3969}},{"uid":"ed558a332b8a89e9","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/ed558a332b8a89e9","status":"passed","time":{"start":1758791285068,"stop":1758791287836,"duration":2768}},{"uid":"1d2ec98177ad574a","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/1d2ec98177ad574a","status":"passed","time":{"start":1758540592553,"stop":1758540595051,"duration":2498}},{"uid":"3234df9ec1395464","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/3234df9ec1395464","status":"passed","time":{"start":1758289229389,"stop":1758289232341,"duration":2952}},{"uid":"d855e9aa2b5f196d","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/d855e9aa2b5f196d","status":"passed","time":{"start":1755852392251,"stop":1755852394443,"duration":2192}},{"uid":"9297b529490dc792","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/9297b529490dc792","status":"passed","time":{"start":1755851901002,"stop":1755851903242,"duration":2240}},{"uid":"3cae17f314c29e01","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/3cae17f314c29e01","status":"passed","time":{"start":1755848040405,"stop":1755848042851,"duration":2446}},{"uid":"c68626c203ca974a","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/c68626c203ca974a","status":"passed","time":{"start":1755777908712,"stop":1755777911268,"duration":2556}},{"uid":"41665b61661b60aa","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/41665b61661b60aa","status":"passed","time":{"start":1755774542876,"stop":1755774545720,"duration":2844}},{"uid":"61e0a9da353e3800","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/61e0a9da353e3800","status":"passed","time":{"start":1755694677057,"stop":1755694680050,"duration":2993}},{"uid":"54a6b52a228eac99","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/54a6b52a228eac99","status":"passed","time":{"start":1755694106566,"stop":1755694108857,"duration":2291}},{"uid":"8cceab866cad767f","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/8cceab866cad767f","status":"passed","time":{"start":1755687174756,"stop":1755687176795,"duration":2039}}]},"tags":["backend"]},"source":"6f98c799a2fe5047.json","parameterValues":["'guest_client'","'main_project'","'manager_client'","200","'Project'"]}