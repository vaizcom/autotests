{"uid":"57ffcfc6bd034110","name":"Редактирование Personal-документа: создание member, редактирование owner","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_personal_doc_different_roles","historyId":"1a9dfba4f06b6fccdb17f78624843105","time":{"start":1761834567866,"stop":1761834568643,"duration":777},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[member_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'member_client', editor_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа\n            with allure.step(\n                f'Редактирование документа пользователем с ролью {editor_role} (Нельзя редактировать чужие персональные документы)'\n            ):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='icon_test', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:209: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761834488107,"stop":1761834488727,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761834488107,"stop":1761834488107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761834491509,"stop":1761834491810,"duration":301},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761834491810,"stop":1761834492143,"duration":333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761834493877,"stop":1761834494493,"duration":616},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761834504314,"stop":1761834504906,"duration":592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[member_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'member_client', editor_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа\n            with allure.step(\n                f'Редактирование документа пользователем с ролью {editor_role} (Нельзя редактировать чужие персональные документы)'\n            ):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='icon_test', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:209: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью member","time":{"start":1761834567866,"stop":1761834568173,"duration":307},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью owner (Нельзя редактировать чужие персональные документы)","time":{"start":1761834568173,"stop":1761834568364,"duration":191},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 209, in test_edit_personal_doc_different_roles\n    assert edit_response.status_code == expected_status, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1761834568364,"stop":1761834568643,"duration":279},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2553-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'member_client'"},{"name":"editor_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":47},"items":[{"uid":"53abe8864c68c387","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/53abe8864c68c387","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833401669,"stop":1761833402542,"duration":873}},{"uid":"b60efb9d10402b55","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/b60efb9d10402b55","status":"passed","time":{"start":1761821596334,"stop":1761821596921,"duration":587}},{"uid":"10c7a100b22094bd","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/10c7a100b22094bd","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818698927,"stop":1761818699623,"duration":696}},{"uid":"a0cc7b26870c531c","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/a0cc7b26870c531c","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748569183,"stop":1761748569807,"duration":624}},{"uid":"990e627e7bc02123","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/990e627e7bc02123","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747836566,"stop":1761747837270,"duration":704}},{"uid":"4a52bc95a468db1c","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/4a52bc95a468db1c","status":"passed","time":{"start":1761746736509,"stop":1761746738056,"duration":1547}},{"uid":"53a8a08b0a621ff3","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/53a8a08b0a621ff3","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745687287,"stop":1761745687823,"duration":536}},{"uid":"c05682c562b0b229","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c05682c562b0b229","status":"passed","time":{"start":1761576592429,"stop":1761576593039,"duration":610}},{"uid":"819564a4dbb5e439","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/819564a4dbb5e439","status":"passed","time":{"start":1761557249132,"stop":1761557249787,"duration":655}},{"uid":"6599936497842aa8","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/6599936497842aa8","status":"passed","time":{"start":1761308473922,"stop":1761308474568,"duration":646}},{"uid":"3fe33d3bd8477c16","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/3fe33d3bd8477c16","status":"passed","time":{"start":1761306622843,"stop":1761306623508,"duration":665}},{"uid":"493bb0b0f934421f","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/493bb0b0f934421f","status":"passed","time":{"start":1761136920530,"stop":1761136921236,"duration":706}},{"uid":"77ead3301a80dfb","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/77ead3301a80dfb","status":"passed","time":{"start":1761135583663,"stop":1761135584382,"duration":719}},{"uid":"2f33219ca20e4078","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/2f33219ca20e4078","status":"passed","time":{"start":1761134031276,"stop":1761134031912,"duration":636}},{"uid":"f81f2f504bdeb018","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/f81f2f504bdeb018","status":"passed","time":{"start":1761128357831,"stop":1761128358641,"duration":810}},{"uid":"5020482a06163563","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/5020482a06163563","status":"passed","time":{"start":1761124467230,"stop":1761124468380,"duration":1150}},{"uid":"6b7827fb0f755828","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/6b7827fb0f755828","status":"passed","time":{"start":1761119297910,"stop":1761119298567,"duration":657}},{"uid":"45a8391e851f4b1d","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/45a8391e851f4b1d","status":"passed","time":{"start":1761053334346,"stop":1761053335458,"duration":1112}},{"uid":"fd65d8c6168794b","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/fd65d8c6168794b","status":"passed","time":{"start":1761047225697,"stop":1761047226535,"duration":838}},{"uid":"9d980545f46d0a70","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/9d980545f46d0a70","status":"passed","time":{"start":1760614641657,"stop":1760614642388,"duration":731}}]},"tags":["backend"]},"source":"57ffcfc6bd034110.json","parameterValues":["'member_client'","'owner_client'","403"]}