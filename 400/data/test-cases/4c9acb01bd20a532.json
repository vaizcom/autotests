{"uid":"4c9acb01bd20a532","name":"Проверка доступа к siblings персонального документа: создатель - manager, просматривающий - owner","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_personal_siblings_docs_access_by_roles","historyId":"343993a2727016552fe4429046e3e930","time":{"start":1761909979846,"stop":1761909981034,"duration":1188},"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n\nОсобенность: к персональным документам имеет доступ только их владелец\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[manager_docs_by_owner_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'manager_client', client_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n>           assert siblings_resp.status_code == expected_status\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:208: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761909856376,"stop":1761909856684,"duration":308},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761909856376,"stop":1761909856376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761909860625,"stop":1761909861236,"duration":611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761909861236,"stop":1761909861504,"duration":268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761909862269,"stop":1761909862567,"duration":298},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761909872152,"stop":1761909872728,"duration":576},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[manager_docs_by_owner_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'manager_client', client_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n>           assert siblings_resp.status_code == expected_status\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:208: AssertionError","steps":[{"name":"Создание трёх персональных документов пользователем manager","time":{"start":1761909979846,"stop":1761909980855,"duration":1009},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Попытка получения siblings для среднего документа пользователем owner","time":{"start":1761909980855,"stop":1761909981034,"duration":179},"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 208, in test_get_personal_siblings_docs_access_by_roles\n    assert siblings_resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2551-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"creator_fixture","value":"'manager_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":50},"items":[{"uid":"7e6cf4259543ded3","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/7e6cf4259543ded3","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761900011627,"stop":1761900012719,"duration":1092}},{"uid":"93f1922b54b95c88","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/93f1922b54b95c88","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835038780,"stop":1761835039546,"duration":766}},{"uid":"6608ff50b55728c6","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/6608ff50b55728c6","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834616065,"stop":1761834617182,"duration":1117}},{"uid":"5391f12b866d2b48","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/5391f12b866d2b48","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833450163,"stop":1761833451256,"duration":1093}},{"uid":"8749c1064261fcbb","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/8749c1064261fcbb","status":"passed","time":{"start":1761821677997,"stop":1761821679340,"duration":1343}},{"uid":"bcf7ec73442fddef","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/bcf7ec73442fddef","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818742927,"stop":1761818743897,"duration":970}},{"uid":"2ea2b360e7c767f8","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/2ea2b360e7c767f8","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748608356,"stop":1761748609138,"duration":782}},{"uid":"9b3f85567915ff00","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/9b3f85567915ff00","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747880328,"stop":1761747881391,"duration":1063}},{"uid":"ae54ce2940f4a8ba","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ae54ce2940f4a8ba","status":"passed","time":{"start":1761746837040,"stop":1761746838955,"duration":1915}},{"uid":"24cb064954dc7e22","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/24cb064954dc7e22","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745719829,"stop":1761745720634,"duration":805}},{"uid":"ebbfaa9a128b9d00","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ebbfaa9a128b9d00","status":"passed","time":{"start":1761576681032,"stop":1761576682665,"duration":1633}},{"uid":"477df29caf8d81a8","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/477df29caf8d81a8","status":"passed","time":{"start":1761557333842,"stop":1761557335486,"duration":1644}},{"uid":"b1b78e840bb36376","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/b1b78e840bb36376","status":"passed","time":{"start":1761308558225,"stop":1761308559942,"duration":1717}},{"uid":"f603e939b6332424","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/f603e939b6332424","status":"passed","time":{"start":1761306717621,"stop":1761306719289,"duration":1668}},{"uid":"1a5d376ee488f06e","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/1a5d376ee488f06e","status":"passed","time":{"start":1761137012092,"stop":1761137013700,"duration":1608}},{"uid":"cd6ab5ea57e00b1e","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/cd6ab5ea57e00b1e","status":"passed","time":{"start":1761135684736,"stop":1761135686853,"duration":2117}},{"uid":"2944ed5fef429774","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/2944ed5fef429774","status":"passed","time":{"start":1761134118051,"stop":1761134119589,"duration":1538}},{"uid":"57b6bae3f620a782","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/57b6bae3f620a782","status":"passed","time":{"start":1761128468885,"stop":1761128470921,"duration":2036}},{"uid":"a35c1a9952370562","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/a35c1a9952370562","status":"passed","time":{"start":1761124580561,"stop":1761124582600,"duration":2039}},{"uid":"3854f7ce888d87bb","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/3854f7ce888d87bb","status":"passed","time":{"start":1761119393845,"stop":1761119395489,"duration":1644}}]},"tags":["backend"]},"source":"4c9acb01bd20a532.json","parameterValues":["'owner_client'","'manager_client'","403"]}