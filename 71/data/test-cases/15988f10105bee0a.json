{"uid":"15988f10105bee0a","name":"Ошибка при создании борды с None вместо списков в полях groups/typesList/customFields","fullName":"backend_tests.tests.test_board.test_board#test_create_board_with_none_fields","historyId":"94f20b553cfe7499a2f008a54015f777","time":{"start":1748957061693,"stop":1748957062407,"duration":714},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <backend_tests.core.client.APIClient object at 0x7f34574d7c90>\ntemp_project = '683ef785b43fb426ec95106f'\ntemp_space = '683ef783b43fb426ec950fea'\n\n    @allure.title(\"Ошибка при создании борды с None вместо списков в полях groups/typesList/customFields\")\n    def test_create_board_with_none_fields(owner_client, temp_project, temp_space):\n        name = generate_board_name()\n    \n        with allure.step(\"Отправка запроса, где списочные поля переданы как None\"):\n            response = owner_client.post(**create_board_endpoint(\n                name,\n                temp_project,\n                temp_space,\n                None,\n                None,\n                None\n            ))\n    \n        with allure.step(\"Проверка, что API вернул 400 – ошибка валидации типов\"):\n>           assert response.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nbackend_tests/tests/test_board/test_board.py:106: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1748957041728,"stop":1748957041729,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1748957041729,"stop":1748957042295,"duration":566},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1748957041729,"stop":1748957041729,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1748957041729,"stop":1748957041729,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1748957041729,"stop":1748957041729,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1748957059457,"stop":1748957060098,"duration":641},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1748957060098,"stop":1748957061692,"duration":1594},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <backend_tests.core.client.APIClient object at 0x7f34574d7c90>\ntemp_project = '683ef785b43fb426ec95106f'\ntemp_space = '683ef783b43fb426ec950fea'\n\n    @allure.title(\"Ошибка при создании борды с None вместо списков в полях groups/typesList/customFields\")\n    def test_create_board_with_none_fields(owner_client, temp_project, temp_space):\n        name = generate_board_name()\n    \n        with allure.step(\"Отправка запроса, где списочные поля переданы как None\"):\n            response = owner_client.post(**create_board_endpoint(\n                name,\n                temp_project,\n                temp_space,\n                None,\n                None,\n                None\n            ))\n    \n        with allure.step(\"Проверка, что API вернул 400 – ошибка валидации типов\"):\n>           assert response.status_code == 200\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\nbackend_tests/tests/test_board/test_board.py:106: AssertionError","steps":[{"name":"Отправка запроса, где списочные поля переданы как None","time":{"start":1748957061693,"stop":1748957062407,"duration":714},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что API вернул 400 – ошибка валидации типов","time":{"start":1748957062407,"stop":1748957062407,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/backend_tests/tests/test_board/test_board.py\", line 106, in test_create_board_with_none_fields\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1748957062413,"stop":1748957062933,"duration":520},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"backend_tests.tests.test_board"},{"name":"suite","value":"test_board"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"2606-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"backend_tests.tests.test_board.test_board"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":9},"items":[{"uid":"432941ca90929582","reportUrl":"https://vaizcom.github.io/autotests/70//#testresult/432941ca90929582","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1748955530820,"stop":1748955531458,"duration":638}},{"uid":"e9a763057b94695d","reportUrl":"https://vaizcom.github.io/autotests/68//#testresult/e9a763057b94695d","status":"passed","time":{"start":1748954457915,"stop":1748954458606,"duration":691}},{"uid":"2c859f61ae8cd3a1","reportUrl":"https://vaizcom.github.io/autotests/65//#testresult/2c859f61ae8cd3a1","status":"passed","time":{"start":1748953497510,"stop":1748953498207,"duration":697}},{"uid":"8cff33ff7f248073","reportUrl":"https://vaizcom.github.io/autotests/64//#testresult/8cff33ff7f248073","status":"passed","time":{"start":1748872671169,"stop":1748872671743,"duration":574}},{"uid":"baf973d0b8d69862","reportUrl":"https://vaizcom.github.io/autotests/63//#testresult/baf973d0b8d69862","status":"passed","time":{"start":1748865843892,"stop":1748865844625,"duration":733}},{"uid":"1b7d9d7124c75789","reportUrl":"https://vaizcom.github.io/autotests/62//#testresult/1b7d9d7124c75789","status":"passed","time":{"start":1748854186024,"stop":1748854186600,"duration":576}},{"uid":"d7f3397d41be5c22","reportUrl":"https://vaizcom.github.io/autotests/61//#testresult/d7f3397d41be5c22","status":"passed","time":{"start":1748613127423,"stop":1748613127997,"duration":574}},{"uid":"45768ab7862d3ed7","reportUrl":"https://vaizcom.github.io/autotests/60//#testresult/45768ab7862d3ed7","status":"passed","time":{"start":1748610974418,"stop":1748610975218,"duration":800}}]},"tags":[]},"source":"15988f10105bee0a.json","parameterValues":[]}