{"uid":"cb4f12ba5ef5b3fd","name":"Редактирование Space-документа: создание member, редактирование owner","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_project_and_space_docs_different_roles","historyId":"73427393656ce9f72b720a0b8d43cac7","time":{"start":1761912119229,"stop":1761912119838,"duration":609},"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\nмогут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\nдокументы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\nтестирования различных комбинаций ролей создателей и редакторов документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[space_doc-member_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\neditor_fixture = 'owner_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:98: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761912073100,"stop":1761912073571,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761912076138,"stop":1761912076602,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761912076602,"stop":1761912076805,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761912078093,"stop":1761912078541,"duration":448},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[space_doc-member_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\neditor_fixture = 'owner_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:98: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью member","time":{"start":1761912119229,"stop":1761912119439,"duration":210},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью owner","time":{"start":1761912119439,"stop":1761912119567,"duration":128},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 98, in test_edit_project_and_space_docs_different_roles\n    assert edit_response.status_code == expected_status, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1761912119568,"stop":1761912119838,"duration":270},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2535-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'member_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"editor_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":54},"items":[{"uid":"6f61a7541833d2e","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/6f61a7541833d2e","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911219262,"stop":1761911219950,"duration":688}},{"uid":"cf470c1325d9e16d","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/cf470c1325d9e16d","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910842428,"stop":1761910842985,"duration":557}},{"uid":"41311849a87bd657","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/41311849a87bd657","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910544181,"stop":1761910545521,"duration":1340}},{"uid":"306fc0e3c45a2303","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/306fc0e3c45a2303","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909919118,"stop":1761909919822,"duration":704}},{"uid":"55427386a8c8fd19","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/55427386a8c8fd19","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899950728,"stop":1761899951459,"duration":731}},{"uid":"e6e1decc450e28f4","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/e6e1decc450e28f4","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834989922,"stop":1761834990625,"duration":703}},{"uid":"51a992ddcf7c27c7","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/51a992ddcf7c27c7","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834551118,"stop":1761834551887,"duration":769}},{"uid":"734f37dde942f048","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/734f37dde942f048","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833382469,"stop":1761833383277,"duration":808}},{"uid":"12f861c13bf0ba2c","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/12f861c13bf0ba2c","status":"passed","time":{"start":1761821569605,"stop":1761821570884,"duration":1279}},{"uid":"b0db82ff27984517","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/b0db82ff27984517","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818682708,"stop":1761818683922,"duration":1214}},{"uid":"e579c785904f6c1e","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/e579c785904f6c1e","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748554682,"stop":1761748555329,"duration":647}},{"uid":"baf4c2fb9a104b03","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/baf4c2fb9a104b03","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747820455,"stop":1761747821147,"duration":692}},{"uid":"84f81905b0dce4b2","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/84f81905b0dce4b2","status":"passed","time":{"start":1761746703289,"stop":1761746705219,"duration":1930}},{"uid":"dd5dc055804fe4f9","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/dd5dc055804fe4f9","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745675102,"stop":1761745675658,"duration":556}},{"uid":"c1ab8b0fa2f93047","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c1ab8b0fa2f93047","status":"passed","time":{"start":1761576565856,"stop":1761576567258,"duration":1402}},{"uid":"936a341fafc5c53d","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/936a341fafc5c53d","status":"passed","time":{"start":1761557221683,"stop":1761557223667,"duration":1984}},{"uid":"b11bc88326ce76f","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/b11bc88326ce76f","status":"passed","time":{"start":1761308446892,"stop":1761308448284,"duration":1392}},{"uid":"db1dacc6b449001a","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/db1dacc6b449001a","status":"passed","time":{"start":1761306593407,"stop":1761306594854,"duration":1447}},{"uid":"c03d986c5dcedd42","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/c03d986c5dcedd42","status":"passed","time":{"start":1761136891863,"stop":1761136893750,"duration":1887}},{"uid":"b41d1354505b7fdc","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/b41d1354505b7fdc","status":"passed","time":{"start":1761135552714,"stop":1761135554399,"duration":1685}}]},"tags":["backend"]},"source":"cb4f12ba5ef5b3fd.json","parameterValues":["'member_client'","'main_space'","'Space'","'owner_client'","200"]}