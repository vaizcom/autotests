{"uid":"3d9a1b5c46746017","name":"Архивирование Project-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"35008ddad71ffbcff153f0d17b4a1f7b","time":{"start":1752235251949,"stop":1752235252682,"duration":733},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[member]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:94: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1752235204429,"stop":1752235204429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752235204429,"stop":1752235204429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752235204429,"stop":1752235204429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752235204429,"stop":1752235204429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752235241221,"stop":1752235241593,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752235241593,"stop":1752235242262,"duration":669},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752235242263,"stop":1752235243019,"duration":756},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1752235248929,"stop":1752235249285,"duration":356},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[member]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:94: AssertionError","steps":[{"name":"Случайный клиент (member_client) создаёт Project-документ для архивации (title: 11.07_12:00:51 Project Doc For archive Check)","time":{"start":1752235251949,"stop":1752235252681,"duration":732},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 94, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки архивирования","time":{"start":1752235252681,"stop":1752235252681,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 94, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":31,"unknown":0,"total":32},"items":[{"uid":"2731dcd2e2ebb542","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/2731dcd2e2ebb542","status":"passed","time":{"start":1752235240756,"stop":1752235241631,"duration":875}},{"uid":"f0b38fb78d13b425","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/f0b38fb78d13b425","status":"passed","time":{"start":1752234298751,"stop":1752234299692,"duration":941}},{"uid":"999a78938d068518","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/999a78938d068518","status":"passed","time":{"start":1752234288875,"stop":1752234289679,"duration":804}},{"uid":"21d1aeb67c871820","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/21d1aeb67c871820","status":"passed","time":{"start":1752233463277,"stop":1752233464190,"duration":913}},{"uid":"bc81c714e71444fc","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/bc81c714e71444fc","status":"passed","time":{"start":1752232544560,"stop":1752232545164,"duration":604}},{"uid":"a3bab897362d9595","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/a3bab897362d9595","status":"passed","time":{"start":1752232075724,"stop":1752232076397,"duration":673}},{"uid":"7b148b4860a365c2","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/7b148b4860a365c2","status":"passed","time":{"start":1752223488459,"stop":1752223489039,"duration":580}},{"uid":"5bba935f6d12d3d2","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/5bba935f6d12d3d2","status":"passed","time":{"start":1752218250091,"stop":1752218250813,"duration":722}},{"uid":"289e9fbe54ae4c0c","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/289e9fbe54ae4c0c","status":"passed","time":{"start":1752151015164,"stop":1752151016046,"duration":882}},{"uid":"958ae67c47e1688d","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/958ae67c47e1688d","status":"passed","time":{"start":1752148892967,"stop":1752148893544,"duration":577}},{"uid":"1f1f1ced5edd1d66","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/1f1f1ced5edd1d66","status":"passed","time":{"start":1752138377444,"stop":1752138378302,"duration":858}},{"uid":"2dd1f6d555632d2f","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/2dd1f6d555632d2f","status":"passed","time":{"start":1752137253543,"stop":1752137254418,"duration":875}},{"uid":"b4506b89af88bb64","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/b4506b89af88bb64","status":"passed","time":{"start":1752133884720,"stop":1752133885712,"duration":992}},{"uid":"52dc2f152cd15bfc","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/52dc2f152cd15bfc","status":"passed","time":{"start":1752066482454,"stop":1752066483128,"duration":674}},{"uid":"111a92981a8c40e2","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/111a92981a8c40e2","status":"passed","time":{"start":1752065487686,"stop":1752065488558,"duration":872}},{"uid":"dbf9def914473877","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/dbf9def914473877","status":"passed","time":{"start":1752064702403,"stop":1752064702994,"duration":591}},{"uid":"ad0e2aade6f7cf07","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/ad0e2aade6f7cf07","status":"passed","time":{"start":1752062486644,"stop":1752062487385,"duration":741}},{"uid":"52914f596c3796d","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/52914f596c3796d","status":"passed","time":{"start":1752060627919,"stop":1752060628528,"duration":609}},{"uid":"fd9f89e58342fc95","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/fd9f89e58342fc95","status":"passed","time":{"start":1752059597755,"stop":1752059598544,"duration":789}},{"uid":"8694c9a53b1c5608","reportUrl":"https://vaizcom.github.io/autotests/265//#testresult/8694c9a53b1c5608","status":"passed","time":{"start":1752050780284,"stop":1752050781024,"duration":740}}]},"tags":["backend"]},"source":"3d9a1b5c46746017.json","parameterValues":["'member_client'","200"]}