{"uid":"ad4985d149a1d073","name":"Архивирование Project-документа для роли manager","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"095f967bb8ed7e1afafe0b879db5dfa8","time":{"start":1761921775173,"stop":1761921775292,"duration":119},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:112: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761921767725,"stop":1761921768196,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761921768380,"stop":1761921768849,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[manager]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:112: AssertionError","steps":[{"name":"Случайный клиент (owner_client) создаёт Project-документ для архивации (title: 31.10_14:42:55 Project Doc For archive Check)","time":{"start":1761921775173,"stop":1761921775292,"duration":119},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 112, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки архивирования","time":{"start":1761921775291,"stop":1761921775292,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 112, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":49,"unknown":0,"total":55},"items":[{"uid":"aa88d6ba389fdad1","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/aa88d6ba389fdad1","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761912083458,"stop":1761912083587,"duration":129}},{"uid":"fc87683150af5517","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/fc87683150af5517","status":"passed","time":{"start":1761911176661,"stop":1761911177469,"duration":808}},{"uid":"3397dd4878ffdc2c","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/3397dd4878ffdc2c","status":"passed","time":{"start":1761910803887,"stop":1761910804707,"duration":820}},{"uid":"6995b9a39c7369e9","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/6995b9a39c7369e9","status":"passed","time":{"start":1761910507075,"stop":1761910508339,"duration":1264}},{"uid":"168cc2ae7e7b9d18","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/168cc2ae7e7b9d18","status":"passed","time":{"start":1761909870412,"stop":1761909871209,"duration":797}},{"uid":"4ee53b5350273463","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/4ee53b5350273463","status":"passed","time":{"start":1761899903966,"stop":1761899905276,"duration":1310}},{"uid":"92fc363d25036e80","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/92fc363d25036e80","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761834951788,"stop":1761834951912,"duration":124}},{"uid":"6b78577d226dd30d","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/6b78577d226dd30d","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761834502842,"stop":1761834503029,"duration":187}},{"uid":"5442ae5a3f55dae1","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/5442ae5a3f55dae1","status":"passed","time":{"start":1761833329457,"stop":1761833330242,"duration":785}},{"uid":"cc034488df40128a","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/cc034488df40128a","status":"passed","time":{"start":1761821512242,"stop":1761821512918,"duration":676}},{"uid":"9707e81eb27c1ed4","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/9707e81eb27c1ed4","status":"passed","time":{"start":1761818631551,"stop":1761818632383,"duration":832}},{"uid":"28f13f6e66484a8b","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/28f13f6e66484a8b","status":"passed","time":{"start":1761748514990,"stop":1761748515677,"duration":687}},{"uid":"f868a31632ad9900","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/f868a31632ad9900","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761747775179,"stop":1761747775363,"duration":184}},{"uid":"7cb0bb94ee2cded3","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/7cb0bb94ee2cded3","status":"passed","time":{"start":1761746631720,"stop":1761746632504,"duration":784}},{"uid":"9d2282736c5cede0","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/9d2282736c5cede0","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761745638727,"stop":1761745639048,"duration":321}},{"uid":"1762f63043a72ff8","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/1762f63043a72ff8","status":"passed","time":{"start":1761576504367,"stop":1761576505044,"duration":677}},{"uid":"95ffeca752170aa4","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/95ffeca752170aa4","status":"passed","time":{"start":1761557160919,"stop":1761557161677,"duration":758}},{"uid":"b9f7fad682991aa1","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/b9f7fad682991aa1","status":"passed","time":{"start":1761308385590,"stop":1761308386257,"duration":667}},{"uid":"5073eeeee6ae9f33","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/5073eeeee6ae9f33","status":"passed","time":{"start":1761306532861,"stop":1761306533557,"duration":696}},{"uid":"b50d33760a6ca5bf","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/b50d33760a6ca5bf","status":"passed","time":{"start":1761136827888,"stop":1761136828600,"duration":712}}]},"tags":["backend"]},"source":"ad4985d149a1d073.json","parameterValues":["'manager_client'","200"]}