{"uid":"4b31353d11c70ab9","name":"Проверка доступа к документу в Project для роли member","fullName":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles#test_get_project_and_space_doc_access_by_roles","historyId":"7096e8654b14b3e3813d976ca0b54894","time":{"start":1759767456228,"stop":1759767457097,"duration":869},"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\nдля проверки разных типов клиентов и контейнеров документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-member]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'member_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7ff2f3f6f060>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем member: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1759767275032,"stop":1759767275032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767275033,"stop":1759767275653,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767275653,"stop":1759767276290,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1759767276290,"stop":1759767276592,"duration":302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759767276593,"stop":1759767277104,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767278005,"stop":1759767278446,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1759767279249,"stop":1759767279709,"duration":460},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1759767456228,"stop":1759767456228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-member]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'member_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7ff2f3f6f060>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем member: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документу в Project","time":{"start":1759767456228,"stop":1759767456228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Project разными ролями","time":{"start":1759767456228,"stop":1759767457097,"duration":869},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1759767456228,"stop":1759767456534,"duration":306},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание документа пользователем manager","time":{"start":1759767456534,"stop":1759767456827,"duration":293},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание документа пользователем member","time":{"start":1759767456827,"stop":1759767457097,"duration":270},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1759767457105,"stop":1759767457742,"duration":637},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1759767457105,"stop":1759767457742,"duration":637},"status":"passed","steps":[{"name":"Удаление документа \"Project doc by owner 2025.10.06_16:17:36\" (создан owner)","time":{"start":1759767457105,"stop":1759767457413,"duration":308},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Удаление документа \"Project doc by manager 2025.10.06_16:17:36\" (создан manager)","time":{"start":1759767457413,"stop":1759767457742,"duration":329},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"container_fixture","value":"'main_project'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":38,"unknown":0,"total":40},"items":[{"uid":"d28c08e7ae6c2536","reportUrl":"https://vaizcom.github.io/autotests/343//#testresult/d28c08e7ae6c2536","status":"passed","time":{"start":1759767410485,"stop":1759767411918,"duration":1433}},{"uid":"8c9c0f4fa9c7a82","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/8c9c0f4fa9c7a82","status":"passed","time":{"start":1759753868802,"stop":1759753870310,"duration":1508}},{"uid":"ca3f1ad04c56ce3c","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/ca3f1ad04c56ce3c","status":"passed","time":{"start":1759743833896,"stop":1759743835331,"duration":1435}},{"uid":"c4040113835a1ba5","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/c4040113835a1ba5","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485531359,"stop":1759485531359,"duration":0}},{"uid":"2b9f7ca59627bd57","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/2b9f7ca59627bd57","status":"passed","time":{"start":1759232459713,"stop":1759232461317,"duration":1604}},{"uid":"2ada6194a422eb04","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/2ada6194a422eb04","status":"passed","time":{"start":1759140742876,"stop":1759140744341,"duration":1465}},{"uid":"5e2d4f42cbbe1c30","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/5e2d4f42cbbe1c30","status":"passed","time":{"start":1758891803366,"stop":1758891805351,"duration":1985}},{"uid":"2165e6065c2bc41e","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/2165e6065c2bc41e","status":"passed","time":{"start":1758807750930,"stop":1758807753024,"duration":2094}},{"uid":"266b5964f803990c","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/266b5964f803990c","status":"passed","time":{"start":1758806626921,"stop":1758806628677,"duration":1756}},{"uid":"dbda6dcd6b1bc3c7","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/dbda6dcd6b1bc3c7","status":"passed","time":{"start":1758791199400,"stop":1758791201439,"duration":2039}},{"uid":"13a2fb9a0e5ed5e5","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/13a2fb9a0e5ed5e5","status":"passed","time":{"start":1758540521487,"stop":1758540523253,"duration":1766}},{"uid":"3161f2a35d5d9bf2","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/3161f2a35d5d9bf2","status":"passed","time":{"start":1758289144670,"stop":1758289146756,"duration":2086}},{"uid":"902d3e26be43d586","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/902d3e26be43d586","status":"passed","time":{"start":1755852326038,"stop":1755852327568,"duration":1530}},{"uid":"b8a100b8f6b79b4f","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/b8a100b8f6b79b4f","status":"passed","time":{"start":1755851831772,"stop":1755851833592,"duration":1820}},{"uid":"b8fe9f9a981d17f2","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/b8fe9f9a981d17f2","status":"passed","time":{"start":1755847966844,"stop":1755847968562,"duration":1718}},{"uid":"6da368ef15703078","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/6da368ef15703078","status":"passed","time":{"start":1755777831564,"stop":1755777833535,"duration":1971}},{"uid":"53aade2ead18348a","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/53aade2ead18348a","status":"passed","time":{"start":1755774474187,"stop":1755774475909,"duration":1722}},{"uid":"64d25a9ef8f17a3d","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/64d25a9ef8f17a3d","status":"passed","time":{"start":1755694596520,"stop":1755694598399,"duration":1879}},{"uid":"b9127d9f0573fab6","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/b9127d9f0573fab6","status":"passed","time":{"start":1755694031700,"stop":1755694033419,"duration":1719}},{"uid":"3a3fda693b573b9e","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/3a3fda693b573b9e","status":"passed","time":{"start":1755687105491,"stop":1755687107116,"duration":1625}}]},"tags":["backend"]},"source":"4b31353d11c70ab9.json","parameterValues":["'member_client'","'main_project'","200","'Project'"]}