{"uid":"718963b3d790bedc","name":"Дублирование Space-документа: создание owner, дублирование member","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_project_and_space_docs_different_roles","historyId":"d6d948ffcf70ffce1ee19dd8e3a7fe66","time":{"start":1752500955463,"stop":1752500957490,"duration":2027},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-owner_to_member]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\nduplicator_fixture = 'member_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space', resource_lock = None\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container, resource_lock\n    ):\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа второй ролью\n            with allure.step(f'Дублирование документа пользователем с ролью {duplicator_role}'):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:105: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500916493,"stop":1752500917294,"duration":801},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500917294,"stop":1752500918389,"duration":1095},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752500918390,"stop":1752500918918,"duration":528},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752500927469,"stop":1752500927992,"duration":523},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"resource_lock","time":{"start":1752500955463,"stop":1752500955463,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-owner_to_member]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\nduplicator_fixture = 'member_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space', resource_lock = None\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container, resource_lock\n    ):\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа второй ролью\n            with allure.step(f'Дублирование документа пользователем с ролью {duplicator_role}'):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:105: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью owner","time":{"start":1752500955464,"stop":1752500956320,"duration":856},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Дублирование документа пользователем с ролью member","time":{"start":1752500956321,"stop":1752500956893,"duration":572},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 105, in test_duplicate_project_and_space_docs_different_roles\n    assert duplicate_response.status_code == expected_status, (\n","steps":[],"attachments":[{"uid":"b072ff24bf3f797c","name":"Response Body","source":"b072ff24bf3f797c.json","type":"application/json","size":309}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Архивация исходного документа","time":{"start":1752500956893,"stop":1752500957490,"duration":597},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"resource_lock::0","time":{"start":1752500957524,"stop":1752500957524,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"duplicator_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":19,"unknown":0,"total":21},"items":[{"uid":"d4e893be462bff47","reportUrl":"https://vaizcom.github.io/autotests/295//#testresult/d4e893be462bff47","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752500570344,"stop":1752500570752,"duration":408}},{"uid":"eac1981ebba80bf6","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/eac1981ebba80bf6","status":"passed","time":{"start":1752499242901,"stop":1752499245352,"duration":2451}},{"uid":"f20231b8ee20253f","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/f20231b8ee20253f","status":"passed","time":{"start":1752498190227,"stop":1752498191389,"duration":1162}},{"uid":"54c4e1bf4a67329f","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/54c4e1bf4a67329f","status":"passed","time":{"start":1752496524859,"stop":1752496526596,"duration":1737}},{"uid":"a59d3755322c0dc2","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/a59d3755322c0dc2","status":"passed","time":{"start":1752481663408,"stop":1752481664432,"duration":1024}},{"uid":"ab0e58d03c39d6b4","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/ab0e58d03c39d6b4","status":"passed","time":{"start":1752479692842,"stop":1752479694360,"duration":1518}},{"uid":"d8bc95866bda5e8f","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/d8bc95866bda5e8f","status":"passed","time":{"start":1752477852296,"stop":1752477853380,"duration":1084}},{"uid":"6ab62610ea870e07","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/6ab62610ea870e07","status":"passed","time":{"start":1752236722994,"stop":1752236724296,"duration":1302}},{"uid":"f77d4edc2159c509","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/f77d4edc2159c509","status":"passed","time":{"start":1752236094500,"stop":1752236095573,"duration":1073}},{"uid":"32285981a3ee7cef","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/32285981a3ee7cef","status":"passed","time":{"start":1752235312155,"stop":1752235313950,"duration":1795}},{"uid":"64025ef9b12942c6","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/64025ef9b12942c6","status":"passed","time":{"start":1752235290801,"stop":1752235292700,"duration":1899}},{"uid":"cf7601b8e980f68f","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/cf7601b8e980f68f","status":"passed","time":{"start":1752234344088,"stop":1752234345977,"duration":1889}},{"uid":"aa740c74bbe94d36","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/aa740c74bbe94d36","status":"passed","time":{"start":1752234327006,"stop":1752234328674,"duration":1668}},{"uid":"ab05d258ee3dda32","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/ab05d258ee3dda32","status":"passed","time":{"start":1752233504532,"stop":1752233505817,"duration":1285}},{"uid":"2b99e139476ba1","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/2b99e139476ba1","status":"passed","time":{"start":1752232578923,"stop":1752232580088,"duration":1165}},{"uid":"30f20b51b2f468fe","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/30f20b51b2f468fe","status":"passed","time":{"start":1752232111670,"stop":1752232113192,"duration":1522}},{"uid":"88f7e591a6ff1c4e","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/88f7e591a6ff1c4e","status":"passed","time":{"start":1752223521314,"stop":1752223522328,"duration":1014}},{"uid":"dff16a73796c8076","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/dff16a73796c8076","status":"passed","time":{"start":1752218284234,"stop":1752218285680,"duration":1446}},{"uid":"4f0ccc499ee3fc1e","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/4f0ccc499ee3fc1e","status":"passed","time":{"start":1752151049822,"stop":1752151050985,"duration":1163}},{"uid":"8f15738e2e610840","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/8f15738e2e610840","status":"passed","time":{"start":1752148918425,"stop":1752148919447,"duration":1022}}]},"tags":["backend"]},"source":"718963b3d790bedc.json","parameterValues":["'owner_client'","'main_space'","'Space'","'member_client'","200"]}