{"uid":"6f6149a776e49f38","name":"Редактирование Space-документа: создание manager, редактирование guest","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_project_and_space_docs_different_roles","historyId":"3827a68813cab342a5e716813a6e2363","time":{"start":1759767401134,"stop":1759767401392,"duration":258},"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\nмогут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\nдокументы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\nтестирования различных комбинаций ролей создателей и редакторов документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем manager: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[space_doc-manager_to_guest]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\neditor_fixture = 'guest_client', expected_status = 403, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем manager: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:88: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1759767275032,"stop":1759767275032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767275033,"stop":1759767275653,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767275653,"stop":1759767276290,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767278005,"stop":1759767278446,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1759767279938,"stop":1759767280423,"duration":485},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем manager: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[space_doc-manager_to_guest]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\neditor_fixture = 'guest_client', expected_status = 403, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем manager: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:88: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью manager","time":{"start":1759767401135,"stop":1759767401391,"duration":256},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем manager: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 88, in test_edit_project_and_space_docs_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'manager_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"editor_fixture","value":"'guest_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":1,"skipped":0,"passed":59,"unknown":0,"total":64},"items":[{"uid":"cfcc89c1b68dc3b6","reportUrl":"https://vaizcom.github.io/autotests/343//#testresult/cfcc89c1b68dc3b6","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем manager: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1759767362327,"stop":1759767362635,"duration":308}},{"uid":"7b4ad3ea0af82446","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/7b4ad3ea0af82446","status":"passed","time":{"start":1759753819473,"stop":1759753820144,"duration":671}},{"uid":"5ac263327c0ddf01","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/5ac263327c0ddf01","status":"passed","time":{"start":1759743782216,"stop":1759743783010,"duration":794}},{"uid":"a6c3940ae192ab09","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/a6c3940ae192ab09","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485527727,"stop":1759485527727,"duration":0}},{"uid":"7074dffb0e9f2ab0","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/7074dffb0e9f2ab0","status":"passed","time":{"start":1759232409814,"stop":1759232410521,"duration":707}},{"uid":"1a5374fbd35f2893","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/1a5374fbd35f2893","status":"passed","time":{"start":1759140696088,"stop":1759140696809,"duration":721}},{"uid":"de3dffbb6767501a","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/de3dffbb6767501a","status":"passed","time":{"start":1758891741963,"stop":1758891743039,"duration":1076}},{"uid":"5ef0b28c58fb052a","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/5ef0b28c58fb052a","status":"passed","time":{"start":1758807687314,"stop":1758807688296,"duration":982}},{"uid":"cb989e56a7720707","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/cb989e56a7720707","status":"passed","time":{"start":1758806566227,"stop":1758806567034,"duration":807}},{"uid":"cd65e3334ef3b44a","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/cd65e3334ef3b44a","status":"passed","time":{"start":1758791133009,"stop":1758791133946,"duration":937}},{"uid":"1379ddb61c66890a","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/1379ddb61c66890a","status":"passed","time":{"start":1758540470112,"stop":1758540470849,"duration":737}},{"uid":"f45c94530e4a961a","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/f45c94530e4a961a","status":"passed","time":{"start":1758289081676,"stop":1758289082777,"duration":1101}},{"uid":"30c46d8fe6dcbdd7","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/30c46d8fe6dcbdd7","status":"passed","time":{"start":1755852277015,"stop":1755852277779,"duration":764}},{"uid":"d77d413b48715b98","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/d77d413b48715b98","status":"passed","time":{"start":1755851780688,"stop":1755851781408,"duration":720}},{"uid":"eb68e0999f591d3c","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/eb68e0999f591d3c","status":"passed","time":{"start":1755847912029,"stop":1755847912807,"duration":778}},{"uid":"ca8d3b4da37888fd","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/ca8d3b4da37888fd","status":"passed","time":{"start":1755777778878,"stop":1755777779684,"duration":806}},{"uid":"75609bc217b20a61","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/75609bc217b20a61","status":"passed","time":{"start":1755774421769,"stop":1755774422616,"duration":847}},{"uid":"385b6f737ae00719","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/385b6f737ae00719","status":"passed","time":{"start":1755694532306,"stop":1755694533209,"duration":903}},{"uid":"171e1c49e2d8d21d","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/171e1c49e2d8d21d","status":"passed","time":{"start":1755693963136,"stop":1755693964114,"duration":978}},{"uid":"87c564408dd048eb","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/87c564408dd048eb","status":"passed","time":{"start":1755687053717,"stop":1755687054453,"duration":736}}]},"tags":["backend"]},"source":"6f6149a776e49f38.json","parameterValues":["'manager_client'","'main_space'","'Space'","'guest_client'","403"]}