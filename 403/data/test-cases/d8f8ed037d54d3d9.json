{"uid":"d8f8ed037d54d3d9","name":"Архивирование Project-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"35008ddad71ffbcff153f0d17b4a1f7b","time":{"start":1761911177472,"stop":1761911177651,"duration":179},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[member]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:112: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761911162887,"stop":1761911162887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761911162888,"stop":1761911163517,"duration":629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761911162888,"stop":1761911162888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761911166774,"stop":1761911167100,"duration":326},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761911167101,"stop":1761911167366,"duration":265},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761911167366,"stop":1761911167640,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761911169328,"stop":1761911169626,"duration":298},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[member]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:112: AssertionError","steps":[{"name":"Случайный клиент (owner_client) создаёт Project-документ для архивации (title: 31.10_11:46:17 Project Doc For archive Check)","time":{"start":1761911177472,"stop":1761911177651,"duration":179},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 112, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки архивирования","time":{"start":1761911177651,"stop":1761911177651,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 112, in test_archive_project_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2557-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":47,"unknown":0,"total":53},"items":[{"uid":"fcb82aeeaa7ef708","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/fcb82aeeaa7ef708","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761910804709,"stop":1761910804825,"duration":116}},{"uid":"4509f91384b475b2","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/4509f91384b475b2","status":"passed","time":{"start":1761910508341,"stop":1761910509557,"duration":1216}},{"uid":"87c4c50e9e316a82","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/87c4c50e9e316a82","status":"passed","time":{"start":1761909871211,"stop":1761909871976,"duration":765}},{"uid":"54422424cf88bc95","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/54422424cf88bc95","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761899905279,"stop":1761899905755,"duration":476}},{"uid":"da926a82b8c5344","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/da926a82b8c5344","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761834951918,"stop":1761834952041,"duration":123}},{"uid":"1833fa81681e2b6b","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/1833fa81681e2b6b","status":"passed","time":{"start":1761834503036,"stop":1761834503851,"duration":815}},{"uid":"3733be41550f3c75","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/3733be41550f3c75","status":"passed","time":{"start":1761833330244,"stop":1761833331019,"duration":775}},{"uid":"92d2ce2b8ce99aa2","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/92d2ce2b8ce99aa2","status":"passed","time":{"start":1761821512920,"stop":1761821513561,"duration":641}},{"uid":"8d24f11e8ee177f5","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/8d24f11e8ee177f5","status":"passed","time":{"start":1761818632385,"stop":1761818633144,"duration":759}},{"uid":"28c2bdd01216277f","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/28c2bdd01216277f","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761748515679,"stop":1761748515810,"duration":131}},{"uid":"74ce47bb567c1001","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/74ce47bb567c1001","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1761747775369,"stop":1761747775557,"duration":188}},{"uid":"b53ae41105178725","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/b53ae41105178725","status":"passed","time":{"start":1761746632506,"stop":1761746633220,"duration":714}},{"uid":"de6913c2da282bbc","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/de6913c2da282bbc","status":"passed","time":{"start":1761745639054,"stop":1761745640404,"duration":1350}},{"uid":"e3a168e92ddd7b4","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/e3a168e92ddd7b4","status":"passed","time":{"start":1761576505046,"stop":1761576505683,"duration":637}},{"uid":"e10df0ef13c8def7","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/e10df0ef13c8def7","status":"passed","time":{"start":1761557161680,"stop":1761557162464,"duration":784}},{"uid":"35921ed6ff0b447d","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/35921ed6ff0b447d","status":"passed","time":{"start":1761308386259,"stop":1761308386907,"duration":648}},{"uid":"f62fb4bf0106031c","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/f62fb4bf0106031c","status":"passed","time":{"start":1761306533559,"stop":1761306534228,"duration":669}},{"uid":"c852b01402d55dc6","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/c852b01402d55dc6","status":"passed","time":{"start":1761136828602,"stop":1761136829575,"duration":973}},{"uid":"2bcb48f96310a033","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/2bcb48f96310a033","status":"passed","time":{"start":1761135482867,"stop":1761135483694,"duration":827}},{"uid":"2a45ae07cea29c8c","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/2a45ae07cea29c8c","status":"passed","time":{"start":1761133945375,"stop":1761133946091,"duration":716}}]},"tags":["backend"]},"source":"d8f8ed037d54d3d9.json","parameterValues":["'member_client'","200"]}