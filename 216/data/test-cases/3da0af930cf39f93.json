{"uid":"3da0af930cf39f93","name":"Получение сиблингов документа (kind=Member)","fullName":"tests.test_backend.document.test_get_siblings#test_get_document_siblings","historyId":"4737455fbac5e2432e8c06fae57f29ea","time":{"start":1750928964434,"stop":1750928966327,"duration":1893},"status":"failed","statusMessage":"AssertionError: prevSibling для родителя должен быть None\nassert {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} is None\n +  where {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} = <built-in method get of dict object at 0x7f946e3d1000>('prevSibling')\n +    where <built-in method get of dict object at 0x7f946e3d1000> = {'parents': [], 'prevSibling': {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'tree': [{'document': {'_id': '685d0e44a2b8f0d4753873e1', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873e1', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685d0e44a2b8f0d4753873f5', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873f5', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685d0e45a2b8f0d47538743c', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d47538743c', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685d0e45a2b8f0d475387451', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d475387451', 'lft': 5, 'rgt': 6}]}.get","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f946fccf9d0>\nrequest = <FixtureRequest for <Function test_get_document_siblings[member]>>\ntemp_space = '685d0deea2b8f0d475385ace', kind = 'Member'\nkind_id_fixture = 'temp_member'\n\n    @pytest.mark.parametrize(\n        'kind, kind_id_fixture',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_document_siblings(owner_client, request, temp_space, kind, kind_id_fixture):\n        kind_id = request.getfixturevalue(kind_id_fixture)\n        space_id = temp_space\n        allure.dynamic.title(f'Получение сиблингов документа (kind={kind})')\n    \n        with allure.step('Создание родительского документа'):\n            resp = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=space_id, title='Parent')\n            )\n            assert resp.status_code == 200\n            parent_id = resp.json()['payload']['document']['_id']\n    \n        with allure.step('Создание дочерних документов'):\n            titles = ['Child A', 'Child B', 'Child C']\n            child_ids = []\n    \n            for title in titles:\n                resp = owner_client.post(\n                    **create_document_endpoint(\n                        kind=kind,\n                        kind_id=kind_id,\n                        space_id=space_id,\n                        title=title,\n                        parent_document_id=parent_id,\n                    )\n                )\n                assert resp.status_code == 200\n                child_ids.append(resp.json()['payload']['document']['_id'])\n    \n        with allure.step('Запрос сиблингов для среднего дочернего документа'):\n            target_id = child_ids[1]\n            resp = owner_client.post(**get_document_siblings_endpoint(document_id=target_id, space_id=space_id))\n            assert resp.status_code == 200\n            payload = resp.json()['payload']\n    \n        with allure.step('Проверка наличия обязательных ключей в payload'):\n            assert 'tree' in payload, 'В ответе отсутствует поле tree'\n            assert 'parents' in payload, 'В ответе отсутствует поле parents'\n            assert 'prevSibling' in payload, 'В ответе отсутствует поле prevSibling'\n            assert 'nextSibling' in payload, 'В ответе отсутствует поле nextSibling'\n    \n        with allure.step('Проверка корректности prev/nextSibling и parents'):\n            assert payload['prevSibling']['_id'] == child_ids[0], 'prevSibling некорректен'\n            assert payload['nextSibling']['_id'] == child_ids[2], 'nextSibling некорректен'\n            assert payload['parents'][0]['_id'] == parent_id, 'parents некорректен'\n    \n        with allure.step('Проверка структуры tree и полей document'):\n            for node in payload['tree']:\n                assert 'document' in node, 'В узле дерева отсутствует поле document'\n                doc = node['document']\n                expected_fields = ['_id', 'title', 'kind', 'kindId', 'map']\n                for field in expected_fields:\n                    assert field in doc, f'В документе отсутствует поле {field}'\n    \n        with allure.step('Проверка состава tree'):\n            tree_ids = [node['document']['_id'] for node in payload['tree']]\n            assert tree_ids == [target_id], f'В tree должен быть только запрошенный документ, но получено: {tree_ids}'\n    \n        with allure.step('Проверка сиблингов родительского документа'):\n            resp = owner_client.post(**get_document_siblings_endpoint(document_id=parent_id, space_id=space_id))\n            assert resp.status_code == 200\n            parent_payload = resp.json()['payload']\n>           assert parent_payload.get('prevSibling') is None, 'prevSibling для родителя должен быть None'\nE           AssertionError: prevSibling для родителя должен быть None\nE           assert {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} is None\nE            +  where {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} = <built-in method get of dict object at 0x7f946e3d1000>('prevSibling')\nE            +    where <built-in method get of dict object at 0x7f946e3d1000> = {'parents': [], 'prevSibling': {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'tree': [{'document': {'_id': '685d0e44a2b8f0d4753873e1', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873e1', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685d0e44a2b8f0d4753873f5', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873f5', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685d0e45a2b8f0d47538743c', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d47538743c', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685d0e45a2b8f0d475387451', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d475387451', 'lft': 5, 'rgt': 6}]}.get\n\ntests/test_backend/document/test_get_siblings.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1750928877833,"stop":1750928877834,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1750928877834,"stop":1750928877834,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1750928877834,"stop":1750928877834,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1750928877834,"stop":1750928878408,"duration":574},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1750928877834,"stop":1750928877834,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1750928878408,"stop":1750928879177,"duration":769},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_member","time":{"start":1750928903132,"stop":1750928903392,"duration":260},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: prevSibling для родителя должен быть None\nassert {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} is None\n +  where {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} = <built-in method get of dict object at 0x7f946e3d1000>('prevSibling')\n +    where <built-in method get of dict object at 0x7f946e3d1000> = {'parents': [], 'prevSibling': {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'tree': [{'document': {'_id': '685d0e44a2b8f0d4753873e1', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873e1', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685d0e44a2b8f0d4753873f5', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873f5', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685d0e45a2b8f0d47538743c', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d47538743c', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685d0e45a2b8f0d475387451', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d475387451', 'lft': 5, 'rgt': 6}]}.get","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f946fccf9d0>\nrequest = <FixtureRequest for <Function test_get_document_siblings[member]>>\ntemp_space = '685d0deea2b8f0d475385ace', kind = 'Member'\nkind_id_fixture = 'temp_member'\n\n    @pytest.mark.parametrize(\n        'kind, kind_id_fixture',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_document_siblings(owner_client, request, temp_space, kind, kind_id_fixture):\n        kind_id = request.getfixturevalue(kind_id_fixture)\n        space_id = temp_space\n        allure.dynamic.title(f'Получение сиблингов документа (kind={kind})')\n    \n        with allure.step('Создание родительского документа'):\n            resp = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=space_id, title='Parent')\n            )\n            assert resp.status_code == 200\n            parent_id = resp.json()['payload']['document']['_id']\n    \n        with allure.step('Создание дочерних документов'):\n            titles = ['Child A', 'Child B', 'Child C']\n            child_ids = []\n    \n            for title in titles:\n                resp = owner_client.post(\n                    **create_document_endpoint(\n                        kind=kind,\n                        kind_id=kind_id,\n                        space_id=space_id,\n                        title=title,\n                        parent_document_id=parent_id,\n                    )\n                )\n                assert resp.status_code == 200\n                child_ids.append(resp.json()['payload']['document']['_id'])\n    \n        with allure.step('Запрос сиблингов для среднего дочернего документа'):\n            target_id = child_ids[1]\n            resp = owner_client.post(**get_document_siblings_endpoint(document_id=target_id, space_id=space_id))\n            assert resp.status_code == 200\n            payload = resp.json()['payload']\n    \n        with allure.step('Проверка наличия обязательных ключей в payload'):\n            assert 'tree' in payload, 'В ответе отсутствует поле tree'\n            assert 'parents' in payload, 'В ответе отсутствует поле parents'\n            assert 'prevSibling' in payload, 'В ответе отсутствует поле prevSibling'\n            assert 'nextSibling' in payload, 'В ответе отсутствует поле nextSibling'\n    \n        with allure.step('Проверка корректности prev/nextSibling и parents'):\n            assert payload['prevSibling']['_id'] == child_ids[0], 'prevSibling некорректен'\n            assert payload['nextSibling']['_id'] == child_ids[2], 'nextSibling некорректен'\n            assert payload['parents'][0]['_id'] == parent_id, 'parents некорректен'\n    \n        with allure.step('Проверка структуры tree и полей document'):\n            for node in payload['tree']:\n                assert 'document' in node, 'В узле дерева отсутствует поле document'\n                doc = node['document']\n                expected_fields = ['_id', 'title', 'kind', 'kindId', 'map']\n                for field in expected_fields:\n                    assert field in doc, f'В документе отсутствует поле {field}'\n    \n        with allure.step('Проверка состава tree'):\n            tree_ids = [node['document']['_id'] for node in payload['tree']]\n            assert tree_ids == [target_id], f'В tree должен быть только запрошенный документ, но получено: {tree_ids}'\n    \n        with allure.step('Проверка сиблингов родительского документа'):\n            resp = owner_client.post(**get_document_siblings_endpoint(document_id=parent_id, space_id=space_id))\n            assert resp.status_code == 200\n            parent_payload = resp.json()['payload']\n>           assert parent_payload.get('prevSibling') is None, 'prevSibling для родителя должен быть None'\nE           AssertionError: prevSibling для родителя должен быть None\nE           assert {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} is None\nE            +  where {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} = <built-in method get of dict object at 0x7f946e3d1000>('prevSibling')\nE            +    where <built-in method get of dict object at 0x7f946e3d1000> = {'parents': [], 'prevSibling': {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'tree': [{'document': {'_id': '685d0e44a2b8f0d4753873e1', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873e1', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685d0e44a2b8f0d4753873f5', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873f5', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685d0e45a2b8f0d47538743c', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d47538743c', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685d0e45a2b8f0d475387451', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d475387451', 'lft': 5, 'rgt': 6}]}.get\n\ntests/test_backend/document/test_get_siblings.py:83: AssertionError","steps":[{"name":"Создание родительского документа","time":{"start":1750928964434,"stop":1750928964829,"duration":395},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание дочерних документов","time":{"start":1750928964829,"stop":1750928965860,"duration":1031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Запрос сиблингов для среднего дочернего документа","time":{"start":1750928965860,"stop":1750928966095,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка наличия обязательных ключей в payload","time":{"start":1750928966095,"stop":1750928966095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка корректности prev/nextSibling и parents","time":{"start":1750928966095,"stop":1750928966095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка структуры tree и полей document","time":{"start":1750928966095,"stop":1750928966095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка состава tree","time":{"start":1750928966095,"stop":1750928966095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка сиблингов родительского документа","time":{"start":1750928966095,"stop":1750928966326,"duration":231},"status":"failed","statusMessage":"AssertionError: prevSibling для родителя должен быть None\nassert {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} is None\n +  where {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...} = <built-in method get of dict object at 0x7f946e3d1000>('prevSibling')\n +    where <built-in method get of dict object at 0x7f946e3d1000> = {'parents': [], 'prevSibling': {'_id': '685d0e3da2b8f0d475387225', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'tree': [{'document': {'_id': '685d0e44a2b8f0d4753873e1', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873e1', 'lft': 0, 'rgt': 7}, {'document': {'_id': '685d0e44a2b8f0d4753873f5', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e44a2b8f0d4753873f5', 'lft': 1, 'rgt': 2}, {'document': {'_id': '685d0e45a2b8f0d47538743c', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d47538743c', 'lft': 3, 'rgt': 4}, {'document': {'_id': '685d0e45a2b8f0d475387451', 'kind': 'Member', 'kindId': '685d0defa2b8f0d475385ad0', 'map': [], ...}, 'id': '685d0e45a2b8f0d475387451', 'lft': 5, 'rgt': 6}]}.get\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_siblings.py\", line 83, in test_get_document_siblings\n    assert parent_payload.get('prevSibling') is None, 'prevSibling для родителя должен быть None'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_member::0","time":{"start":1750928977298,"stop":1750928977298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1750928977299,"stop":1750928978127,"duration":828},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_siblings"},{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"2537-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_siblings"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"kind","value":"'Member'"},{"name":"kind_id_fixture","value":"'temp_member'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["backend"]},"source":"3da0af930cf39f93.json","parameterValues":["'Member'","'temp_member'"]}