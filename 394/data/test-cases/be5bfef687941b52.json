{"uid":"be5bfef687941b52","name":"Проверка доступа к списку документов в Space для роли member","fullName":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles#test_get_project_and_space_docs_access_by_roles","historyId":"c16449655af3db12909332a3d67cc526","time":{"start":1761818707818,"stop":1761818707991,"duration":173},"description":"\n    Проверяем что разные роли могут получить списки документов из пространства и проекта.\n    Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n\n    Проверяется получение и наличие в ответе всех созданных документов с учетом\n    ожидаемого статуса запроса для каждой роли.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить списки документов из пространства и проекта.\nТест параметризован для проверки разных типов клиентов и контейнеров документов.\n\nПроверяется получение и наличие в ответе всех созданных документов с учетом\nожидаемого статуса запроса для каждой роли.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_docs_access_by_roles[space_docs-member]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'member_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f7f242576a0>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_project_and_space_docs_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить списки документов из пространства и проекта.\n        Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n    \n        Проверяется получение и наличие в ответе всех созданных документов с учетом\n        ожидаемого статуса запроса для каждой роли.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документам в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            space_id = request.getfixturevalue('main_space')\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к списку документов в {kind} для роли {role}')\n    \n        # Создаем документы с помощью фикстуры\n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n>       created_docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Space', kind_id = '6866309d85fb8d104544a61e'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761818618313,"stop":1761818618313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761818618313,"stop":1761818618921,"duration":608},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761818622457,"stop":1761818623066,"duration":609},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761818623066,"stop":1761818623350,"duration":284},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761818624656,"stop":1761818624956,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761818707818,"stop":1761818707818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить списки документов из пространства и проекта.\n    Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n\n    Проверяется получение и наличие в ответе всех созданных документов с учетом\n    ожидаемого статуса запроса для каждой роли.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_docs_access_by_roles[space_docs-member]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'member_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f7f242576a0>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_project_and_space_docs_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить списки документов из пространства и проекта.\n        Тест параметризован для проверки разных типов клиентов и контейнеров документов.\n    \n        Проверяется получение и наличие в ответе всех созданных документов с учетом\n        ожидаемого статуса запроса для каждой роли.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документам в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            space_id = request.getfixturevalue('main_space')\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к списку документов в {kind} для роли {role}')\n    \n        # Создаем документы с помощью фикстуры\n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n>       created_docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Space', kind_id = '6866309d85fb8d104544a61e'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документам в Space","time":{"start":1761818707818,"stop":1761818707818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Space разными ролями","time":{"start":1761818707818,"stop":1761818707991,"duration":173},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1761818707819,"stop":1761818707991,"duration":172},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761818707999,"stop":1761818707999,"duration":0},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761818707999,"stop":1761818707999,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_docs_list_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2546-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":44},"items":[{"uid":"320564b36ce7e71","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/320564b36ce7e71","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748577259,"stop":1761748577381,"duration":122}},{"uid":"31aaac1e4123bbd9","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/31aaac1e4123bbd9","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747845437,"stop":1761747845615,"duration":178}},{"uid":"257c6fc6f45ff411","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/257c6fc6f45ff411","status":"passed","time":{"start":1761746766845,"stop":1761746767899,"duration":1054}},{"uid":"7b5960666839875d","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/7b5960666839875d","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745693516,"stop":1761745693643,"duration":127}},{"uid":"4e3d59a581ea8bcb","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/4e3d59a581ea8bcb","status":"passed","time":{"start":1761576619709,"stop":1761576620626,"duration":917}},{"uid":"97688ffff107869b","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/97688ffff107869b","status":"passed","time":{"start":1761557274055,"stop":1761557274858,"duration":803}},{"uid":"5d88f5dc62623659","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/5d88f5dc62623659","status":"passed","time":{"start":1761308499173,"stop":1761308500022,"duration":849}},{"uid":"7c9b139032a8a29","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/7c9b139032a8a29","status":"passed","time":{"start":1761306651102,"stop":1761306652054,"duration":952}},{"uid":"bb37ac56567f6613","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/bb37ac56567f6613","status":"passed","time":{"start":1761136946979,"stop":1761136947882,"duration":903}},{"uid":"7c269170dcdec3ba","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/7c269170dcdec3ba","status":"passed","time":{"start":1761135614100,"stop":1761135615104,"duration":1004}},{"uid":"c45c74873ed15bbc","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/c45c74873ed15bbc","status":"passed","time":{"start":1761134057799,"stop":1761134058667,"duration":868}},{"uid":"96f66804a1ef87f4","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/96f66804a1ef87f4","status":"passed","time":{"start":1761128390761,"stop":1761128391868,"duration":1107}},{"uid":"deea9ec27f80455d","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/deea9ec27f80455d","status":"passed","time":{"start":1761124500771,"stop":1761124502196,"duration":1425}},{"uid":"d5926545d76ea1f","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/d5926545d76ea1f","status":"passed","time":{"start":1761119325566,"stop":1761119326593,"duration":1027}},{"uid":"fbf98a35b59dd257","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/fbf98a35b59dd257","status":"passed","time":{"start":1761053360607,"stop":1761053361935,"duration":1328}},{"uid":"f5761d497039a93c","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/f5761d497039a93c","status":"passed","time":{"start":1761047253930,"stop":1761047254784,"duration":854}},{"uid":"7925f8d41356ef65","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/7925f8d41356ef65","status":"passed","time":{"start":1760614671411,"stop":1760614672410,"duration":999}},{"uid":"e7ddbaeec2776559","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/e7ddbaeec2776559","status":"passed","time":{"start":1760599475787,"stop":1760599476804,"duration":1017}},{"uid":"c362db4c96e26436","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/c362db4c96e26436","status":"passed","time":{"start":1760535500601,"stop":1760535501491,"duration":890}},{"uid":"cc78185407d05c16","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/cc78185407d05c16","status":"passed","time":{"start":1760533978225,"stop":1760533979412,"duration":1187}}]},"tags":["backend"]},"source":"be5bfef687941b52.json","parameterValues":["'member_client'","'main_space'","200","'Space'"]}