{"uid":"274c7b7bae2180ea","name":"Архивирование Project-документа для роли owner","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_project_doc","historyId":"40ffb62620ea30d2684cda2caee27ab6","time":{"start":1752499333047,"stop":1752499334033,"duration":986},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n                    assert expected_status == 403\n                return\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n    \n        with allure.step(f'Архивация Project-документа в роли {role} (ожидается статус {expected_status})'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>           assert archive_resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:101: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752499197584,"stop":1752499198460,"duration":876},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752499198461,"stop":1752499199843,"duration":1382},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752499199845,"stop":1752499200441,"duration":596},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1752499200441,"stop":1752499202324,"duration":1883},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752499208358,"stop":1752499208933,"duration":575},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_archive_project_doc[owner]>>\nmain_project = '686672af85fb8d104544e798'\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'owner_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_project_doc(request, main_project, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Project Doc For archive Check'\n    \n        allure.dynamic.title(f'Архивирование Project-документа для роли {role}')\n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n    \n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент ({selected_client_name}) создаёт Project-документ для архивации (title: {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Project', kind_id=main_project, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки архивирования'\n                ):\n                    assert expected_status == 403\n                return\n    \n            doc_id = create_resp.json()['payload']['document']['_id']\n    \n        with allure.step(f'Архивация Project-документа в роли {role} (ожидается статус {expected_status})'):\n            archive_resp = api_client.post(**archive_document_endpoint(space_id=main_space, document_id=doc_id))\n>           assert archive_resp.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_archive_doc.py:101: AssertionError","steps":[{"name":"Случайный клиент (manager_client) создаёт Project-документ для архивации (title: 14.07_13:22:13 Project Doc For archive Check)","time":{"start":1752499333047,"stop":1752499333581,"duration":534},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Архивация Project-документа в роли owner (ожидается статус 200)","time":{"start":1752499333581,"stop":1752499334032,"duration":451},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 101, in test_archive_project_doc\n    assert archive_resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2610-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"44a87595c725e306","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/44a87595c725e306","status":"passed","time":{"start":1752498152425,"stop":1752498153097,"duration":672}},{"uid":"6412814c249b25e2","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/6412814c249b25e2","status":"passed","time":{"start":1752496483379,"stop":1752496484096,"duration":717}},{"uid":"69009c4904997883","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/69009c4904997883","status":"passed","time":{"start":1752481628010,"stop":1752481628601,"duration":591}},{"uid":"31a2e06ff81c469d","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/31a2e06ff81c469d","status":"passed","time":{"start":1752479657248,"stop":1752479657865,"duration":617}},{"uid":"608335d4ff0eb7b3","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/608335d4ff0eb7b3","status":"passed","time":{"start":1752477801883,"stop":1752477802428,"duration":545}},{"uid":"5b007884b3e6b978","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/5b007884b3e6b978","status":"passed","time":{"start":1752236683367,"stop":1752236683965,"duration":598}},{"uid":"535a5797adf693b8","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/535a5797adf693b8","status":"passed","time":{"start":1752236059132,"stop":1752236059733,"duration":601}},{"uid":"b418cf2fa80f76b6","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/b418cf2fa80f76b6","status":"passed","time":{"start":1752235249285,"stop":1752235251083,"duration":1798}},{"uid":"c9d8d928404cc117","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/c9d8d928404cc117","status":"passed","time":{"start":1752235238854,"stop":1752235239719,"duration":865}},{"uid":"620aa8da5f1951d2","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/620aa8da5f1951d2","status":"passed","time":{"start":1752234296719,"stop":1752234297674,"duration":955}},{"uid":"e5836e06c255231","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/e5836e06c255231","status":"passed","time":{"start":1752234287323,"stop":1752234287949,"duration":626}},{"uid":"33fbcb6fa53efaa3","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/33fbcb6fa53efaa3","status":"passed","time":{"start":1752233461601,"stop":1752233462329,"duration":728}},{"uid":"e0c0559da375b71a","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/e0c0559da375b71a","status":"passed","time":{"start":1752232543157,"stop":1752232543733,"duration":576}},{"uid":"9603c8237014193c","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/9603c8237014193c","status":"passed","time":{"start":1752232073936,"stop":1752232074807,"duration":871}},{"uid":"569876570c9fecfe","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/569876570c9fecfe","status":"passed","time":{"start":1752223487310,"stop":1752223487826,"duration":516}},{"uid":"aa004fd74ff737f7","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/aa004fd74ff737f7","status":"passed","time":{"start":1752218248072,"stop":1752218249358,"duration":1286}},{"uid":"657cab0623401fc1","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/657cab0623401fc1","status":"passed","time":{"start":1752151013939,"stop":1752151014549,"duration":610}},{"uid":"6e5b9ce3c7ad1609","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/6e5b9ce3c7ad1609","status":"passed","time":{"start":1752148891949,"stop":1752148892438,"duration":489}},{"uid":"15426d6debd6ece","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/15426d6debd6ece","status":"passed","time":{"start":1752138376003,"stop":1752138376590,"duration":587}},{"uid":"fd221cbbc2b19b86","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/fd221cbbc2b19b86","status":"passed","time":{"start":1752137251212,"stop":1752137252533,"duration":1321}}]},"tags":["backend"]},"source":"274c7b7bae2180ea.json","parameterValues":["'owner_client'","200"]}