{"uid":"44c30290ca0e6ec6","name":"Create task with minimal payload: клиент=owner_client, ожидаемый статус=200","fullName":"tests.test_backend.task_service.create_task.access_task.test_create_task#test_create_task_with_minimal_payload","historyId":"8c833d6503ed4264ab2c43c9cb971df5","time":{"start":1761833487385,"stop":1761833487566,"duration":181},"description":"\n    Тест проверки создания задачи с минимальным набором полей в системе управления проектами под разными ролями.\n\n    Цель теста — убедиться, что можно успешно создать задачу, указав только минимально необходимые данные, и что поведение API зависит от прав пользователя (типа клиента).\n    В процессе теста дополнительно валидируются структура созданной задачи, значения по умолчанию, связи (creator, board и пр.), а также удаление задачи после проверки.\n    assert_task_keys обеспечивает падение теста при добавлении/удалении ключей с понятным сообщением.\n\n    Ход теста:\n        1. Получение клиента согласно переданной роли через фикстуру.\n        2. Получение id пользователя, с помощью которого осуществляется создание задачи.\n        3. Формирование минимального payload и попытка создать задачу через API.\n        4. Проверка статус-кода ответа.\n        5. Если задача успешно создана (ответ 200):\n            - Проверка наполнения и структуры ответа\n    ","descriptionHtml":"<pre><code>Тест проверки создания задачи с минимальным набором полей в системе управления проектами под разными ролями.\n\nЦель теста — убедиться, что можно успешно создать задачу, указав только минимально необходимые данные, и что поведение API зависит от прав пользователя (типа клиента).\nВ процессе теста дополнительно валидируются структура созданной задачи, значения по умолчанию, связи (creator, board и пр.), а также удаление задачи после проверки.\nassert_task_keys обеспечивает падение теста при добавлении/удалении ключей с понятным сообщением.\n\nХод теста:\n    1. Получение клиента согласно переданной роли через фикстуру.\n    2. Получение id пользователя, с помощью которого осуществляется создание задачи.\n    3. Формирование минимального payload и попытка создать задачу через API.\n    4. Проверка статус-кода ответа.\n    5. Если задача успешно создана (ответ 200):\n        - Проверка наполнения и структуры ответа\n</code></pre>\n","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_minimal_payload[owner]>>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nclient_fixture = 'owner_client', expected_status = 200\nmain_project = '686672af85fb8d104544e798'\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания задачи разными пользовательскими ролями с минимальным набором полей.\"\n                  \" Проверка полного совпадения набора ключей задачи\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_task_with_minimal_payload(request, main_space, main_board, client_fixture, expected_status, main_project):\n        \"\"\"\n        Тест проверки создания задачи с минимальным набором полей в системе управления проектами под разными ролями.\n    \n        Цель теста — убедиться, что можно успешно создать задачу, указав только минимально необходимые данные, и что поведение API зависит от прав пользователя (типа клиента).\n        В процессе теста дополнительно валидируются структура созданной задачи, значения по умолчанию, связи (creator, board и пр.), а также удаление задачи после проверки.\n        assert_task_keys обеспечивает падение теста при добавлении/удалении ключей с понятным сообщением.\n    \n        Ход теста:\n            1. Получение клиента согласно переданной роли через фикстуру.\n            2. Получение id пользователя, с помощью которого осуществляется создание задачи.\n            3. Формирование минимального payload и попытка создать задачу через API.\n            4. Проверка статус-кода ответа.\n            5. Если задача успешно создана (ответ 200):\n                - Проверка наполнения и структуры ответа\n        \"\"\"\n        allure.dynamic.title(\n            f\"Create task with minimal payload: клиент={client_fixture}, ожидаемый статус={expected_status}\")\n    \n        client = get_client(request, client_fixture)\n>       member_id = get_member_profile(client, main_space)\n\ntests/test_backend/task_service/create_task/access_task/test_create_task.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/utils.py:35: in get_member_profile\n    resp.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761833315304,"stop":1761833315305,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761833315304,"stop":1761833315304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761833315305,"stop":1761833315305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761833315305,"stop":1761833315978,"duration":673},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761833315305,"stop":1761833315305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761833319617,"stop":1761833319920,"duration":303},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761833319920,"stop":1761833320230,"duration":310},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761833320230,"stop":1761833320472,"duration":242},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1761833324008,"stop":1761833324580,"duration":572},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"access_task"},{"name":"tag","value":"backend"},{"name":"suite","value":"test_create_task"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2570-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task_service.create_task.access_task.test_create_task"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":5,"skipped":0,"passed":9,"unknown":0,"total":14},"items":[{"uid":"a3fc783e6f4cf833","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/a3fc783e6f4cf833","status":"passed","time":{"start":1761821841114,"stop":1761821842027,"duration":913}},{"uid":"3c7617d2cd6f402a","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/3c7617d2cd6f402a","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761818775144,"stop":1761818775317,"duration":173}},{"uid":"ac88c608a385c5f4","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ac88c608a385c5f4","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761748637905,"stop":1761748638026,"duration":121}},{"uid":"a2e8ccde58fc1c42","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/a2e8ccde58fc1c42","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761747915461,"stop":1761747915646,"duration":185}},{"uid":"440ee0ba7138dddf","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/440ee0ba7138dddf","status":"passed","time":{"start":1761747057127,"stop":1761747058460,"duration":1333}},{"uid":"a9796bad7f7ac3c7","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/a9796bad7f7ac3c7","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761745745265,"stop":1761745745550,"duration":285}},{"uid":"34d3146ee726a347","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/34d3146ee726a347","status":"passed","time":{"start":1761576875581,"stop":1761576876678,"duration":1097}},{"uid":"e8c334e9c7f98f1c","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/e8c334e9c7f98f1c","status":"passed","time":{"start":1761557491616,"stop":1761557492557,"duration":941}},{"uid":"4447726e3522f436","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/4447726e3522f436","status":"passed","time":{"start":1761308711273,"stop":1761308712245,"duration":972}},{"uid":"ee114758c07c960","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/ee114758c07c960","status":"passed","time":{"start":1761306877326,"stop":1761306878254,"duration":928}},{"uid":"b783a0e48e1073f8","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/b783a0e48e1073f8","status":"passed","time":{"start":1761137178015,"stop":1761137179054,"duration":1039}},{"uid":"dff788d83d5d1059","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/dff788d83d5d1059","status":"passed","time":{"start":1761135878083,"stop":1761135879332,"duration":1249}},{"uid":"55ab151cc8dd8e4d","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/55ab151cc8dd8e4d","status":"passed","time":{"start":1761134283432,"stop":1761134284502,"duration":1070}}]},"tags":["backend"]},"source":"44c30290ca0e6ec6.json","parameterValues":["'owner_client'","200"]}