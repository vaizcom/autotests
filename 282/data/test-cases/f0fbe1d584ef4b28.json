{"uid":"f0fbe1d584ef4b28","name":"Просмотр соседей Space-документа для роли guest (без создания)","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_space_doc_siblings_view_only_access","historyId":"6c203b9928356c5f31cb09950367d181","time":{"start":1752233584973,"stop":1752233586973,"duration":2000},"status":"failed","statusMessage":"AssertionError: Некорректный левый сосед\nassert '6870f6714aff74363a1b416d' == '6870f6714aff74363a1b4154'\n  \n  - 6870f6714aff74363a1b4154\n  ?                       ^^\n  + 6870f6714aff74363a1b416d\n  ?                       ^^","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_view_only_access[guest]>>\nmain_space = '6866309d85fb8d104544a61e'\nmember_client = <tests.core.client.APIClient object at 0x7f68c2ef3f90>\nclient_fixture = 'guest_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_view_only_access(request, main_space, member_client, client_fixture, expected_status):\n        role = client_fixture.replace('_client', '')\n        api_client = request.getfixturevalue(client_fixture)\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Просмотр соседей Space-документа для роли {role} (без создания)')\n    \n        with allure.step('Создание документов (в рандомной роли) для теста просмотра siblings'):\n            random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n            doc_ids = []\n            for index in range(3):\n                title = f'{current_date}_member_create_Sibling Test Doc {index}'\n                create_resp = random_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                assert create_resp.status_code == 200\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n    \n        with allure.step(f'{role} пытается получить соседей для среднего документа'):\n            siblings_resp = api_client.post(\n                **get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space)\n            )\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка наличия левого и правого соседа'):\n                    assert 'prevSibling' in payload, 'Нет prevSibling в ответе'\n                    assert 'nextSibling' in payload, 'Нет nextSibling в ответе'\n>                   assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\nE                   AssertionError: Некорректный левый сосед\nE                   assert '6870f6714aff74363a1b416d' == '6870f6714aff74363a1b4154'\nE                     \nE                     - 6870f6714aff74363a1b4154\nE                     ?                       ^^\nE                     + 6870f6714aff74363a1b416d\nE                     ?                       ^^\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:111: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752233413114,"stop":1752233413114,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752233413114,"stop":1752233413114,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752233413114,"stop":1752233413114,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752233413114,"stop":1752233413114,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752233440681,"stop":1752233441014,"duration":333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752233441014,"stop":1752233441612,"duration":598},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752233443584,"stop":1752233444176,"duration":592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1752233445102,"stop":1752233445718,"duration":616},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Некорректный левый сосед\nassert '6870f6714aff74363a1b416d' == '6870f6714aff74363a1b4154'\n  \n  - 6870f6714aff74363a1b4154\n  ?                       ^^\n  + 6870f6714aff74363a1b416d\n  ?                       ^^","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_view_only_access[guest]>>\nmain_space = '6866309d85fb8d104544a61e'\nmember_client = <tests.core.client.APIClient object at 0x7f68c2ef3f90>\nclient_fixture = 'guest_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_view_only_access(request, main_space, member_client, client_fixture, expected_status):\n        role = client_fixture.replace('_client', '')\n        api_client = request.getfixturevalue(client_fixture)\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Просмотр соседей Space-документа для роли {role} (без создания)')\n    \n        with allure.step('Создание документов (в рандомной роли) для теста просмотра siblings'):\n            random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n            doc_ids = []\n            for index in range(3):\n                title = f'{current_date}_member_create_Sibling Test Doc {index}'\n                create_resp = random_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n                assert create_resp.status_code == 200\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n    \n        with allure.step(f'{role} пытается получить соседей для среднего документа'):\n            siblings_resp = api_client.post(\n                **get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space)\n            )\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка наличия левого и правого соседа'):\n                    assert 'prevSibling' in payload, 'Нет prevSibling в ответе'\n                    assert 'nextSibling' in payload, 'Нет nextSibling в ответе'\n>                   assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\nE                   AssertionError: Некорректный левый сосед\nE                   assert '6870f6714aff74363a1b416d' == '6870f6714aff74363a1b4154'\nE                     \nE                     - 6870f6714aff74363a1b4154\nE                     ?                       ^^\nE                     + 6870f6714aff74363a1b416d\nE                     ?                       ^^\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:111: AssertionError","steps":[{"name":"Создание документов (в рандомной роли) для теста просмотра siblings","time":{"start":1752233584973,"stop":1752233586677,"duration":1704},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest пытается получить соседей для среднего документа","time":{"start":1752233586677,"stop":1752233586973,"duration":296},"status":"failed","statusMessage":"AssertionError: Некорректный левый сосед\nassert '6870f6714aff74363a1b416d' == '6870f6714aff74363a1b4154'\n  \n  - 6870f6714aff74363a1b4154\n  ?                       ^^\n  + 6870f6714aff74363a1b416d\n  ?                       ^^\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 111, in test_get_space_doc_siblings_view_only_access\n    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n","steps":[{"name":"Проверка наличия левого и правого соседа","time":{"start":1752233586972,"stop":1752233586972,"duration":0},"status":"failed","statusMessage":"AssertionError: Некорректный левый сосед\nassert '6870f6714aff74363a1b416d' == '6870f6714aff74363a1b4154'\n  \n  - 6870f6714aff74363a1b4154\n  ?                       ^^\n  + 6870f6714aff74363a1b416d\n  ?                       ^^\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 111, in test_get_space_doc_siblings_view_only_access\n    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2541-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":29,"unknown":0,"total":30},"items":[{"uid":"182c471099321d7c","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/182c471099321d7c","status":"passed","time":{"start":1752232656662,"stop":1752232658560,"duration":1898}},{"uid":"d6bfbe935bb15ba9","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/d6bfbe935bb15ba9","status":"passed","time":{"start":1752232194690,"stop":1752232197345,"duration":2655}},{"uid":"d54dc013e119cbb3","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/d54dc013e119cbb3","status":"passed","time":{"start":1752223587757,"stop":1752223589356,"duration":1599}},{"uid":"af3afd0fd3b87ddf","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/af3afd0fd3b87ddf","status":"passed","time":{"start":1752218327731,"stop":1752218329409,"duration":1678}},{"uid":"5c834a06528aaba6","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/5c834a06528aaba6","status":"passed","time":{"start":1752151096260,"stop":1752151098642,"duration":2382}},{"uid":"49cc49bd821276a7","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/49cc49bd821276a7","status":"passed","time":{"start":1752148944098,"stop":1752148945744,"duration":1646}},{"uid":"6936a8cb0934707f","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/6936a8cb0934707f","status":"passed","time":{"start":1752138421119,"stop":1752138423221,"duration":2102}},{"uid":"6070c4ae4616a42f","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/6070c4ae4616a42f","status":"passed","time":{"start":1752137295546,"stop":1752137297372,"duration":1826}},{"uid":"19e9d08f1146212","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/19e9d08f1146212","status":"passed","time":{"start":1752133933517,"stop":1752133935557,"duration":2040}},{"uid":"c5705a11a5cd706b","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/c5705a11a5cd706b","status":"passed","time":{"start":1752066518280,"stop":1752066520130,"duration":1850}},{"uid":"140fb3d72da7d1a1","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/140fb3d72da7d1a1","status":"passed","time":{"start":1752065524974,"stop":1752065526837,"duration":1863}},{"uid":"8d0312b0a1c3af38","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/8d0312b0a1c3af38","status":"passed","time":{"start":1752064744001,"stop":1752064745998,"duration":1997}},{"uid":"9e20fa1cdcf5435a","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/9e20fa1cdcf5435a","status":"passed","time":{"start":1752062527039,"stop":1752062529079,"duration":2040}},{"uid":"e14a818e7b36f075","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/e14a818e7b36f075","status":"passed","time":{"start":1752060664555,"stop":1752060666433,"duration":1878}},{"uid":"e1287da0a7267f9e","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/e1287da0a7267f9e","status":"passed","time":{"start":1752059639745,"stop":1752059642151,"duration":2406}},{"uid":"7c29a29fa1b2ecd2","reportUrl":"https://vaizcom.github.io/autotests/265//#testresult/7c29a29fa1b2ecd2","status":"passed","time":{"start":1752050816405,"stop":1752050818350,"duration":1945}},{"uid":"c71f081ed02a52c5","reportUrl":"https://vaizcom.github.io/autotests/264//#testresult/c71f081ed02a52c5","status":"passed","time":{"start":1752049414477,"stop":1752049416479,"duration":2002}},{"uid":"55f6f3531c446880","reportUrl":"https://vaizcom.github.io/autotests/263//#testresult/55f6f3531c446880","status":"passed","time":{"start":1752047995779,"stop":1752047997823,"duration":2044}},{"uid":"90653d46385c760a","reportUrl":"https://vaizcom.github.io/autotests/262//#testresult/90653d46385c760a","status":"passed","time":{"start":1752046680809,"stop":1752046682852,"duration":2043}},{"uid":"fd24a63978dc7bc5","reportUrl":"https://vaizcom.github.io/autotests/261//#testresult/fd24a63978dc7bc5","status":"passed","time":{"start":1752044682689,"stop":1752044684822,"duration":2133}}]},"tags":["backend"]},"source":"f0fbe1d584ef4b28.json","parameterValues":["'guest_client'","200"]}