{"uid":"579b882a91afc62c","name":"Проверка доступа к personal документу для роли owner","fullName":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles#test_get_personal_doc_access_by_roles","historyId":"2642921c87fa5c5b5359ae69ca5e09c4","time":{"start":1761818704261,"stop":1761818704710,"duration":449},"description":"Проверяем что пользователи могут получить только свои personal документы","descriptionHtml":"<p>Проверяем что пользователи могут получить только свои personal документы</p>\n","status":"failed","statusMessage":"AssertionError: Ошибка при получении документа: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_doc_access_by_roles[owner]>>\nclient_fixture = 'owner_client', expected_status = 403\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f7f242b3d80>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 403),  # владелец не может получить чужой personal doc\n            ('manager_client', 403),  # менеджер не может получить чужой personal doc\n            ('member_client', 200),  # участник может получить свой personal doc\n            ('guest_client', 403),  # гость не может получить чужой personal doc\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_personal_doc_access_by_roles(\n        request, client_fixture, expected_status, main_space, main_personal, create_main_documents\n    ):\n        \"\"\"Проверяем что пользователи могут получить только свои personal документы\"\"\"\n        with allure.step('Подготовка тестовых данных'):\n            api_client = request.getfixturevalue(client_fixture)\n            role = client_fixture.replace('_client', '')\n            member_id = main_personal['member'][0]\n    \n        allure.dynamic.title(f'Проверка доступа к personal документу для роли {role}')\n    \n        # Создаем документ от имени member\n        creator_roles = {'member_client': 'member'}\n        docs = create_main_documents('Member', member_id, creator_roles)\n    \n        with allure.step(f'Проверка доступа к personal документу ролью {role}'):\n            get_resp = api_client.post(**get_document_endpoint(space_id=main_space, document_id=docs[0]['id']))\n    \n>           assert get_resp.status_code == expected_status, (\n                f'Ошибка при получении документа: ' f'ожидался статус {expected_status}, получили {get_resp.status_code}'\n            )\nE           AssertionError: Ошибка при получении документа: ожидался статус 403, получили 400\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:92: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761818618312,"stop":1761818618312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761818618313,"stop":1761818618313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761818618313,"stop":1761818618921,"duration":608},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761818622457,"stop":1761818623066,"duration":609},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761818623066,"stop":1761818623350,"duration":284},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761818624656,"stop":1761818624956,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761818633318,"stop":1761818633592,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761818704261,"stop":1761818704261,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Проверяем что пользователи могут получить только свои personal документы","status":"failed","statusMessage":"AssertionError: Ошибка при получении документа: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_doc_access_by_roles[owner]>>\nclient_fixture = 'owner_client', expected_status = 403\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7f7f242b3d80>\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 403),  # владелец не может получить чужой personal doc\n            ('manager_client', 403),  # менеджер не может получить чужой personal doc\n            ('member_client', 200),  # участник может получить свой personal doc\n            ('guest_client', 403),  # гость не может получить чужой personal doc\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_personal_doc_access_by_roles(\n        request, client_fixture, expected_status, main_space, main_personal, create_main_documents\n    ):\n        \"\"\"Проверяем что пользователи могут получить только свои personal документы\"\"\"\n        with allure.step('Подготовка тестовых данных'):\n            api_client = request.getfixturevalue(client_fixture)\n            role = client_fixture.replace('_client', '')\n            member_id = main_personal['member'][0]\n    \n        allure.dynamic.title(f'Проверка доступа к personal документу для роли {role}')\n    \n        # Создаем документ от имени member\n        creator_roles = {'member_client': 'member'}\n        docs = create_main_documents('Member', member_id, creator_roles)\n    \n        with allure.step(f'Проверка доступа к personal документу ролью {role}'):\n            get_resp = api_client.post(**get_document_endpoint(space_id=main_space, document_id=docs[0]['id']))\n    \n>           assert get_resp.status_code == expected_status, (\n                f'Ошибка при получении документа: ' f'ожидался статус {expected_status}, получили {get_resp.status_code}'\n            )\nE           AssertionError: Ошибка при получении документа: ожидался статус 403, получили 400\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:92: AssertionError","steps":[{"name":"Подготовка тестовых данных","time":{"start":1761818704261,"stop":1761818704261,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Member разными ролями","time":{"start":1761818704261,"stop":1761818704538,"duration":277},"status":"passed","steps":[{"name":"Создание документа пользователем member","time":{"start":1761818704261,"stop":1761818704538,"duration":277},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Проверка доступа к personal документу ролью owner","time":{"start":1761818704538,"stop":1761818704710,"duration":172},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_doc_access_by_roles.py\", line 92, in test_get_personal_doc_access_by_roles\n    assert get_resp.status_code == expected_status, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761818704713,"stop":1761818704979,"duration":266},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761818704713,"stop":1761818704979,"duration":266},"status":"passed","steps":[{"name":"Удаление документа \"Member doc by member 2025.10.30_10:05:04\" (создан member)","time":{"start":1761818704714,"stop":1761818704979,"duration":265},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2546-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":44},"items":[{"uid":"efee9eb0ce89ec9c","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/efee9eb0ce89ec9c","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748573472,"stop":1761748573874,"duration":402}},{"uid":"85372e95840a2bcd","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/85372e95840a2bcd","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747841882,"stop":1761747842364,"duration":482}},{"uid":"2b1af578f61812a3","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2b1af578f61812a3","status":"passed","time":{"start":1761746759859,"stop":1761746760454,"duration":595}},{"uid":"3838a052f1964e57","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/3838a052f1964e57","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа: ожидался статус 403, получили 400\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745690933,"stop":1761745691265,"duration":332}},{"uid":"5595701a41ab174c","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/5595701a41ab174c","status":"passed","time":{"start":1761576613267,"stop":1761576613751,"duration":484}},{"uid":"f4316a41b92241db","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/f4316a41b92241db","status":"passed","time":{"start":1761557268382,"stop":1761557268821,"duration":439}},{"uid":"71697e654a513823","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/71697e654a513823","status":"passed","time":{"start":1761308493658,"stop":1761308494102,"duration":444}},{"uid":"2f79b905a4da679c","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/2f79b905a4da679c","status":"passed","time":{"start":1761306644940,"stop":1761306645493,"duration":553}},{"uid":"248cb8cefaab8060","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/248cb8cefaab8060","status":"passed","time":{"start":1761136941182,"stop":1761136941621,"duration":439}},{"uid":"a2543396fe72d7ce","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/a2543396fe72d7ce","status":"passed","time":{"start":1761135607389,"stop":1761135607908,"duration":519}},{"uid":"b5e4f0eb24cfcfce","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/b5e4f0eb24cfcfce","status":"passed","time":{"start":1761134052080,"stop":1761134052509,"duration":429}},{"uid":"d1a08618dc0dd589","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/d1a08618dc0dd589","status":"passed","time":{"start":1761128382657,"stop":1761128383192,"duration":535}},{"uid":"fb56503370448b52","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/fb56503370448b52","status":"passed","time":{"start":1761124493195,"stop":1761124493722,"duration":527}},{"uid":"55b9f5761ff41909","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/55b9f5761ff41909","status":"passed","time":{"start":1761119319087,"stop":1761119319547,"duration":460}},{"uid":"6b83b817b9330008","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/6b83b817b9330008","status":"passed","time":{"start":1761053355093,"stop":1761053355518,"duration":425}},{"uid":"b80aefbec8685f57","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/b80aefbec8685f57","status":"passed","time":{"start":1761047247228,"stop":1761047247670,"duration":442}},{"uid":"75c1161a56218130","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/75c1161a56218130","status":"passed","time":{"start":1760614664542,"stop":1760614665039,"duration":497}},{"uid":"340663f47cfae190","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/340663f47cfae190","status":"passed","time":{"start":1760599465079,"stop":1760599466014,"duration":935}},{"uid":"ee62b56ff08e0185","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/ee62b56ff08e0185","status":"passed","time":{"start":1760535493617,"stop":1760535494114,"duration":497}},{"uid":"fe2b946529f812d3","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/fe2b946529f812d3","status":"passed","time":{"start":1760533969626,"stop":1760533970193,"duration":567}}]},"tags":["backend"]},"source":"579b882a91afc62c.json","parameterValues":["'owner_client'","403"]}