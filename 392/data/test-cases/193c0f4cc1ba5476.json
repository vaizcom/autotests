{"uid":"193c0f4cc1ba5476","name":"Дублирование Space-документа: создание owner, дублирование member","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_project_and_space_docs_different_roles","historyId":"d6d948ffcf70ffce1ee19dd8e3a7fe66","time":{"start":1761745655898,"stop":1761745656020,"duration":122},"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","descriptionHtml":"<pre><code>Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\nсозданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-owner_to_member]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\nduplicator_fixture = 'member_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:91: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761745634098,"stop":1761745634516,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-owner_to_member]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\nduplicator_fixture = 'member_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:91: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью owner","time":{"start":1761745655898,"stop":1761745656020,"duration":122},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 91, in test_duplicate_project_and_space_docs_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"duplicator_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"99e26c950a33bca7","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/99e26c950a33bca7","status":"passed","time":{"start":1761576533141,"stop":1761576534071,"duration":930}},{"uid":"82f81e4d4b9f3a62","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/82f81e4d4b9f3a62","status":"passed","time":{"start":1761557189931,"stop":1761557190972,"duration":1041}},{"uid":"2b9e8e9ec650f9f9","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/2b9e8e9ec650f9f9","status":"passed","time":{"start":1761308415724,"stop":1761308416684,"duration":960}},{"uid":"36fcd881606e9807","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/36fcd881606e9807","status":"passed","time":{"start":1761306562473,"stop":1761306563419,"duration":946}},{"uid":"ba246c6a63992d1c","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/ba246c6a63992d1c","status":"passed","time":{"start":1761136857755,"stop":1761136858725,"duration":970}},{"uid":"d6c05ea8b78c8218","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/d6c05ea8b78c8218","status":"passed","time":{"start":1761135515105,"stop":1761135516180,"duration":1075}},{"uid":"2a1042f2b99c8b53","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/2a1042f2b99c8b53","status":"passed","time":{"start":1761133973352,"stop":1761133974299,"duration":947}},{"uid":"7119b22e136b7405","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/7119b22e136b7405","status":"passed","time":{"start":1761128282629,"stop":1761128283838,"duration":1209}},{"uid":"869234c9c11d103","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/869234c9c11d103","status":"passed","time":{"start":1761124389188,"stop":1761124390377,"duration":1189}},{"uid":"b54d2dbdeee3df85","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/b54d2dbdeee3df85","status":"passed","time":{"start":1761119233560,"stop":1761119234510,"duration":950}},{"uid":"bb147b159ea954b4","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/bb147b159ea954b4","status":"passed","time":{"start":1761053273780,"stop":1761053274879,"duration":1099}},{"uid":"a33e2faa8f164de0","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/a33e2faa8f164de0","status":"passed","time":{"start":1761047163268,"stop":1761047165042,"duration":1774}},{"uid":"5e295facbbd02afb","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/5e295facbbd02afb","status":"passed","time":{"start":1760614572237,"stop":1760614573311,"duration":1074}},{"uid":"9b6a3a9cc3410bea","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/9b6a3a9cc3410bea","status":"passed","time":{"start":1760599373016,"stop":1760599374043,"duration":1027}},{"uid":"265ad781e50c9de5","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/265ad781e50c9de5","status":"passed","time":{"start":1760535408990,"stop":1760535409926,"duration":936}},{"uid":"52a27eaffe8a881","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/52a27eaffe8a881","status":"passed","time":{"start":1760533861791,"stop":1760533863094,"duration":1303}},{"uid":"fb8fe66f5ef62a85","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/fb8fe66f5ef62a85","status":"passed","time":{"start":1760532445097,"stop":1760532446035,"duration":938}},{"uid":"22db789aae716f3a","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/22db789aae716f3a","status":"passed","time":{"start":1760529265027,"stop":1760529265926,"duration":899}},{"uid":"e5314b9519ae18ac","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/e5314b9519ae18ac","status":"passed","time":{"start":1760510637195,"stop":1760510638295,"duration":1100}},{"uid":"2bbbbc0c0ea44d2b","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/2bbbbc0c0ea44d2b","status":"passed","time":{"start":1760449161268,"stop":1760449162210,"duration":942}}]},"tags":["backend"]},"source":"193c0f4cc1ba5476.json","parameterValues":["'owner_client'","'main_space'","'Space'","'member_client'","200"]}