{"uid":"9ff24b391279a7ca","name":"Дублирование Space-документа: создание owner, дублирование owner","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_project_and_space_docs_different_roles","historyId":"33fc74872bb0f2844b7f3f0095499937","time":{"start":1752218282836,"stop":1752218283245,"duration":409},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-owner_self_duplicate]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\nduplicator_fixture = 'owner_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:87: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1752218218540,"stop":1752218218540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752218218540,"stop":1752218218540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752218218540,"stop":1752218218540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752218218540,"stop":1752218218540,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752218218540,"stop":1752218219081,"duration":541},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752218242663,"stop":1752218243184,"duration":521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752218243184,"stop":1752218243599,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[space_doc-owner_self_duplicate]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\nduplicator_fixture = 'owner_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:87: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью owner","time":{"start":1752218282836,"stop":1752218283245,"duration":409},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 87, in test_duplicate_project_and_space_docs_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"fv-az816-346"},{"name":"thread","value":"2486-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"duplicator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"4722429f6b9fa378","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/4722429f6b9fa378","status":"passed","time":{"start":1752151046842,"stop":1752151048340,"duration":1498}}]},"tags":["backend"]},"source":"9ff24b391279a7ca.json","parameterValues":["'owner_client'","'main_space'","'Space'","'owner_client'","200"]}