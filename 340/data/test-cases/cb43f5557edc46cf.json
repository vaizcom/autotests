{"uid":"cb43f5557edc46cf","name":"Проверка ограничений длины поля name при создании токена","fullName":"tests.test_backend.personal_access_tokens.test_create_personal_access_token#test_token_name_length_limit","historyId":"4bd1ae5c09dba904d535828b2035c1b5","time":{"start":1759744092717,"stop":1759744092920,"duration":203},"status":"failed","statusMessage":"AssertionError: status code: 404, text: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 400\n +  where 404 = <Response [404]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2109fa9790>\nmain_space = '6866309d85fb8d104544a61e'\ntoken_name = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nexpected_status = 400\n\n    @allure.title(\"Проверка ограничений длины поля name при создании токена\")\n    @pytest.mark.parametrize(\n        \"token_name, expected_status\",\n        [\n            (\"x\" * 100, 200),\n            (\"x\" * 101, 400),\n        ],\n        ids=[\"ровно 100 символов\", \"101 символ (слишком длинное имя)\"]\n    )\n    def test_token_name_length_limit(owner_client, main_space, token_name, expected_status):\n        with allure.step(f\"Пробуем создать токен с длиной name = {len(token_name)}\"):\n            response = create_token(owner_client.token, main_space, token_name)\n>           assert response.status_code == expected_status, f\"status code: {response.status_code}, text: {response.text}\"\nE           AssertionError: status code: 404, text: <!DOCTYPE html>\nE             <html lang=\"en\">\nE             <head>\nE             <meta charset=\"utf-8\">\nE             <title>Error</title>\nE             </head>\nE             <body>\nE             <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\nE             </body>\nE             </html>\nE             \nE           assert 404 == 400\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_backend/personal_access_tokens/test_create_personal_access_token.py:105: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759743678061,"stop":1759743678696,"duration":635},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759743678696,"stop":1759743679363,"duration":667},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759743680109,"stop":1759743680673,"duration":564},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: status code: 404, text: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 400\n +  where 404 = <Response [404]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2109fa9790>\nmain_space = '6866309d85fb8d104544a61e'\ntoken_name = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nexpected_status = 400\n\n    @allure.title(\"Проверка ограничений длины поля name при создании токена\")\n    @pytest.mark.parametrize(\n        \"token_name, expected_status\",\n        [\n            (\"x\" * 100, 200),\n            (\"x\" * 101, 400),\n        ],\n        ids=[\"ровно 100 символов\", \"101 символ (слишком длинное имя)\"]\n    )\n    def test_token_name_length_limit(owner_client, main_space, token_name, expected_status):\n        with allure.step(f\"Пробуем создать токен с длиной name = {len(token_name)}\"):\n            response = create_token(owner_client.token, main_space, token_name)\n>           assert response.status_code == expected_status, f\"status code: {response.status_code}, text: {response.text}\"\nE           AssertionError: status code: 404, text: <!DOCTYPE html>\nE             <html lang=\"en\">\nE             <head>\nE             <meta charset=\"utf-8\">\nE             <title>Error</title>\nE             </head>\nE             <body>\nE             <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\nE             </body>\nE             </html>\nE             \nE           assert 404 == 400\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_backend/personal_access_tokens/test_create_personal_access_token.py:105: AssertionError","steps":[{"name":"Пробуем создать токен с длиной name = 101","time":{"start":1759744092717,"stop":1759744092920,"duration":203},"status":"failed","statusMessage":"AssertionError: status code: 404, text: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 400\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/personal_access_tokens/test_create_personal_access_token.py\", line 105, in test_token_name_length_limit\n    assert response.status_code == expected_status, f\"status code: {response.status_code}, text: {response.text}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.personal_access_tokens"},{"name":"suite","value":"test_create_personal_access_token"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2543-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.personal_access_tokens.test_create_personal_access_token"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"400"},{"name":"token_name","value":"'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["backend"]},"source":"cb43f5557edc46cf.json","parameterValues":["400","'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'"]}