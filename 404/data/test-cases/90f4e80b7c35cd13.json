{"uid":"90f4e80b7c35cd13","name":"test_get_siblings_foreign_space_access_denied[member_doc]","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_siblings_foreign_space_access_denied","historyId":"2dc0c031326b543367c7e2c2e7a9be5c","time":{"start":1761912185611,"stop":1761912185611,"duration":0},"description":"\n    Проверяет ограничения доступа при попытке получения siblings документов через чужое пространство.\n    Тест удостоверяется, что попытка получить siblings документов через пространство, где у пользователя\n    нет прав, завершается ошибкой доступа.\n\n    Тест обрабатывает три типа документов: Project, Space и Member. Создается последовательность\n    из трех документов указанного типа в основном пространстве, после чего выполняется попытка\n    получить siblings среднего документа через чужое пространство и проверяется, что доступ запрещен.\n    ","descriptionHtml":"<pre><code>Проверяет ограничения доступа при попытке получения siblings документов через чужое пространство.\nТест удостоверяется, что попытка получить siblings документов через пространство, где у пользователя\nнет прав, завершается ошибкой доступа.\n\nТест обрабатывает три типа документов: Project, Space и Member. Создается последовательность\nиз трех документов указанного типа в основном пространстве, после чего выполняется попытка\nполучить siblings среднего документа через чужое пространство и проверяется, что доступ запрещен.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f53e9d25490>\n\n    @pytest.fixture(scope='module')\n    def space_id_module(owner_client):\n        client = owner_client\n        name = generate_space_name()\n        response = client.post(**create_space_endpoint(name=name))\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:192: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761912073100,"stop":1761912073571,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761912076138,"stop":1761912076602,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761912076602,"stop":1761912076805,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"space_id_module","time":{"start":1761912185464,"stop":1761912185597,"duration":133},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 192, in space_id_module\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2535-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"container_fixture","value":"'main_personal'"},{"name":"kind","value":"'Member'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":54},"items":[{"uid":"b826245e7f24851e","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/b826245e7f24851e","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911297316,"stop":1761911297316,"duration":0}},{"uid":"54f44b13b50cb003","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/54f44b13b50cb003","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910910149,"stop":1761910910149,"duration":0}},{"uid":"af8d2c5861b2796a","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/af8d2c5861b2796a","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910610487,"stop":1761910610487,"duration":0}},{"uid":"94ba33f0490de064","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/94ba33f0490de064","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910002249,"stop":1761910002249,"duration":0}},{"uid":"94a486bd0b3e2b7b","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/94a486bd0b3e2b7b","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761900033822,"stop":1761900033822,"duration":0}},{"uid":"fa2a44d09774fb02","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/fa2a44d09774fb02","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835055271,"stop":1761835055271,"duration":0}},{"uid":"20c2a4958a1055aa","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/20c2a4958a1055aa","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834638818,"stop":1761834638818,"duration":0}},{"uid":"da02db967eeaff41","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/da02db967eeaff41","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833475024,"stop":1761833475024,"duration":0}},{"uid":"4b31587d1c2949cb","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/4b31587d1c2949cb","status":"passed","time":{"start":1761821700309,"stop":1761821701937,"duration":1628}},{"uid":"714bcee78e86eb68","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/714bcee78e86eb68","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818763397,"stop":1761818763397,"duration":0}},{"uid":"69d892cf182142ab","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/69d892cf182142ab","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748626725,"stop":1761748626725,"duration":0}},{"uid":"751dc3a2f250ed16","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/751dc3a2f250ed16","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747902823,"stop":1761747902823,"duration":0}},{"uid":"3948de0e0546a2e4","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/3948de0e0546a2e4","status":"passed","time":{"start":1761746865362,"stop":1761746867620,"duration":2258}},{"uid":"7ea382243551538f","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/7ea382243551538f","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745735696,"stop":1761745735696,"duration":0}},{"uid":"2c80954ab947c66f","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2c80954ab947c66f","status":"passed","time":{"start":1761576705881,"stop":1761576707829,"duration":1948}},{"uid":"a41a0545bfc4f76f","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/a41a0545bfc4f76f","status":"passed","time":{"start":1761557357575,"stop":1761557359141,"duration":1566}},{"uid":"d14ac348709fb5fc","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/d14ac348709fb5fc","status":"passed","time":{"start":1761308581328,"stop":1761308583065,"duration":1737}},{"uid":"8c5d976166355bca","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/8c5d976166355bca","status":"passed","time":{"start":1761306742809,"stop":1761306744696,"duration":1887}},{"uid":"e916f65da7af6657","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/e916f65da7af6657","status":"passed","time":{"start":1761137035731,"stop":1761137037884,"duration":2153}},{"uid":"2fe03728c52b15f1","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/2fe03728c52b15f1","status":"passed","time":{"start":1761135712413,"stop":1761135714366,"duration":1953}}]},"tags":["backend"]},"source":"90f4e80b7c35cd13.json","parameterValues":["'main_personal'","'Member'"]}