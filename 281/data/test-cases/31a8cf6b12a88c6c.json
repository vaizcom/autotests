{"uid":"31a8cf6b12a88c6c","name":"Получение списка Space-документов для роли guest","fullName":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles#test_get_space_docs_list_access_by_roles","historyId":"ab512071901f2adc545f13c540ff5b2c","time":{"start":1752233584565,"stop":1752233584911,"duration":346},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_get_space_docs_list_access_by_roles[guest]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'guest_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_docs_list_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date}_{role}_Space Doc For List Check'\n    \n        allure.dynamic.title(f'Получение списка Space-документов для роли {role}')\n        random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n    \n        with allure.step(f'random_client({random_client}) создаёт Space-документ для проверки списка {title}'):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:44: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752233425437,"stop":1752233425437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752233425437,"stop":1752233425437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752233425437,"stop":1752233425437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752233425437,"stop":1752233425437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752233453690,"stop":1752233454330,"duration":640},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752233454330,"stop":1752233454960,"duration":630},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752233456607,"stop":1752233457249,"duration":642},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1752233458905,"stop":1752233459558,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_get_space_docs_list_access_by_roles[guest]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'guest_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_docs_list_access_by_roles(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date}_{role}_Space Doc For List Check'\n    \n        allure.dynamic.title(f'Получение списка Space-документов для роли {role}')\n        random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n    \n        with allure.step(f'random_client({random_client}) создаёт Space-документ для проверки списка {title}'):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:44: AssertionError","steps":[{"name":"random_client(<tests.core.client.APIClient object at 0x7ff7818de3d0>) создаёт Space-документ для проверки списка 11.07_11:33:04_guest_Space Doc For List Check","time":{"start":1752233584566,"stop":1752233584910,"duration":344},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py\", line 44, in test_get_space_docs_list_access_by_roles\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки списка","time":{"start":1752233584910,"stop":1752233584910,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py\", line 44, in test_get_space_docs_list_access_by_roles\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_docs_list_access_by_roles"},{"name":"host","value":"pkrvmfkh1xnbeme"},{"name":"thread","value":"2570-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":28,"unknown":0,"total":29},"items":[{"uid":"66df716f264fa32b","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/66df716f264fa32b","status":"passed","time":{"start":1752232643366,"stop":1752232644188,"duration":822}},{"uid":"98754f6206da3e","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/98754f6206da3e","status":"passed","time":{"start":1752232181230,"stop":1752232182097,"duration":867}},{"uid":"4ad61362d889fb3e","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/4ad61362d889fb3e","status":"passed","time":{"start":1752223576836,"stop":1752223577519,"duration":683}},{"uid":"aec9deccb6b5790a","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/aec9deccb6b5790a","status":"passed","time":{"start":1752218315765,"stop":1752218316679,"duration":914}},{"uid":"b8aa8548708375e3","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/b8aa8548708375e3","status":"passed","time":{"start":1752151082514,"stop":1752151083409,"duration":895}},{"uid":"54041dfc3a9bf4bc","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/54041dfc3a9bf4bc","status":"passed","time":{"start":1752148933098,"stop":1752148933814,"duration":716}},{"uid":"6f626ad247b5540a","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/6f626ad247b5540a","status":"passed","time":{"start":1752138408052,"stop":1752138408942,"duration":890}},{"uid":"a900ad357c4421b1","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/a900ad357c4421b1","status":"passed","time":{"start":1752137282740,"stop":1752137283686,"duration":946}},{"uid":"e0d8d243abdf13ff","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/e0d8d243abdf13ff","status":"passed","time":{"start":1752133919684,"stop":1752133920550,"duration":866}},{"uid":"b27d6485d36260b","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/b27d6485d36260b","status":"passed","time":{"start":1752066506696,"stop":1752066507459,"duration":763}},{"uid":"7c4d4e960174b538","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/7c4d4e960174b538","status":"passed","time":{"start":1752065512313,"stop":1752065513019,"duration":706}},{"uid":"baf5d3e2618853d4","reportUrl":"https://vaizcom.github.io/autotests/269//#testresult/baf5d3e2618853d4","status":"passed","time":{"start":1752064729745,"stop":1752064730919,"duration":1174}},{"uid":"8a93d22376857702","reportUrl":"https://vaizcom.github.io/autotests/268//#testresult/8a93d22376857702","status":"passed","time":{"start":1752062513701,"stop":1752062514556,"duration":855}},{"uid":"ec842f4604a1640d","reportUrl":"https://vaizcom.github.io/autotests/267//#testresult/ec842f4604a1640d","status":"passed","time":{"start":1752060651361,"stop":1752060652141,"duration":780}},{"uid":"fe0e2ef3c8b8ab68","reportUrl":"https://vaizcom.github.io/autotests/266//#testresult/fe0e2ef3c8b8ab68","status":"passed","time":{"start":1752059625344,"stop":1752059626543,"duration":1199}},{"uid":"ca9955a2890e167e","reportUrl":"https://vaizcom.github.io/autotests/265//#testresult/ca9955a2890e167e","status":"passed","time":{"start":1752050804146,"stop":1752050804875,"duration":729}},{"uid":"f03f3b1a2407485f","reportUrl":"https://vaizcom.github.io/autotests/264//#testresult/f03f3b1a2407485f","status":"passed","time":{"start":1752049400863,"stop":1752049401697,"duration":834}},{"uid":"2b4b1fd401364d6","reportUrl":"https://vaizcom.github.io/autotests/263//#testresult/2b4b1fd401364d6","status":"passed","time":{"start":1752047981085,"stop":1752047982257,"duration":1172}},{"uid":"4c020b8866a3c353","reportUrl":"https://vaizcom.github.io/autotests/262//#testresult/4c020b8866a3c353","status":"passed","time":{"start":1752046668025,"stop":1752046668971,"duration":946}},{"uid":"683e132230e87c76","reportUrl":"https://vaizcom.github.io/autotests/261//#testresult/683e132230e87c76","status":"passed","time":{"start":1752044668351,"stop":1752044669203,"duration":852}}]},"tags":["backend"]},"source":"31a8cf6b12a88c6c.json","parameterValues":["'guest_client'","200"]}