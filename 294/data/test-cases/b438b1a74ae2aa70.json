{"uid":"b438b1a74ae2aa70","name":"Проверка доступа к списку документов в Space для роли member","fullName":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles#test_get_project_and_space_docs_access_by_roles","historyId":"c16449655af3db12909332a3d67cc526","time":{"start":1752499355643,"stop":1752499356123,"duration":480},"description":"Проверяем что разные роли могут получить список документов из пространства и проекта","descriptionHtml":"<p>Проверяем что разные роли могут получить список документов из пространства и проекта</p>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_docs_access_by_roles[space_docs-member]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'member_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_project_and_space_docs_access_by_roles(request, kind, container_fixture, client_fixture, expected_status):\n        \"\"\"Проверяем что разные роли могут получить список документов из пространства и проекта\"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документам в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            space_id = request.getfixturevalue('main_space')\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к списку документов в {kind} для роли {role}')\n        created_docs = []\n    \n        try:\n            with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n                creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n                # Создаем по документу каждой ролью\n                for creator_fixture, creator_role in creator_roles.items():\n                    creator_client = request.getfixturevalue(creator_fixture)\n    \n                    with allure.step(f'Создание документа пользователем {creator_role}'):\n                        title = f'{kind} doc by {creator_role}'\n                        create_resp = creator_client.post(\n                            **create_document_endpoint(kind=kind, kind_id=container_id, space_id=space_id, title=title)\n                        )\n>                       assert create_resp.status_code == 200, (\n                            f'Ошибка при создании документа пользователем {creator_role}: '\n                            f'статус {create_resp.status_code}'\n                        )\nE                       AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                       assert 400 == 200\nE                        +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:55: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752499197583,"stop":1752499197583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752499197584,"stop":1752499198433,"duration":849},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752499345185,"stop":1752499345513,"duration":328},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752499345513,"stop":1752499346793,"duration":1280},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752499350140,"stop":1752499351030,"duration":890},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Проверяем что разные роли могут получить список документов из пространства и проекта","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_docs_access_by_roles[space_docs-member]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'member_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_docs', 'project_docs'],\n    )\n    def test_get_project_and_space_docs_access_by_roles(request, kind, container_fixture, client_fixture, expected_status):\n        \"\"\"Проверяем что разные роли могут получить список документов из пространства и проекта\"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документам в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            space_id = request.getfixturevalue('main_space')\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к списку документов в {kind} для роли {role}')\n        created_docs = []\n    \n        try:\n            with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n                creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n                # Создаем по документу каждой ролью\n                for creator_fixture, creator_role in creator_roles.items():\n                    creator_client = request.getfixturevalue(creator_fixture)\n    \n                    with allure.step(f'Создание документа пользователем {creator_role}'):\n                        title = f'{kind} doc by {creator_role}'\n                        create_resp = creator_client.post(\n                            **create_document_endpoint(kind=kind, kind_id=container_id, space_id=space_id, title=title)\n                        )\n>                       assert create_resp.status_code == 200, (\n                            f'Ошибка при создании документа пользователем {creator_role}: '\n                            f'статус {create_resp.status_code}'\n                        )\nE                       AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                       assert 400 == 200\nE                        +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py:55: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документам в Space","time":{"start":1752499355644,"stop":1752499355644,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Space разными ролями","time":{"start":1752499355644,"stop":1752499356122,"duration":478},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py\", line 55, in test_get_project_and_space_docs_access_by_roles\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1752499355644,"stop":1752499356122,"duration":478},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_docs_list_access_by_roles.py\", line 55, in test_get_project_and_space_docs_access_by_roles\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Очистка тестовых данных","time":{"start":1752499356122,"stop":1752499356122,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_docs_list_access_by_roles"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2616-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_docs_list_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"689c06a072a6ada9","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/689c06a072a6ada9","status":"passed","time":{"start":1752498267760,"stop":1752498269501,"duration":1741}},{"uid":"33f26af585622fbd","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/33f26af585622fbd","status":"passed","time":{"start":1752496617450,"stop":1752496619682,"duration":2232}}]},"tags":["backend"]},"source":"b438b1a74ae2aa70.json","parameterValues":["'member_client'","'main_space'","200","'Space'"]}