{"uid":"d12cb80c630b090c","name":"Архивирование Space-документа для роли manager","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_space_doc","historyId":"5e7c8af1758830173e4e2d42e4b077e5","time":{"start":1752501031412,"stop":1752501031972,"duration":560},"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[manager]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:47: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752500916492,"stop":1752500916492,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500916493,"stop":1752500917294,"duration":801},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500916493,"stop":1752500916493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500917294,"stop":1752500918389,"duration":1095},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752500918390,"stop":1752500918918,"duration":528},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752500924480,"stop":1752500924955,"duration":475},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[manager]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'manager_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:47: AssertionError","steps":[{"name":"Случайный клиент(owner_client) создаёт Space-документ для архивации (title = 14.07_13:50:31 Space Doc For Archive Check)","time":{"start":1752501031412,"stop":1752501031971,"duration":559},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 47, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки списка","time":{"start":1752501031971,"stop":1752501031971,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 47, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"d60b4c01214e431e","reportUrl":"https://vaizcom.github.io/autotests/295//#testresult/d60b4c01214e431e","status":"failed","statusDetails":"AssertionError: assert 200 == 403","time":{"start":1752500642531,"stop":1752500643331,"duration":800}},{"uid":"645618ab542796dd","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/645618ab542796dd","status":"passed","time":{"start":1752499326547,"stop":1752499328079,"duration":1532}},{"uid":"f4e3e95e4268a1ea","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/f4e3e95e4268a1ea","status":"passed","time":{"start":1752498148805,"stop":1752498149358,"duration":553}},{"uid":"2953af9bb7989aab","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/2953af9bb7989aab","status":"passed","time":{"start":1752496478951,"stop":1752496480571,"duration":1620}},{"uid":"7436d5d1a359c8da","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/7436d5d1a359c8da","status":"passed","time":{"start":1752481624079,"stop":1752481625256,"duration":1177}},{"uid":"59bcfe9441464690","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/59bcfe9441464690","status":"passed","time":{"start":1752479652094,"stop":1752479653580,"duration":1486}},{"uid":"172e44d5df33f3d5","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/172e44d5df33f3d5","status":"passed","time":{"start":1752477798634,"stop":1752477799180,"duration":546}},{"uid":"f46f7e1431ddfedc","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/f46f7e1431ddfedc","status":"passed","time":{"start":1752236677232,"stop":1752236678821,"duration":1589}},{"uid":"4bc219a3eaee3f59","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/4bc219a3eaee3f59","status":"passed","time":{"start":1752236055096,"stop":1752236055656,"duration":560}},{"uid":"ef635b1b9f487582","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/ef635b1b9f487582","status":"passed","time":{"start":1752235244282,"stop":1752235246151,"duration":1869}},{"uid":"89e5a3f8c294f13c","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/89e5a3f8c294f13c","status":"passed","time":{"start":1752235234533,"stop":1752235235345,"duration":812}},{"uid":"c6c9298d0532c6ab","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/c6c9298d0532c6ab","status":"passed","time":{"start":1752234290590,"stop":1752234292211,"duration":1621}},{"uid":"9fe894c3b8b4d3b5","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/9fe894c3b8b4d3b5","status":"passed","time":{"start":1752234283752,"stop":1752234284946,"duration":1194}},{"uid":"25d7cf3d06980199","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/25d7cf3d06980199","status":"passed","time":{"start":1752233456607,"stop":1752233458256,"duration":1649}},{"uid":"c7673599b10e4362","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/c7673599b10e4362","status":"passed","time":{"start":1752232539294,"stop":1752232539829,"duration":535}},{"uid":"18d1df13da71864c","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/18d1df13da71864c","status":"passed","time":{"start":1752232069263,"stop":1752232070938,"duration":1675}},{"uid":"8fb34a81a7fa5de9","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/8fb34a81a7fa5de9","status":"passed","time":{"start":1752223484214,"stop":1752223485356,"duration":1142}},{"uid":"1738708fc21bfdea","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/1738708fc21bfdea","status":"passed","time":{"start":1752218244915,"stop":1752218246039,"duration":1124}},{"uid":"50d1ef3c383150ac","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/50d1ef3c383150ac","status":"passed","time":{"start":1752151009729,"stop":1752151011294,"duration":1565}},{"uid":"898ffb636fc17ad2","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/898ffb636fc17ad2","status":"passed","time":{"start":1752148888795,"stop":1752148889264,"duration":469}}]},"tags":["backend"]},"source":"d12cb80c630b090c.json","parameterValues":["'manager_client'","200"]}