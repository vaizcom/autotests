{"uid":"55d6f295504efba3","name":"Проверка создания задачи с конкретным payload и структурой ответа : клиент=owner_client, ожидаемый статус=200","fullName":"tests.test_backend.task_service.create_task.access_task.test_create_task#test_create_task_with_specific_payload_and_response","historyId":"a135ab48b322a257fe8eb59ea80da515","time":{"start":1761835066579,"stop":1761835066699,"duration":120},"description":"\n    Данный тест проверяет возможность создания задачи с заранее определённым набором данных (payload) через API\n     управления задачами для различных ролей пользователей, а также корректность и полноту возвращаемого ответа.\n     Тест эмулирует действия разных типов клиентов (владелец, менеджер, участник, гость) и сравнивает фактический результат с ожидаемым HTTP-статусом.\n    ","descriptionHtml":"<pre><code>Данный тест проверяет возможность создания задачи с заранее определённым набором данных (payload) через API\n управления задачами для различных ролей пользователей, а также корректность и полноту возвращаемого ответа.\n Тест эмулирует действия разных типов клиентов (владелец, менеджер, участник, гость) и сравнивает фактический результат с ожидаемым HTTP-статусом.\n</code></pre>\n","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/getProfile","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_specific_payload_and_response[owner]>>\nclient_fixture = 'owner_client', expected_status = 200\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nmain_project = '686672af85fb8d104544e798'\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания задачи разными пользовательскими ролями с заранее определённым набором данных (payload). Проверка содержимого ответа\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_task_with_specific_payload_and_response(\n            request, client_fixture, expected_status, main_space, main_board, main_project\n    ):\n        \"\"\"\n        Данный тест проверяет возможность создания задачи с заранее определённым набором данных (payload) через API\n         управления задачами для различных ролей пользователей, а также корректность и полноту возвращаемого ответа.\n         Тест эмулирует действия разных типов клиентов (владелец, менеджер, участник, гость) и сравнивает фактический результат с ожидаемым HTTP-статусом.\n        \"\"\"\n        allure.dynamic.title(\n            f\"Проверка создания задачи с конкретным payload и структурой ответа : клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n    \n        client = get_client(request, client_fixture)\n        task_name = f\"Create task клиент={client_fixture}, дата={datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\"\n>       member_id = get_member_profile(client, main_space) # Получение профиля для извлечения creator ID\n\ntests/test_backend/task_service/create_task/access_task/test_create_task.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/utils.py:35: in get_member_profile\n    resp.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/getProfile\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761834940330,"stop":1761834940330,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761834940330,"stop":1761834940330,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761834940330,"stop":1761834940330,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761834940330,"stop":1761834940331,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761834940331,"stop":1761834940891,"duration":560},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761834944685,"stop":1761834945137,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761834945137,"stop":1761834945542,"duration":405},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761834945542,"stop":1761834945748,"duration":206},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1761834948056,"stop":1761834948260,"duration":204},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"access_task"},{"name":"tag","value":"backend"},{"name":"suite","value":"test_create_task"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2554-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task_service.create_task.access_task.test_create_task"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":9,"unknown":0,"total":16},"items":[{"uid":"877e78540071d91c","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/877e78540071d91c","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/getProfile","time":{"start":1761834654606,"stop":1761834654795,"duration":189}},{"uid":"8ac187473a9459a2","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/8ac187473a9459a2","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761833491539,"stop":1761833491738,"duration":199}},{"uid":"3095762876f35dc2","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/3095762876f35dc2","status":"passed","time":{"start":1761821844301,"stop":1761821845998,"duration":1697}},{"uid":"429d1442663a176d","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/429d1442663a176d","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761818778824,"stop":1761818779004,"duration":180}},{"uid":"29f81f997ac11245","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/29f81f997ac11245","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761748640577,"stop":1761748640895,"duration":318}},{"uid":"1c08d31df0c5c0a8","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/1c08d31df0c5c0a8","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761747918355,"stop":1761747918540,"duration":185}},{"uid":"9afbf76d494ab542","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/9afbf76d494ab542","status":"passed","time":{"start":1761747061291,"stop":1761747064046,"duration":2755}},{"uid":"c7635a80516a8dd","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/c7635a80516a8dd","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/getProfile","time":{"start":1761745748398,"stop":1761745748513,"duration":115}},{"uid":"2e93f394fadf0b70","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2e93f394fadf0b70","status":"passed","time":{"start":1761576880225,"stop":1761576882351,"duration":2126}},{"uid":"8f375a4cdd7f7ea2","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/8f375a4cdd7f7ea2","status":"passed","time":{"start":1761557495317,"stop":1761557497120,"duration":1803}},{"uid":"f0a95aaeb97021f7","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/f0a95aaeb97021f7","status":"passed","time":{"start":1761308714729,"stop":1761308716653,"duration":1924}},{"uid":"9e5bac4a5999143","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/9e5bac4a5999143","status":"passed","time":{"start":1761306880627,"stop":1761306882616,"duration":1989}},{"uid":"d2ba14e18cd75edc","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/d2ba14e18cd75edc","status":"passed","time":{"start":1761137181765,"stop":1761137183829,"duration":2064}},{"uid":"aaede8414b799253","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/aaede8414b799253","status":"passed","time":{"start":1761135882482,"stop":1761135884817,"duration":2335}},{"uid":"4731f7b780f91293","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/4731f7b780f91293","status":"passed","time":{"start":1761134286818,"stop":1761134288650,"duration":1832}}]},"tags":["backend"]},"source":"55d6f295504efba3.json","parameterValues":["'owner_client'","200"]}