{"uid":"93a8b19472bb4369","name":"Успешный запрос возвращает список токенов. Каждый элемент содержит id, name, createdAt, но не содержит hashedToken.","fullName":"tests.test_backend.personal_access_tokens.test_get_personal_access_tokens#test_get_personal_access_tokens","historyId":"62596fc8ec8192f785fcac6bdbe3c5b2","time":{"start":1759744094820,"stop":1759744095194,"duration":374},"status":"failed","statusMessage":"AssertionError: Статус: 404, текст: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/GetPersonalAccessTokens</pre>\n  </body>\n  </html>\n  \nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2109fa9790>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @allure.title(\"Успешный запрос возвращает список токенов. Каждый элемент содержит id, name, createdAt, но не содержит hashedToken.\")\n    def test_get_personal_access_tokens(owner_client, main_space):\n        with allure.step(\"Отправляем запрос на получение списка токенов\"):\n            response = get_tokens(owner_client.token, main_space)\n>           assert response.status_code == 200, f\"Статус: {response.status_code}, текст: {response.text}\"\nE           AssertionError: Статус: 404, текст: <!DOCTYPE html>\nE             <html lang=\"en\">\nE             <head>\nE             <meta charset=\"utf-8\">\nE             <title>Error</title>\nE             </head>\nE             <body>\nE             <pre>Cannot POST /v4/GetPersonalAccessTokens</pre>\nE             </body>\nE             </html>\nE             \nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_backend/personal_access_tokens/test_get_personal_access_tokens.py:12: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759743678061,"stop":1759743678696,"duration":635},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759743678696,"stop":1759743679363,"duration":667},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759743680109,"stop":1759743680673,"duration":564},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Статус: 404, текст: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/GetPersonalAccessTokens</pre>\n  </body>\n  </html>\n  \nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2109fa9790>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @allure.title(\"Успешный запрос возвращает список токенов. Каждый элемент содержит id, name, createdAt, но не содержит hashedToken.\")\n    def test_get_personal_access_tokens(owner_client, main_space):\n        with allure.step(\"Отправляем запрос на получение списка токенов\"):\n            response = get_tokens(owner_client.token, main_space)\n>           assert response.status_code == 200, f\"Статус: {response.status_code}, текст: {response.text}\"\nE           AssertionError: Статус: 404, текст: <!DOCTYPE html>\nE             <html lang=\"en\">\nE             <head>\nE             <meta charset=\"utf-8\">\nE             <title>Error</title>\nE             </head>\nE             <body>\nE             <pre>Cannot POST /v4/GetPersonalAccessTokens</pre>\nE             </body>\nE             </html>\nE             \nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_backend/personal_access_tokens/test_get_personal_access_tokens.py:12: AssertionError","steps":[{"name":"Отправляем запрос на получение списка токенов","time":{"start":1759744094820,"stop":1759744095194,"duration":374},"status":"failed","statusMessage":"AssertionError: Статус: 404, текст: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/GetPersonalAccessTokens</pre>\n  </body>\n  </html>\n  \nassert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/personal_access_tokens/test_get_personal_access_tokens.py\", line 12, in test_get_personal_access_tokens\n    assert response.status_code == 200, f\"Статус: {response.status_code}, текст: {response.text}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.personal_access_tokens"},{"name":"suite","value":"test_get_personal_access_tokens"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2543-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.personal_access_tokens.test_get_personal_access_tokens"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["backend"]},"source":"93a8b19472bb4369.json","parameterValues":[]}