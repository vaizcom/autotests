{"uid":"470c1e98ee6ba346","name":"Create task with minimal payload: клиент=owner_client, ожидаемый статус=200","fullName":"tests.test_backend.task.access_task.test_create_task#test_create_task_with_minimal_payload","historyId":"b92f4b203c5fac8fc36a95189c4261e5","time":{"start":1759909320764,"stop":1759909322497,"duration":1733},"description":"\n    Тест проверки создания задачи с минимальным набором полей в системе управления проектами под разными ролями.\n\n    Цель теста — убедиться, что можно успешно создать задачу, указав только минимально необходимые данные, и что поведение API зависит от прав пользователя (типа клиента).\n    В процессе теста дополнительно валидируются структура созданной задачи, значения по умолчанию, связи (creator, board и пр.), а также удаление задачи после проверки.\n\n    Ход теста:\n        1. Получение клиента согласно переданной роли через фикстуру.\n        2. Получение id пользователя, с помощью которого осуществляется создание задачи.\n        3. Формирование минимального payload и попытка создать задачу через API.\n        4. Проверка статус-кода ответа.\n        5. Если задача успешно создана (ответ 200):\n            - Проверка наполнения и структуры ответа\n    ","descriptionHtml":"<pre><code>Тест проверки создания задачи с минимальным набором полей в системе управления проектами под разными ролями.\n\nЦель теста — убедиться, что можно успешно создать задачу, указав только минимально необходимые данные, и что поведение API зависит от прав пользователя (типа клиента).\nВ процессе теста дополнительно валидируются структура созданной задачи, значения по умолчанию, связи (creator, board и пр.), а также удаление задачи после проверки.\n\nХод теста:\n    1. Получение клиента согласно переданной роли через фикстуру.\n    2. Получение id пользователя, с помощью которого осуществляется создание задачи.\n    3. Формирование минимального payload и попытка создать задачу через API.\n    4. Проверка статус-кода ответа.\n    5. Если задача успешно создана (ответ 200):\n        - Проверка наполнения и структуры ответа\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Не удалось удалить задачу 68e615c90354864d83fec1a1: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_minimal_payload[owner]>>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nclient_fixture = 'owner_client', expected_status = 200\nmain_project = '686672af85fb8d104544e798'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_task_with_minimal_payload(request, main_space, main_board, client_fixture, expected_status, main_project):\n        \"\"\"\n        Тест проверки создания задачи с минимальным набором полей в системе управления проектами под разными ролями.\n    \n        Цель теста — убедиться, что можно успешно создать задачу, указав только минимально необходимые данные, и что поведение API зависит от прав пользователя (типа клиента).\n        В процессе теста дополнительно валидируются структура созданной задачи, значения по умолчанию, связи (creator, board и пр.), а также удаление задачи после проверки.\n    \n        Ход теста:\n            1. Получение клиента согласно переданной роли через фикстуру.\n            2. Получение id пользователя, с помощью которого осуществляется создание задачи.\n            3. Формирование минимального payload и попытка создать задачу через API.\n            4. Проверка статус-кода ответа.\n            5. Если задача успешно создана (ответ 200):\n                - Проверка наполнения и структуры ответа\n        \"\"\"\n        allure.dynamic.title(\n            f\"Create task with minimal payload: клиент={client_fixture}, ожидаемый статус={expected_status}\")\n    \n        with allure.step(f\"Получение клиента для {client_fixture}\"):\n            client = get_client(request, client_fixture)\n    \n        with allure.step(f\"Получение id пользователя который создает задачу\"):\n            member_id = get_member_profile(client, main_space)\n    \n        task_id = None  # переменную объявляем до блока try\n    \n        try:\n    \n            with allure.step(\"Создание задачи с минимальным payload\"):\n                payload = create_task_endpoint(space_id=main_space, board=main_board)\n                response = create_task(client, payload)\n    \n            # Проверяем статус ответа\n            with allure.step(f\"Проверка статус-кода: ожидаем {expected_status}\"):\n                assert response.status_code == expected_status, response.text\n    \n            # Если запрос успешен, проверяем содержимое ответа\n            if response.status_code == 200:\n                with allure.step(\"Проверяем содержимое ответа с задачей\"):\n                    task = response.json()[\"payload\"][\"task\"]\n                    task_id = task[\"_id\"]\n    \n                    with allure.step(\"Проверка обязательных полей\"):\n                        assert task[\"board\"] == main_board, \"Ошибка: неверное значение поля 'board'\"\n                        assert task[\"name\"] == \"Untitled task\", \"Ошибка: неверное значение поля 'name'\"\n                        assert task[\"completed\"] is False, \"Ошибка: поле 'completed' должно быть False\"\n                        assert task[\"creator\"] == member_id, \"Ошибка: 'creator' не соответствует memberId пользователя\"\n    \n                    with allure.step(\"Проверка системных полей\"):\n                        assert \"_id\" in task, \"Ошибка: отсутствует поле '_id'\"\n                        assert task[\"createdAt\"] is not None, \"Ошибка: поле 'createdAt' должно быть задано\"\n                        assert task[\"updatedAt\"] is not None, \"Ошибка: поле 'updatedAt' должно быть задано\"\n    \n                        # Проверка корректности формата `hrid`\n                        with allure.step(\"Проверяем поле 'hrid'\"):\n                            assert \"hrid\" in task, \"Поле 'hrid' отсутствует\"\n                            validate_hrid(client, main_space, main_project, task[\"hrid\"])\n    \n                    with allure.step(\"Проверка полей, которые должны быть пустыми\"):\n                        assert task[\"assignees\"] == [], \"Ошибка: 'assignees' должно быть пустым списком\"\n                        assert task[\"types\"] == [], \"Ошибка: 'types' должно быть пустым списком\"\n                        assert task[\"milestones\"] == [], \"Ошибка: 'milestones' должно быть пустым списком\"\n                        assert task[\"subtasks\"] == [], \"Ошибка: 'subtasks' должно быть пустым списком\"\n    \n                    with allure.step(\"Проверка полей с `None` (null)\"):\n                        assert task[\"parentTask\"] is None, \"Ошибка: 'parentTask' должно быть None\"\n                        assert task[\"archiver\"] is None, \"Ошибка: 'archiver' должно быть None\"\n                        assert task[\"archivedAt\"] is None, \"Ошибка: 'archivedAt' должно быть None\"\n                        assert task[\"completedAt\"] is None, \"Ошибка: 'completedAt' должно быть None\"\n    \n                    with allure.step(\"Проверка значений по умолчанию\"):\n                        assert task[\"priority\"] == 1, \"Ошибка: 'priority' должно быть равно 1\"\n                        assert isinstance(task[\"followers\"], dict), \"Ошибка: 'followers' должно быть словарем\"\n                        assert task[\"followers\"] == {member_id: \"creator\"}, \"Ошибка: 'followers' должно включать creator\"\n                        assert isinstance(task[\"rightConnectors\"], list) and len(task[\"rightConnectors\"]) == 0, \\\n                            \"Ошибка: 'rightConnectors' должно быть пустым списком\"\n                        assert isinstance(task[\"leftConnectors\"], list) and len(task[\"leftConnectors\"]) == 0, \\\n                            \"Ошибка: 'leftConnectors' должно быть пустым списком\"\n    \n                    with allure.step(\"Проверяем содержимое ответа задачи\"):\n                        task = response.json()[\"payload\"][\"task\"]\n    \n                        with allure.step(\"Проверка структуры ключей задачи\"):\n                            expected_task_keys = {\n                                \"name\", \"group\", \"board\", \"project\", \"parentTask\", \"priority\", \"completed\",\n                                \"types\", \"assignees\", \"milestones\", \"subtasks\", \"dueStart\", \"dueEnd\",\n                                \"_id\", \"createdAt\", \"updatedAt\", \"document\", \"milestone\", \"followers\",\n                                \"hrid\", \"rightConnectors\", \"leftConnectors\", \"archiver\", \"archivedAt\",\n                                \"completedAt\", \"deleter\", \"deletedAt\", \"customFields\", \"creator\"\n                            }\n                            assert_task_keys(task, expected_task_keys)\n        finally:\n            if task_id:\n                with allure.step(f\"Удаляем задачу: {task_id}\"):\n                    del_resp = client.post(**delete_task_endpoint(task_id=task_id, space_id=main_space))\n>                   assert del_resp.status_code == 200, (\n                        f\"Не удалось удалить задачу {task_id}: {del_resp.status_code} {del_resp.text}\"\n                    )\nE                   AssertionError: Не удалось удалить задачу 68e615c90354864d83fec1a1: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/task/access_task/test_create_task.py:118: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"main_client","time":{"start":1759908910502,"stop":1759908910958,"duration":456},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759908910502,"stop":1759908910502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759908910958,"stop":1759908911429,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1759908911429,"stop":1759908911673,"duration":244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759908911674,"stop":1759908912143,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1759908916299,"stop":1759908916703,"duration":404},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест проверки создания задачи с минимальным набором полей в системе управления проектами под разными ролями.\n\n    Цель теста — убедиться, что можно успешно создать задачу, указав только минимально необходимые данные, и что поведение API зависит от прав пользователя (типа клиента).\n    В процессе теста дополнительно валидируются структура созданной задачи, значения по умолчанию, связи (creator, board и пр.), а также удаление задачи после проверки.\n\n    Ход теста:\n        1. Получение клиента согласно переданной роли через фикстуру.\n        2. Получение id пользователя, с помощью которого осуществляется создание задачи.\n        3. Формирование минимального payload и попытка создать задачу через API.\n        4. Проверка статус-кода ответа.\n        5. Если задача успешно создана (ответ 200):\n            - Проверка наполнения и структуры ответа\n    ","status":"failed","statusMessage":"AssertionError: Не удалось удалить задачу 68e615c90354864d83fec1a1: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_create_task_with_minimal_payload[owner]>>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\nclient_fixture = 'owner_client', expected_status = 200\nmain_project = '686672af85fb8d104544e798'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_task_with_minimal_payload(request, main_space, main_board, client_fixture, expected_status, main_project):\n        \"\"\"\n        Тест проверки создания задачи с минимальным набором полей в системе управления проектами под разными ролями.\n    \n        Цель теста — убедиться, что можно успешно создать задачу, указав только минимально необходимые данные, и что поведение API зависит от прав пользователя (типа клиента).\n        В процессе теста дополнительно валидируются структура созданной задачи, значения по умолчанию, связи (creator, board и пр.), а также удаление задачи после проверки.\n    \n        Ход теста:\n            1. Получение клиента согласно переданной роли через фикстуру.\n            2. Получение id пользователя, с помощью которого осуществляется создание задачи.\n            3. Формирование минимального payload и попытка создать задачу через API.\n            4. Проверка статус-кода ответа.\n            5. Если задача успешно создана (ответ 200):\n                - Проверка наполнения и структуры ответа\n        \"\"\"\n        allure.dynamic.title(\n            f\"Create task with minimal payload: клиент={client_fixture}, ожидаемый статус={expected_status}\")\n    \n        with allure.step(f\"Получение клиента для {client_fixture}\"):\n            client = get_client(request, client_fixture)\n    \n        with allure.step(f\"Получение id пользователя который создает задачу\"):\n            member_id = get_member_profile(client, main_space)\n    \n        task_id = None  # переменную объявляем до блока try\n    \n        try:\n    \n            with allure.step(\"Создание задачи с минимальным payload\"):\n                payload = create_task_endpoint(space_id=main_space, board=main_board)\n                response = create_task(client, payload)\n    \n            # Проверяем статус ответа\n            with allure.step(f\"Проверка статус-кода: ожидаем {expected_status}\"):\n                assert response.status_code == expected_status, response.text\n    \n            # Если запрос успешен, проверяем содержимое ответа\n            if response.status_code == 200:\n                with allure.step(\"Проверяем содержимое ответа с задачей\"):\n                    task = response.json()[\"payload\"][\"task\"]\n                    task_id = task[\"_id\"]\n    \n                    with allure.step(\"Проверка обязательных полей\"):\n                        assert task[\"board\"] == main_board, \"Ошибка: неверное значение поля 'board'\"\n                        assert task[\"name\"] == \"Untitled task\", \"Ошибка: неверное значение поля 'name'\"\n                        assert task[\"completed\"] is False, \"Ошибка: поле 'completed' должно быть False\"\n                        assert task[\"creator\"] == member_id, \"Ошибка: 'creator' не соответствует memberId пользователя\"\n    \n                    with allure.step(\"Проверка системных полей\"):\n                        assert \"_id\" in task, \"Ошибка: отсутствует поле '_id'\"\n                        assert task[\"createdAt\"] is not None, \"Ошибка: поле 'createdAt' должно быть задано\"\n                        assert task[\"updatedAt\"] is not None, \"Ошибка: поле 'updatedAt' должно быть задано\"\n    \n                        # Проверка корректности формата `hrid`\n                        with allure.step(\"Проверяем поле 'hrid'\"):\n                            assert \"hrid\" in task, \"Поле 'hrid' отсутствует\"\n                            validate_hrid(client, main_space, main_project, task[\"hrid\"])\n    \n                    with allure.step(\"Проверка полей, которые должны быть пустыми\"):\n                        assert task[\"assignees\"] == [], \"Ошибка: 'assignees' должно быть пустым списком\"\n                        assert task[\"types\"] == [], \"Ошибка: 'types' должно быть пустым списком\"\n                        assert task[\"milestones\"] == [], \"Ошибка: 'milestones' должно быть пустым списком\"\n                        assert task[\"subtasks\"] == [], \"Ошибка: 'subtasks' должно быть пустым списком\"\n    \n                    with allure.step(\"Проверка полей с `None` (null)\"):\n                        assert task[\"parentTask\"] is None, \"Ошибка: 'parentTask' должно быть None\"\n                        assert task[\"archiver\"] is None, \"Ошибка: 'archiver' должно быть None\"\n                        assert task[\"archivedAt\"] is None, \"Ошибка: 'archivedAt' должно быть None\"\n                        assert task[\"completedAt\"] is None, \"Ошибка: 'completedAt' должно быть None\"\n    \n                    with allure.step(\"Проверка значений по умолчанию\"):\n                        assert task[\"priority\"] == 1, \"Ошибка: 'priority' должно быть равно 1\"\n                        assert isinstance(task[\"followers\"], dict), \"Ошибка: 'followers' должно быть словарем\"\n                        assert task[\"followers\"] == {member_id: \"creator\"}, \"Ошибка: 'followers' должно включать creator\"\n                        assert isinstance(task[\"rightConnectors\"], list) and len(task[\"rightConnectors\"]) == 0, \\\n                            \"Ошибка: 'rightConnectors' должно быть пустым списком\"\n                        assert isinstance(task[\"leftConnectors\"], list) and len(task[\"leftConnectors\"]) == 0, \\\n                            \"Ошибка: 'leftConnectors' должно быть пустым списком\"\n    \n                    with allure.step(\"Проверяем содержимое ответа задачи\"):\n                        task = response.json()[\"payload\"][\"task\"]\n    \n                        with allure.step(\"Проверка структуры ключей задачи\"):\n                            expected_task_keys = {\n                                \"name\", \"group\", \"board\", \"project\", \"parentTask\", \"priority\", \"completed\",\n                                \"types\", \"assignees\", \"milestones\", \"subtasks\", \"dueStart\", \"dueEnd\",\n                                \"_id\", \"createdAt\", \"updatedAt\", \"document\", \"milestone\", \"followers\",\n                                \"hrid\", \"rightConnectors\", \"leftConnectors\", \"archiver\", \"archivedAt\",\n                                \"completedAt\", \"deleter\", \"deletedAt\", \"customFields\", \"creator\"\n                            }\n                            assert_task_keys(task, expected_task_keys)\n        finally:\n            if task_id:\n                with allure.step(f\"Удаляем задачу: {task_id}\"):\n                    del_resp = client.post(**delete_task_endpoint(task_id=task_id, space_id=main_space))\n>                   assert del_resp.status_code == 200, (\n                        f\"Не удалось удалить задачу {task_id}: {del_resp.status_code} {del_resp.text}\"\n                    )\nE                   AssertionError: Не удалось удалить задачу 68e615c90354864d83fec1a1: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/task/access_task/test_create_task.py:118: AssertionError","steps":[{"name":"Получение клиента для owner_client","time":{"start":1759909320764,"stop":1759909320764,"duration":0},"status":"passed","steps":[{"name":"Получение клиента для owner_client","time":{"start":1759909320764,"stop":1759909320764,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Получение id пользователя который создает задачу","time":{"start":1759909320764,"stop":1759909321081,"duration":317},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание задачи с минимальным payload","time":{"start":1759909321081,"stop":1759909321597,"duration":516},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статус-кода: ожидаем 200","time":{"start":1759909321597,"stop":1759909321597,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем содержимое ответа с задачей","time":{"start":1759909321597,"stop":1759909322029,"duration":432},"status":"passed","steps":[{"name":"Проверка обязательных полей","time":{"start":1759909321597,"stop":1759909321598,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка системных полей","time":{"start":1759909321598,"stop":1759909322029,"duration":431},"status":"passed","steps":[{"name":"Проверяем поле 'hrid'","time":{"start":1759909321598,"stop":1759909322029,"duration":431},"status":"passed","steps":[{"name":"Получаем slug проекта","time":{"start":1759909321598,"stop":1759909322029,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что hrid 'CCSS-1138' соответствует шаблону '^CCSS-\\d+$'","time":{"start":1759909322029,"stop":1759909322029,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true},{"name":"Проверка полей, которые должны быть пустыми","time":{"start":1759909322029,"stop":1759909322029,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка полей с `None` (null)","time":{"start":1759909322029,"stop":1759909322029,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка значений по умолчанию","time":{"start":1759909322029,"stop":1759909322029,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем содержимое ответа задачи","time":{"start":1759909322029,"stop":1759909322029,"duration":0},"status":"passed","steps":[{"name":"Проверка структуры ключей задачи","time":{"start":1759909322029,"stop":1759909322029,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":10,"attachmentsCount":0,"hasContent":true},{"name":"Удаляем задачу: 68e615c90354864d83fec1a1","time":{"start":1759909322029,"stop":1759909322495,"duration":466},"status":"failed","statusMessage":"AssertionError: Не удалось удалить задачу 68e615c90354864d83fec1a1: 400 {\"payload\":null,\"type\":\"DeleteTask\",\"error\":{\"code\":\"InternalServerError\",\"fields\":[],\"originalType\":\"DeleteTask\",\"meta\":{\"context\":\"MongoServerError\",\"message\":\"Caused by :: Write conflict during plan execution and yielding is disabled. :: Please retry your operation or multi-document transaction.\"}}}\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/access_task/test_create_task.py\", line 118, in test_create_task_with_minimal_payload\n    assert del_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":17,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.task.access_task"},{"name":"suite","value":"test_create_task"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2548-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task.access_task.test_create_task"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"5f5160925848abcd","reportUrl":"https://vaizcom.github.io/autotests/358//#testresult/5f5160925848abcd","status":"passed","time":{"start":1759908107175,"stop":1759908108088,"duration":913}}]},"tags":["backend"]},"source":"470c1e98ee6ba346.json","parameterValues":["'owner_client'","200"]}