{"uid":"9b9cced982670c5c","name":"Дублирование Project-документа: создание manager, дублирование owner","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_project_and_space_docs_different_roles","historyId":"a7177b2f27df9b13aeb531758e5e6130","time":{"start":1761921784977,"stop":1761921785553,"duration":576},"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","descriptionHtml":"<pre><code>Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\nсозданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[project_doc-manager_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nduplicator_fixture = 'owner_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа второй ролью\n            with allure.step(f'Дублирование документа пользователем с ролью {duplicator_role}'):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:109: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761921767725,"stop":1761921768196,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761921768380,"stop":1761921768849,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n    созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n    ","status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_project_and_space_docs_different_roles[project_doc-manager_to_owner]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\nduplicator_fixture = 'owner_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер дублирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник дублирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость дублирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец дублирует\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник дублирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость дублирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец дублирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер дублирует\n            ('member_client', 'member_client', 200),  # участник дублирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость дублирует\n        ],\n        ids=[\n            # Owner создает\n            'owner_self_duplicate',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            # Manager создает\n            'manager_to_owner',\n            'manager_self_duplicate',\n            'manager_to_member',\n            'manager_to_guest',\n            # Member создает\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_duplicate',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Project', 'main_project'),\n            ('Space', 'main_space'),\n        ],\n        ids=['project_doc', 'space_doc'],\n    )\n    def test_duplicate_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, duplicator_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Тест проверяет дублирование документов разными ролями и типами документов. Тест проверяет, что документы могут быть\n        созданы одной ролью и продублированы другой в соответствии с ожидаемыми условиями, указанными в параметризации.\n        \"\"\"\n        # Получаем клиентов для создания и дублирования\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование {doc_type}-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n    \n                # Проверяем что документ создался\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа второй ролью\n            with allure.step(f'Дублирование документа пользователем с ролью {duplicator_role}'):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:109: AssertionError","steps":[{"name":"Создание Project-документа пользователем с ролью manager","time":{"start":1761921784977,"stop":1761921785189,"duration":212},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Дублирование документа пользователем с ролью owner","time":{"start":1761921785189,"stop":1761921785320,"duration":131},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 109, in test_duplicate_project_and_space_docs_different_roles\n    assert duplicate_response.status_code == expected_status, (\n","steps":[],"attachments":[{"uid":"a0458800e3846002","name":"Response Body","source":"a0458800e3846002.json","type":"application/json","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Архивация исходного документа","time":{"start":1761921785321,"stop":1761921785553,"duration":232},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'manager_client'"},{"name":"doc_container","value":"'main_project'"},{"name":"doc_type","value":"'Project'"},{"name":"duplicator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":55},"items":[{"uid":"5fd2cfc018fda37a","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/5fd2cfc018fda37a","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912093452,"stop":1761912094234,"duration":782}},{"uid":"bfd7de3ddbf167b0","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/bfd7de3ddbf167b0","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911187146,"stop":1761911187872,"duration":726}},{"uid":"9e64812847181629","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/9e64812847181629","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910814239,"stop":1761910814806,"duration":567}},{"uid":"24addab970e010ab","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/24addab970e010ab","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910517656,"stop":1761910518410,"duration":754}},{"uid":"da9592e87be48d83","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/da9592e87be48d83","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909882623,"stop":1761909883647,"duration":1024}},{"uid":"4b227f38d61149ef","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/4b227f38d61149ef","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899916164,"stop":1761899916930,"duration":766}},{"uid":"5bb74b480f0956cf","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/5bb74b480f0956cf","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834961639,"stop":1761834962290,"duration":651}},{"uid":"c77b85706cbc78fb","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/c77b85706cbc78fb","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834514941,"stop":1761834515722,"duration":781}},{"uid":"ec7d5a5006cc7e17","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/ec7d5a5006cc7e17","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833345164,"stop":1761833345933,"duration":769}},{"uid":"8e0b5438be567ad2","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/8e0b5438be567ad2","status":"passed","time":{"start":1761821530160,"stop":1761821531926,"duration":1766}},{"uid":"88d0cb601714f42e","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/88d0cb601714f42e","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818650357,"stop":1761818651116,"duration":759}},{"uid":"8589b372670fcdf","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/8589b372670fcdf","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748524888,"stop":1761748525465,"duration":577}},{"uid":"b301bd72ba8827c4","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/b301bd72ba8827c4","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747786733,"stop":1761747787485,"duration":752}},{"uid":"fe20fe9ef5b9eee3","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/fe20fe9ef5b9eee3","status":"passed","time":{"start":1761746653101,"stop":1761746654371,"duration":1270}},{"uid":"9fe18d05135be3a2","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/9fe18d05135be3a2","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 200\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745648042,"stop":1761745648783,"duration":741}},{"uid":"c9bafd3b742d859f","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/c9bafd3b742d859f","status":"passed","time":{"start":1761576523588,"stop":1761576524594,"duration":1006}},{"uid":"6f10b27baeddee6d","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/6f10b27baeddee6d","status":"passed","time":{"start":1761557179708,"stop":1761557180808,"duration":1100}},{"uid":"99b7862355094087","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/99b7862355094087","status":"passed","time":{"start":1761308404825,"stop":1761308405899,"duration":1074}},{"uid":"69c59a9a77f09e5b","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/69c59a9a77f09e5b","status":"passed","time":{"start":1761306552489,"stop":1761306553594,"duration":1105}},{"uid":"6dc78230c7555052","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/6dc78230c7555052","status":"passed","time":{"start":1761136846923,"stop":1761136848003,"duration":1080}}]},"tags":["backend"]},"source":"9b9cced982670c5c.json","parameterValues":["'manager_client'","'main_project'","'Project'","'owner_client'","200"]}