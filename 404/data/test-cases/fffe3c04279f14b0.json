{"uid":"fffe3c04279f14b0","name":"Редактирование Personal-документа: создание manager, редактирование owner","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_personal_doc_different_roles","historyId":"d44707d2950afce7a42626f4b0bc82f5","time":{"start":1761912131511,"stop":1761912132077,"duration":566},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[manager_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'manager_client', editor_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа\n            with allure.step(\n                f'Редактирование документа пользователем с ролью {editor_role} (Нельзя редактировать чужие персональные документы)'\n            ):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='icon_test', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:209: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761912073100,"stop":1761912073571,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761912076138,"stop":1761912076602,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761912076602,"stop":1761912076805,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761912077381,"stop":1761912077625,"duration":244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761912085060,"stop":1761912085493,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_personal_doc_different_roles[manager_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'manager_client', editor_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается редактировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается редактировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается редактировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается редактировать\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается редактировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается редактировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается редактировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается редактировать\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается редактировать\n        ],\n        ids=[\n            'owner_self_edit_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            'manager_personal_by_owner',\n            'manager_self_edit_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_edit_personal',\n            'member_personal_by_guest',\n        ],\n    )\n    def test_edit_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, editor_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Editing'\n        edited_title = f'Edited {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование Personal-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа\n            with allure.step(\n                f'Редактирование документа пользователем с ролью {editor_role} (Нельзя редактировать чужие персональные документы)'\n            ):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='icon_test', space_id=main_space)\n                )\n>               assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:209: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью manager","time":{"start":1761912131511,"stop":1761912131718,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью owner (Нельзя редактировать чужие персональные документы)","time":{"start":1761912131718,"stop":1761912131851,"duration":133},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 209, in test_edit_personal_doc_different_roles\n    assert edit_response.status_code == expected_status, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1761912131851,"stop":1761912132077,"duration":226},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2535-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'manager_client'"},{"name":"editor_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":54},"items":[{"uid":"64ba53877eb592e7","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/64ba53877eb592e7","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911231383,"stop":1761911232457,"duration":1074}},{"uid":"848a6f44678f609","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/848a6f44678f609","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910853488,"stop":1761910854109,"duration":621}},{"uid":"f785122fa8aa103b","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/f785122fa8aa103b","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910554568,"stop":1761910556087,"duration":1519}},{"uid":"1ac10126ebad0778","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/1ac10126ebad0778","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909931988,"stop":1761909932757,"duration":769}},{"uid":"66406d05a436ebff","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/66406d05a436ebff","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899963403,"stop":1761899964137,"duration":734}},{"uid":"3bfbdc41a91aad6c","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/3bfbdc41a91aad6c","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834999581,"stop":1761835000155,"duration":574}},{"uid":"ea613aa072a6335a","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/ea613aa072a6335a","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834564226,"stop":1761834565001,"duration":775}},{"uid":"73dc2c55b9505733","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/73dc2c55b9505733","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833397575,"stop":1761833398452,"duration":877}},{"uid":"6bd58afbd881dd24","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/6bd58afbd881dd24","status":"passed","time":{"start":1761821593752,"stop":1761821594352,"duration":600}},{"uid":"b6d0ed364940ffad","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/b6d0ed364940ffad","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818695283,"stop":1761818696290,"duration":1007}},{"uid":"76801f0ef01ba5ab","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/76801f0ef01ba5ab","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748566345,"stop":1761748566917,"duration":572}},{"uid":"bbb400e7bd5521ed","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/bbb400e7bd5521ed","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747833132,"stop":1761747833906,"duration":774}},{"uid":"d4cc07eb56ae2206","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/d4cc07eb56ae2206","status":"passed","time":{"start":1761746732055,"stop":1761746733913,"duration":1858}},{"uid":"158fa1077bf32462","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/158fa1077bf32462","status":"failed","statusDetails":"AssertionError: Неожиданный статус при редактировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745684658,"stop":1761745685201,"duration":543}},{"uid":"5206093d089ba1df","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/5206093d089ba1df","status":"passed","time":{"start":1761576589220,"stop":1761576590304,"duration":1084}},{"uid":"2471b265068ad5d0","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/2471b265068ad5d0","status":"passed","time":{"start":1761557246421,"stop":1761557247036,"duration":615}},{"uid":"25f129ca564957ae","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/25f129ca564957ae","status":"passed","time":{"start":1761308471227,"stop":1761308471840,"duration":613}},{"uid":"dcfc3433cb238b71","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/dcfc3433cb238b71","status":"passed","time":{"start":1761306619815,"stop":1761306620512,"duration":697}},{"uid":"440824c9055ed752","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/440824c9055ed752","status":"passed","time":{"start":1761136917269,"stop":1761136917932,"duration":663}},{"uid":"e322f8b568fe538e","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/e322f8b568fe538e","status":"passed","time":{"start":1761135580274,"stop":1761135581068,"duration":794}}]},"tags":["backend"]},"source":"fffe3c04279f14b0.json","parameterValues":["'manager_client'","'owner_client'","403"]}