{"uid":"8ab2719448ab5151","name":"Просмотр соседей Space-документа для роли owner (без создания)","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_space_doc_siblings_view_only_access","historyId":"880775dbf6f25703fb57cebdbfb244c0","time":{"start":1752500679697,"stop":1752500681076,"duration":1379},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_view_only_access[owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmember_client = <tests.core.client.APIClient object at 0x7fe793d582d0>\nclient_fixture = 'owner_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_view_only_access(request, main_space, member_client, client_fixture, expected_status):\n        role = client_fixture.replace('_client', '')\n        api_client = request.getfixturevalue(client_fixture)\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Просмотр соседей Space-документа для роли {role} (без создания)')\n    \n        with allure.step('Создание документов (в рандомной роли) для теста просмотра siblings'):\n            random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n            doc_ids = []\n            for index in range(3):\n                title = f'{current_date}_member_create_Sibling Test Doc {index}'\n                create_resp = random_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n>               assert create_resp.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:94: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"owner_client","time":{"start":1752500528128,"stop":1752500528919,"duration":791},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752500528128,"stop":1752500528128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752500528128,"stop":1752500528128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752500528128,"stop":1752500528128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1752500528128,"stop":1752500528128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1752500672517,"stop":1752500673025,"duration":508},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1752500673025,"stop":1752500673347,"duration":322},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1752500675893,"stop":1752500676336,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1752500678451,"stop":1752500678954,"duration":503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_space_doc_siblings_view_only_access[owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmember_client = <tests.core.client.APIClient object at 0x7fe793d582d0>\nclient_fixture = 'owner_client', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_get_space_doc_siblings_view_only_access(request, main_space, member_client, client_fixture, expected_status):\n        role = client_fixture.replace('_client', '')\n        api_client = request.getfixturevalue(client_fixture)\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(f'Просмотр соседей Space-документа для роли {role} (без создания)')\n    \n        with allure.step('Создание документов (в рандомной роли) для теста просмотра siblings'):\n            random_client = request.getfixturevalue(random.choice(['owner_client', 'manager_client', 'member_client']))\n            doc_ids = []\n            for index in range(3):\n                title = f'{current_date}_member_create_Sibling Test Doc {index}'\n                create_resp = random_client.post(\n                    **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n                )\n>               assert create_resp.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:94: AssertionError","steps":[{"name":"Создание документов (в рандомной роли) для теста просмотра siblings","time":{"start":1752500679697,"stop":1752500681075,"duration":1378},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 94, in test_get_space_doc_siblings_view_only_access\n    assert create_resp.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2570-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":43},"items":[{"uid":"78e9f0259d39649c","reportUrl":"https://vaizcom.github.io/autotests/294//#testresult/78e9f0259d39649c","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752499353273,"stop":1752499358085,"duration":4812}},{"uid":"2bb6f5e07982d406","reportUrl":"https://vaizcom.github.io/autotests/293//#testresult/2bb6f5e07982d406","status":"passed","time":{"start":1752498289350,"stop":1752498291097,"duration":1747}},{"uid":"4fcac4d1b3d60253","reportUrl":"https://vaizcom.github.io/autotests/292//#testresult/4fcac4d1b3d60253","status":"passed","time":{"start":1752496639347,"stop":1752496641488,"duration":2141}},{"uid":"590263f4d1ec8c39","reportUrl":"https://vaizcom.github.io/autotests/291//#testresult/590263f4d1ec8c39","status":"passed","time":{"start":1752481740452,"stop":1752481742136,"duration":1684}},{"uid":"e96454f29e186c83","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/e96454f29e186c83","status":"passed","time":{"start":1752479785132,"stop":1752479787268,"duration":2136}},{"uid":"a108f5d458ca2c03","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/a108f5d458ca2c03","status":"passed","time":{"start":1752477933773,"stop":1752477935504,"duration":1731}},{"uid":"89b1d1e5ca3b48ca","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/89b1d1e5ca3b48ca","status":"passed","time":{"start":1752236801083,"stop":1752236803121,"duration":2038}},{"uid":"8f9edfb845f00dd8","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/8f9edfb845f00dd8","status":"passed","time":{"start":1752236168708,"stop":1752236170832,"duration":2124}},{"uid":"3c6dc14f612ac73","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/3c6dc14f612ac73","status":"passed","time":{"start":1752235419979,"stop":1752235422350,"duration":2371}},{"uid":"a36dd236ae04a73f","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/a36dd236ae04a73f","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752235383734,"stop":1752235384412,"duration":678}},{"uid":"1d35eda2f6615d9","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/1d35eda2f6615d9","status":"passed","time":{"start":1752234439201,"stop":1752234441398,"duration":2197}},{"uid":"abd27801803259bd","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/abd27801803259bd","status":"passed","time":{"start":1752234404643,"stop":1752234406646,"duration":2003}},{"uid":"39166280a6daa477","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/39166280a6daa477","status":"passed","time":{"start":1752233590128,"stop":1752233592513,"duration":2385}},{"uid":"976892da42137265","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/976892da42137265","status":"passed","time":{"start":1752232650453,"stop":1752232652590,"duration":2137}},{"uid":"27b13781b04c7816","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/27b13781b04c7816","status":"passed","time":{"start":1752232188545,"stop":1752232190531,"duration":1986}},{"uid":"c703899e031d50eb","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/c703899e031d50eb","status":"passed","time":{"start":1752223582771,"stop":1752223584483,"duration":1712}},{"uid":"512e57ee3409964c","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/512e57ee3409964c","status":"passed","time":{"start":1752218322124,"stop":1752218323820,"duration":1696}},{"uid":"ecda3a24360d35c8","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/ecda3a24360d35c8","status":"passed","time":{"start":1752151089991,"stop":1752151092020,"duration":2029}},{"uid":"423183fb8c108de","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/423183fb8c108de","status":"passed","time":{"start":1752148939291,"stop":1752148940904,"duration":1613}},{"uid":"87271c15d9c56695","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/87271c15d9c56695","status":"passed","time":{"start":1752138415361,"stop":1752138417117,"duration":1756}}]},"tags":["backend"]},"source":"8ab2719448ab5151.json","parameterValues":["'owner_client'","200"]}