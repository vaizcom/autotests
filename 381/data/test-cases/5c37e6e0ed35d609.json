{"uid":"5c37e6e0ed35d609","name":"Получение документов — кейс: kind=Project","fullName":"tests.test_backend.document.test_get_documents#test_get_documents","historyId":"0b08f4d92db89a7f94b9d0fbd2ee1046","time":{"start":1761053503834,"stop":1761053503944,"duration":110},"status":"failed","statusMessage":"AssertionError: assert 502 == 200\n +  where 502 = <Response [502]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f7926bb3d10>\ntemp_space = '68f78a260bbcb424d41e8687'\nrequest = <FixtureRequest for <Function test_get_documents[project]>>\nkind = 'Project', fixture_name = 'temp_project'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_documents(owner_client, temp_space, request, kind, fixture_name):\n        allure.dynamic.title(f'Получение документов — кейс: kind={kind}')\n    \n        kind_id = request.getfixturevalue(fixture_name)\n        count = random.randint(1, 5)\n        titles = [f'Random doc для kind={kind} #{i}' for i in range(count)]\n    \n        with allure.step(f'Создание {count} (Random[1,5]) документов с kind={kind}'):\n            for title in titles:\n                response = owner_client.post(\n                    **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title=title)\n                )\n>               assert response.status_code == 200\nE               assert 502 == 200\nE                +  where 502 = <Response [502]>.status_code\n\ntests/test_backend/document/test_get_documents.py:37: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761053215690,"stop":1761053215690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761053215690,"stop":1761053215690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761053215690,"stop":1761053215690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761053215690,"stop":1761053215690,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761053216831,"stop":1761053217460,"duration":629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1761053222652,"stop":1761053223348,"duration":696},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1761053223349,"stop":1761053223813,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 502 == 200\n +  where 502 = <Response [502]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f7926bb3d10>\ntemp_space = '68f78a260bbcb424d41e8687'\nrequest = <FixtureRequest for <Function test_get_documents[project]>>\nkind = 'Project', fixture_name = 'temp_project'\n\n    @pytest.mark.parametrize(\n        'kind, fixture_name',\n        [\n            ('Project', 'temp_project'),\n            ('Space', 'temp_space'),\n            ('Member', 'temp_member'),\n        ],\n        ids=['project', 'space', 'member'],\n    )\n    def test_get_documents(owner_client, temp_space, request, kind, fixture_name):\n        allure.dynamic.title(f'Получение документов — кейс: kind={kind}')\n    \n        kind_id = request.getfixturevalue(fixture_name)\n        count = random.randint(1, 5)\n        titles = [f'Random doc для kind={kind} #{i}' for i in range(count)]\n    \n        with allure.step(f'Создание {count} (Random[1,5]) документов с kind={kind}'):\n            for title in titles:\n                response = owner_client.post(\n                    **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title=title)\n                )\n>               assert response.status_code == 200\nE               assert 502 == 200\nE                +  where 502 = <Response [502]>.status_code\n\ntests/test_backend/document/test_get_documents.py:37: AssertionError","steps":[{"name":"Создание 4 (Random[1,5]) документов с kind=Project","time":{"start":1761053503834,"stop":1761053503944,"duration":110},"status":"failed","statusMessage":"AssertionError: assert 502 == 200\n +  where 502 = <Response [502]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_documents.py\", line 37, in test_get_documents\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1761053802116,"stop":1761053802697,"duration":581},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project::0","time":{"start":1761053802116,"stop":1761053802116,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_documents"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_documents"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"fixture_name","value":"'temp_project'"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":27,"unknown":0,"total":29},"items":[{"uid":"59f7e1435d7bee8","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/59f7e1435d7bee8","status":"passed","time":{"start":1761047408069,"stop":1761047409072,"duration":1003}},{"uid":"e0ca1da7b92ce47d","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/e0ca1da7b92ce47d","status":"passed","time":{"start":1760614830014,"stop":1760614831204,"duration":1190}},{"uid":"e83729faa3ca5b38","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/e83729faa3ca5b38","status":"passed","time":{"start":1760599633629,"stop":1760599635205,"duration":1576}},{"uid":"8799502068578475","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/8799502068578475","status":"passed","time":{"start":1760535639375,"stop":1760535640854,"duration":1479}},{"uid":"59ac9fff37cf0e23","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/59ac9fff37cf0e23","status":"passed","time":{"start":1760534159329,"stop":1760534160404,"duration":1075}},{"uid":"7016ac7b53ef472f","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/7016ac7b53ef472f","status":"passed","time":{"start":1760532682248,"stop":1760532682738,"duration":490}},{"uid":"c33a63a647534697","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/c33a63a647534697","status":"passed","time":{"start":1760529489551,"stop":1760529490527,"duration":976}},{"uid":"1f6390b4c52129ea","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/1f6390b4c52129ea","status":"passed","time":{"start":1760510903165,"stop":1760510903700,"duration":535}},{"uid":"422cb1a769408528","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/422cb1a769408528","status":"passed","time":{"start":1760449365946,"stop":1760449367270,"duration":1324}},{"uid":"4fc22d2757bda70c","reportUrl":"https://vaizcom.github.io/autotests/371//#testresult/4fc22d2757bda70c","status":"passed","time":{"start":1760447120802,"stop":1760447121268,"duration":466}},{"uid":"3b01911aea3e1a35","reportUrl":"https://vaizcom.github.io/autotests/370//#testresult/3b01911aea3e1a35","status":"passed","time":{"start":1760427955812,"stop":1760427956580,"duration":768}},{"uid":"95114a7929b789ec","reportUrl":"https://vaizcom.github.io/autotests/369//#testresult/95114a7929b789ec","status":"passed","time":{"start":1760360246892,"stop":1760360247483,"duration":591}},{"uid":"48aff7559cfb1135","reportUrl":"https://vaizcom.github.io/autotests/368//#testresult/48aff7559cfb1135","status":"passed","time":{"start":1760342244857,"stop":1760342246450,"duration":1593}},{"uid":"f538367e17b1bbcd","reportUrl":"https://vaizcom.github.io/autotests/367//#testresult/f538367e17b1bbcd","status":"passed","time":{"start":1760101947061,"stop":1760101948348,"duration":1287}},{"uid":"aac5d9ed200f5979","reportUrl":"https://vaizcom.github.io/autotests/366//#testresult/aac5d9ed200f5979","status":"passed","time":{"start":1760098931672,"stop":1760098932611,"duration":939}},{"uid":"15e517b07812e8c2","reportUrl":"https://vaizcom.github.io/autotests/365//#testresult/15e517b07812e8c2","status":"passed","time":{"start":1760087387420,"stop":1760087389224,"duration":1804}},{"uid":"a8361e8a78c8bd83","reportUrl":"https://vaizcom.github.io/autotests/364//#testresult/a8361e8a78c8bd83","status":"passed","time":{"start":1760017563645,"stop":1760017564826,"duration":1181}},{"uid":"3ee4b2b47aa5c41f","reportUrl":"https://vaizcom.github.io/autotests/363//#testresult/3ee4b2b47aa5c41f","status":"passed","time":{"start":1760014646854,"stop":1760014647859,"duration":1005}},{"uid":"d0cd913fe28ab3e3","reportUrl":"https://vaizcom.github.io/autotests/362//#testresult/d0cd913fe28ab3e3","status":"passed","time":{"start":1760013744030,"stop":1760013745531,"duration":1501}},{"uid":"b3f57f5ccb016b3f","reportUrl":"https://vaizcom.github.io/autotests/361//#testresult/b3f57f5ccb016b3f","status":"passed","time":{"start":1759931699449,"stop":1759931699988,"duration":539}}]},"tags":["backend"]},"source":"5c37e6e0ed35d609.json","parameterValues":["'temp_project'","'Project'"]}