{"uid":"bc810855885f2e5b","name":"Редактирование Project-документа: создание owner, редактирование member","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_project_and_space_docs_different_roles","historyId":"5b2adca8170588b2f7266c56a23b30f4","time":{"start":1761921814029,"stop":1761921814152,"duration":123},"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\nмогут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\nдокументы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\nтестирования различных комбинаций ролей создателей и редакторов документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[project_doc-owner_to_member]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\neditor_fixture = 'member_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:88: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761921767725,"stop":1761921768196,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761921769502,"stop":1761921769951,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[project_doc-owner_to_member]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'owner_client'\neditor_fixture = 'member_client', expected_status = 200, doc_type = 'Project'\ndoc_container = 'main_project'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n>               assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\nE               AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:88: AssertionError","steps":[{"name":"Создание Project-документа пользователем с ролью owner","time":{"start":1761921814029,"stop":1761921814152,"duration":123},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 88, in test_edit_project_and_space_docs_different_roles\n    assert create_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'owner_client'"},{"name":"doc_container","value":"'main_project'"},{"name":"doc_type","value":"'Project'"},{"name":"editor_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":55},"items":[{"uid":"e6aeba900d8c90ef","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/e6aeba900d8c90ef","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912123687,"stop":1761912123820,"duration":133}},{"uid":"d614f6f1a893a95f","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/d614f6f1a893a95f","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911223259,"stop":1761911223433,"duration":174}},{"uid":"90accac2480dbc49","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/90accac2480dbc49","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910845405,"stop":1761910845527,"duration":122}},{"uid":"c7a9d5598bfce799","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/c7a9d5598bfce799","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910548266,"stop":1761910548386,"duration":120}},{"uid":"4342c6a50d71f87d","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/4342c6a50d71f87d","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909923021,"stop":1761909923197,"duration":176}},{"uid":"cf8710b75097bf5c","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/cf8710b75097bf5c","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899954620,"stop":1761899954794,"duration":174}},{"uid":"c8ddd8cdf070fa5","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/c8ddd8cdf070fa5","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834993041,"stop":1761834993160,"duration":119}},{"uid":"389ecb3213d0a40c","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/389ecb3213d0a40c","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834555193,"stop":1761834555364,"duration":171}},{"uid":"cb6c757d7ccf19ce","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/cb6c757d7ccf19ce","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833386777,"stop":1761833386958,"duration":181}},{"uid":"2d68a282a7136489","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/2d68a282a7136489","status":"passed","time":{"start":1761821577528,"stop":1761821578915,"duration":1387}},{"uid":"28125d91486f761a","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/28125d91486f761a","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818687049,"stop":1761818687222,"duration":173}},{"uid":"84331bb4d5d62a68","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/84331bb4d5d62a68","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748558039,"stop":1761748558155,"duration":116}},{"uid":"7615ede0f84b494c","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/7615ede0f84b494c","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747824267,"stop":1761747824442,"duration":175}},{"uid":"22ec5de7d4a55def","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/22ec5de7d4a55def","status":"passed","time":{"start":1761746713579,"stop":1761746715450,"duration":1871}},{"uid":"8171d3f87d1161b3","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/8171d3f87d1161b3","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745678053,"stop":1761745678177,"duration":124}},{"uid":"7679e354037c568","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/7679e354037c568","status":"passed","time":{"start":1761576573724,"stop":1761576575182,"duration":1458}},{"uid":"4df0df71c873d354","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/4df0df71c873d354","status":"passed","time":{"start":1761557230140,"stop":1761557231626,"duration":1486}},{"uid":"1206ddfd14371223","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/1206ddfd14371223","status":"passed","time":{"start":1761308454497,"stop":1761308455917,"duration":1420}},{"uid":"3eea1ddaf5e0f45c","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/3eea1ddaf5e0f45c","status":"passed","time":{"start":1761306602511,"stop":1761306604577,"duration":2066}},{"uid":"3ceb14d295cc9e33","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/3ceb14d295cc9e33","status":"passed","time":{"start":1761136900506,"stop":1761136902096,"duration":1590}}]},"tags":["backend"]},"source":"bc810855885f2e5b.json","parameterValues":["'owner_client'","'main_project'","'Project'","'member_client'","200"]}