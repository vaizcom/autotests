{"uid":"e05beeb0af463666","name":"Создание документа — кейс: [title > MAX length (2049)] (ожидается 400)","fullName":"tests.test_backend.document.test_create_document#test_document_title_validation","historyId":"d3a627c8a6b13d9ee453f271220be274","time":{"start":1759837446919,"stop":1759837447096,"duration":177},"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\ntemp_project = '68e4fbe4e49ce50caff67c06'\ntitle = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'\nexpected_status = 400, expected_actual_title = None\nrequest = <FixtureRequest for <Function test_document_title_validation[title > MAX length (2049)]>>\n\n    @pytest.mark.parametrize(\n        'title, expected_status, expected_actual_title',\n        [\n            (None, 200, 'Untitled document'),\n            ('', 200, ''),\n            (' ', 200, ' '),\n            ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),\n            ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),\n            # Дополнительно:\n            (123, 400, None),\n            (True, 400, None),\n            ([], 400, None),\n            ('Документ', 200, 'Документ'),\n            ('\uD83D\uDE0A\uD83D\uDCC4✨', 200, '\uD83D\uDE0A\uD83D\uDCC4✨'),\n            ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),\n            ('Title with & < > \" \\'', 200, 'Title with & < > \" \\''),\n        ],\n        ids=[\n            'None',\n            'empty string',\n            'single space',\n            'title = MAX length (2048)',\n            'title > MAX length (2049)',\n            'int as title',\n            'bool as title',\n            'list as title',\n            'cyrillic',\n            'emoji',\n            'html injection',\n            'special chars',\n        ],\n    )\n    @allure.title('Создание документа с различными значениями title — ожидаемый статус {expected_status}')\n    def test_document_title_validation(\n        owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request\n    ):\n        allure.dynamic.title(f'Создание документа — кейс: [{request.node.callspec.id}] (ожидается {expected_status})')\n    \n        with allure.step(f'Отправка запроса [{request.node.callspec.id}] (ожидается {expected_status})'):\n            response = owner_client.post(\n                **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)\n            )\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status}'):\n>           assert response.status_code == expected_status\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_create_document.py:80: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1759837155711,"stop":1759837156205,"duration":494},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\ntemp_project = '68e4fbe4e49ce50caff67c06'\ntitle = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'\nexpected_status = 400, expected_actual_title = None\nrequest = <FixtureRequest for <Function test_document_title_validation[title > MAX length (2049)]>>\n\n    @pytest.mark.parametrize(\n        'title, expected_status, expected_actual_title',\n        [\n            (None, 200, 'Untitled document'),\n            ('', 200, ''),\n            (' ', 200, ' '),\n            ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),\n            ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),\n            # Дополнительно:\n            (123, 400, None),\n            (True, 400, None),\n            ([], 400, None),\n            ('Документ', 200, 'Документ'),\n            ('\uD83D\uDE0A\uD83D\uDCC4✨', 200, '\uD83D\uDE0A\uD83D\uDCC4✨'),\n            ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),\n            ('Title with & < > \" \\'', 200, 'Title with & < > \" \\''),\n        ],\n        ids=[\n            'None',\n            'empty string',\n            'single space',\n            'title = MAX length (2048)',\n            'title > MAX length (2049)',\n            'int as title',\n            'bool as title',\n            'list as title',\n            'cyrillic',\n            'emoji',\n            'html injection',\n            'special chars',\n        ],\n    )\n    @allure.title('Создание документа с различными значениями title — ожидаемый статус {expected_status}')\n    def test_document_title_validation(\n        owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request\n    ):\n        allure.dynamic.title(f'Создание документа — кейс: [{request.node.callspec.id}] (ожидается {expected_status})')\n    \n        with allure.step(f'Отправка запроса [{request.node.callspec.id}] (ожидается {expected_status})'):\n            response = owner_client.post(\n                **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)\n            )\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status}'):\n>           assert response.status_code == expected_status\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_create_document.py:80: AssertionError","steps":[{"name":"Отправка запроса [title > MAX length (2049)] (ожидается 400)","time":{"start":1759837446919,"stop":1759837447095,"duration":176},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что статус ответа = 400","time":{"start":1759837447095,"stop":1759837447095,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 503 == 400\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_create_document.py\", line 80, in test_document_title_validation\n    assert response.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_project::0","time":{"start":1759837469359,"stop":1759837469359,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_create_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_create_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_actual_title","value":"None"},{"name":"expected_status","value":"400"},{"name":"title","value":"'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"ca5c5d3f29ba1f7f","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/ca5c5d3f29ba1f7f","status":"passed","time":{"start":1759836246249,"stop":1759836246528,"duration":279}},{"uid":"4f07e720fe60d7c4","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/4f07e720fe60d7c4","status":"passed","time":{"start":1759835609637,"stop":1759835609827,"duration":190}},{"uid":"1c9fada455e7ca12","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/1c9fada455e7ca12","status":"passed","time":{"start":1759834717903,"stop":1759834718136,"duration":233}}]},"tags":["backend"]},"source":"e05beeb0af463666.json","parameterValues":["None}