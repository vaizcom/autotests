{"uid":"c4ca5b0e3cd4748d","name":"Дублирование Personal-документа: создание member, дублирование owner","fullName":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles#test_duplicate_personal_doc_different_roles","historyId":"f255c494d8f316675dc35d855136a361","time":{"start":1761921802020,"stop":1761921802556,"duration":536},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[member_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'member_client', duplicator_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа\n            with allure.step(\n                f'Дублирование документа пользователем с ролью {duplicator_role} (Нельзя дублировать чужие персональные документы)'\n            ):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:228: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761921769502,"stop":1761921769951,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761921776341,"stop":1761921776747,"duration":406},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_duplicate_personal_doc_different_roles[member_personal_by_owner]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'member_client', duplicator_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, duplicator_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец дублирует свой personal-документ\n            ('owner_client', 'manager_client', 403),  # владелец создает, менеджер пытается дублировать\n            ('owner_client', 'member_client', 403),  # владелец создает, участник пытается дублировать\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость пытается дублировать\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # менеджер создает, владелец пытается дублировать\n            ('manager_client', 'manager_client', 200),  # менеджер дублирует свой personal-документ\n            ('manager_client', 'member_client', 403),  # менеджер создает, участник пытается дублировать\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость пытается дублировать\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # участник создает, владелец пытается дублировать\n            ('member_client', 'manager_client', 403),  # участник создает, менеджер пытается дублировать\n            ('member_client', 'member_client', 200),  # участник дублирует свой personal-документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость пытается дублировать\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # гость создает, владелец пытается дублировать\n            ('guest_client', 'manager_client', 403),  # гость создает, менеджер пытается дублировать\n            ('guest_client', 'member_client', 403),  # гость создает, участник пытается дублировать\n            ('guest_client', 'guest_client', 200),  # гость дублирует свой personal-документ\n        ],\n        ids=[\n            # Owner's personal docs\n            'owner_self_personal',\n            'owner_personal_by_manager',\n            'owner_personal_by_member',\n            'owner_personal_by_guest',\n            # Manager's personal docs\n            'manager_personal_by_owner',\n            'manager_self_personal',\n            'manager_personal_by_member',\n            'manager_personal_by_guest',\n            # Member's personal docs\n            'member_personal_by_owner',\n            'member_personal_by_manager',\n            'member_self_personal',\n            'member_personal_by_guest',\n            # Guest's personal docs\n            'guest_personal_by_owner',\n            'guest_personal_by_manager',\n            'guest_personal_by_member',\n            'guest_self_personal',\n        ],\n    )\n    def test_duplicate_personal_doc_different_roles(\n        request, main_space, main_personal, creator_fixture, duplicator_fixture, expected_status\n    ):\n        creator_client = request.getfixturevalue(creator_fixture)\n        duplicator_client = request.getfixturevalue(duplicator_fixture)\n    \n        creator_role = creator_fixture.replace('_client', '')\n        duplicator_role = duplicator_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Personal Doc For Duplication'\n        doc_id = None\n        doc_copy_id = None\n    \n        allure.dynamic.title(f'Дублирование Personal-документа: создание {creator_role}, дублирование {duplicator_role}')\n    \n        try:\n            # Создание персонального документа\n            with allure.step(f'Создание Personal-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=document_title\n                    )\n                )\n    \n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n    \n                doc_id = create_response.json()['payload']['document']['_id']\n                original_title = create_response.json()['payload']['document']['title']\n    \n            # Дублирование документа\n            with allure.step(\n                f'Дублирование документа пользователем с ролью {duplicator_role} (Нельзя дублировать чужие персональные документы)'\n            ):\n                duplicate_response = duplicator_client.post(\n                    **duplicate_document_endpoint(document_id=doc_id, space_id=main_space)\n                )\n    \n                if duplicate_response.status_code != expected_status:\n                    allure.attach(\n                        duplicate_response.text, name='Response Body', attachment_type=allure.attachment_type.JSON\n                    )\n    \n>               assert duplicate_response.status_code == expected_status, (\n                    f'Неожиданный статус при дублировании: {duplicate_response.status_code}, '\n                    f'ожидался: {expected_status}'\n                )\nE               AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nE               assert 400 == 403\nE                +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py:228: AssertionError","steps":[{"name":"Создание Personal-документа пользователем с ролью member","time":{"start":1761921802020,"stop":1761921802233,"duration":213},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Дублирование документа пользователем с ролью owner (Нельзя дублировать чужие персональные документы)","time":{"start":1761921802233,"stop":1761921802349,"duration":116},"status":"failed","statusMessage":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_duplicate_doc_access_by_roles.py\", line 228, in test_duplicate_personal_doc_different_roles\n    assert duplicate_response.status_code == expected_status, (\n","steps":[],"attachments":[{"uid":"991c0af5f3c951fe","name":"Response Body","source":"991c0af5f3c951fe.json","type":"application/json","size":113}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Архивация исходного документа","time":{"start":1761921802349,"stop":1761921802556,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_duplicate_doc_access_by_roles"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_duplicate_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'member_client'"},{"name":"duplicator_fixture","value":"'owner_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":14,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":55},"items":[{"uid":"f7397ad18e688e43","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/f7397ad18e688e43","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761912110299,"stop":1761912110839,"duration":540}},{"uid":"a11e12545dab7dc7","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/a11e12545dab7dc7","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911208169,"stop":1761911208852,"duration":683}},{"uid":"31cdcb965bff2348","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/31cdcb965bff2348","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910832787,"stop":1761910833367,"duration":580}},{"uid":"504242316090ba58","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/504242316090ba58","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910535227,"stop":1761910535954,"duration":727}},{"uid":"a68909efb035990f","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/a68909efb035990f","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909904880,"stop":1761909906957,"duration":2077}},{"uid":"94bc02edd145a856","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/94bc02edd145a856","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761899938183,"stop":1761899938903,"duration":720}},{"uid":"2855b22078fe3737","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/2855b22078fe3737","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834979892,"stop":1761834980437,"duration":545}},{"uid":"4ccbea6bf11810e","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/4ccbea6bf11810e","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834537669,"stop":1761834538739,"duration":1070}},{"uid":"ef3945efc0e46a42","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/ef3945efc0e46a42","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833368001,"stop":1761833368731,"duration":730}},{"uid":"58060eced37ddf76","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/58060eced37ddf76","status":"passed","time":{"start":1761821554568,"stop":1761821555190,"duration":622}},{"uid":"603155c7b5ce500d","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/603155c7b5ce500d","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818671492,"stop":1761818672168,"duration":676}},{"uid":"d32e340f241301fb","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/d32e340f241301fb","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748544434,"stop":1761748545071,"duration":637}},{"uid":"de99cd6f29b3b2f6","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/de99cd6f29b3b2f6","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747808747,"stop":1761747809472,"duration":725}},{"uid":"6158880596f006d1","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/6158880596f006d1","status":"passed","time":{"start":1761746682924,"stop":1761746683694,"duration":770}},{"uid":"b6896b626cd8faf7","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/b6896b626cd8faf7","status":"failed","statusDetails":"AssertionError: Неожиданный статус при дублировании: 400, ожидался: 403\nassert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745665730,"stop":1761745666274,"duration":544}},{"uid":"d12571aee8deda1","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/d12571aee8deda1","status":"passed","time":{"start":1761576549557,"stop":1761576550248,"duration":691}},{"uid":"d7309baf5b38dcfc","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/d7309baf5b38dcfc","status":"passed","time":{"start":1761557205331,"stop":1761557205980,"duration":649}},{"uid":"218bc1f80aea9b6","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/218bc1f80aea9b6","status":"passed","time":{"start":1761308431506,"stop":1761308432187,"duration":681}},{"uid":"186dd6b3594af592","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/186dd6b3594af592","status":"passed","time":{"start":1761306577556,"stop":1761306578228,"duration":672}},{"uid":"ae6b1802052437d2","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/ae6b1802052437d2","status":"passed","time":{"start":1761136874844,"stop":1761136875527,"duration":683}}]},"tags":["backend"]},"source":"c4ca5b0e3cd4748d.json","parameterValues":["'member_client'","'owner_client'","403"]}