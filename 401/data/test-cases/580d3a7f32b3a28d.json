{"uid":"580d3a7f32b3a28d","name":"Тестирование создания подзадачи разными пользовательскими ролями: клиент=guest_client, ожидаемый статус=403","fullName":"tests.test_backend.task_service.create_task.access_task.test_create_sub#test_create_subtask_per_role","historyId":"97e0a065e6c1f53a04d513786a32fb09","time":{"start":1761910620384,"stop":1761910620509,"duration":125},"description":"\n    Тестирование создания подзадачи разными пользовательскими ролями и проверка\n    ожидаемого поведения на основе прав доступа роли.\n\n    Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n    подзадачу для родительской задачи. Также проверяются корректные связи между\n    родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n\n    ","descriptionHtml":"<pre><code>Тестирование создания подзадачи разными пользовательскими ролями и проверка\nожидаемого поведения на основе прав доступа роли.\n\nЭтот тест оценивает может ли клиент с разными уровнями доступа создавать\nподзадачу для родительской задачи. Также проверяются корректные связи между\nродительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n</code></pre>\n","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fce4b119550>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fce4ade1940>\nclient_fixture = 'guest_client', expected_status = 403\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания подзадачи разными пользовательскими ролями и проверка ожидаемого поведения\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_subtask_per_role(\n        owner_client, main_space, main_board, create_task_in_main, client_fixture, expected_status\n    ):\n        \"\"\"\n        Тестирование создания подзадачи разными пользовательскими ролями и проверка\n        ожидаемого поведения на основе прав доступа роли.\n    \n        Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n        подзадачу для родительской задачи. Также проверяются корректные связи между\n        родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n    \n        \"\"\"\n        allure.dynamic.title(\n            f\"Тестирование создания подзадачи разными пользовательскими ролями: клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n        parent_id = subtask_id = None\n    \n        try:\n            with allure.step(\"Создание родительской задачи через owner_client\"):\n>               parent_task = create_task_in_main(\n                    \"owner_client\",\n                    name=\"Main create_task for subtask access test\"\n                )\n\ntests/test_backend/task_service/create_task/access_task/test_create_sub.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/conftest.py:32: in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\ntests/test_backend/task_service/create_task/utils.py:52: in get_random_type_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761910495818,"stop":1761910495819,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761910495819,"stop":1761910496047,"duration":228},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761910498993,"stop":1761910499413,"duration":420},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761910499414,"stop":1761910499610,"duration":196},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761910499610,"stop":1761910499986,"duration":376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1761910502456,"stop":1761910502685,"duration":229},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_task_in_main","time":{"start":1761910620384,"stop":1761910620384,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тестирование создания подзадачи разными пользовательскими ролями и проверка\n    ожидаемого поведения на основе прав доступа роли.\n\n    Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n    подзадачу для родительской задачи. Также проверяются корректные связи между\n    родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n\n    ","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fce4b119550>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fce4ade1940>\nclient_fixture = 'guest_client', expected_status = 403\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания подзадачи разными пользовательскими ролями и проверка ожидаемого поведения\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_subtask_per_role(\n        owner_client, main_space, main_board, create_task_in_main, client_fixture, expected_status\n    ):\n        \"\"\"\n        Тестирование создания подзадачи разными пользовательскими ролями и проверка\n        ожидаемого поведения на основе прав доступа роли.\n    \n        Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n        подзадачу для родительской задачи. Также проверяются корректные связи между\n        родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n    \n        \"\"\"\n        allure.dynamic.title(\n            f\"Тестирование создания подзадачи разными пользовательскими ролями: клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n        parent_id = subtask_id = None\n    \n        try:\n            with allure.step(\"Создание родительской задачи через owner_client\"):\n>               parent_task = create_task_in_main(\n                    \"owner_client\",\n                    name=\"Main create_task for subtask access test\"\n                )\n\ntests/test_backend/task_service/create_task/access_task/test_create_sub.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/conftest.py:32: in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\ntests/test_backend/task_service/create_task/utils.py:52: in get_random_type_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","steps":[{"name":"Создание родительской задачи через owner_client","time":{"start":1761910620384,"stop":1761910620509,"duration":125},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/access_task/test_create_sub.py\", line 42, in test_create_subtask_per_role\n    parent_task = create_task_in_main(\n                  ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/conftest.py\", line 32, in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\n                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/utils.py\", line 52, in get_random_type_id\n    response.raise_for_status()\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"access_task"},{"name":"tag","value":"backend"},{"name":"suite","value":"test_create_sub"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2557-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task_service.create_task.access_task.test_create_sub"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":9,"unknown":0,"total":19},"items":[{"uid":"e1a0d8670bd814b3","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/e1a0d8670bd814b3","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761910014133,"stop":1761910014304,"duration":171}},{"uid":"425ad8f0014d6d35","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/425ad8f0014d6d35","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/GetBoard","time":{"start":1761900045629,"stop":1761900045802,"duration":173}},{"uid":"9bae91032ce149e","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/9bae91032ce149e","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard","time":{"start":1761835064029,"stop":1761835064157,"duration":128}},{"uid":"684aa175d9a8a072","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/684aa175d9a8a072","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/GetBoard","time":{"start":1761834651270,"stop":1761834651453,"duration":183}},{"uid":"907174ec9a346f16","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/907174ec9a346f16","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761833487171,"stop":1761833487369,"duration":198}},{"uid":"7965357a45d712ce","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/7965357a45d712ce","status":"passed","time":{"start":1761821838457,"stop":1761821841111,"duration":2654}},{"uid":"c9fdd6cd163759d7","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/c9fdd6cd163759d7","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761818774955,"stop":1761818775127,"duration":172}},{"uid":"704919fcf6be9d98","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/704919fcf6be9d98","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761748637764,"stop":1761748637887,"duration":123}},{"uid":"1a044996b5f322e6","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/1a044996b5f322e6","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761747915256,"stop":1761747915445,"duration":189}},{"uid":"3fdececa75f76527","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/3fdececa75f76527","status":"passed","time":{"start":1761747054484,"stop":1761747057125,"duration":2641}},{"uid":"af022913572bb0a6","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/af022913572bb0a6","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761745745134,"stop":1761745745248,"duration":114}},{"uid":"ec44852512b0d91","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/ec44852512b0d91","status":"passed","time":{"start":1761576873343,"stop":1761576875579,"duration":2236}},{"uid":"9a500bf4327cbb53","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/9a500bf4327cbb53","status":"passed","time":{"start":1761557489584,"stop":1761557491614,"duration":2030}},{"uid":"37342d9c515125a3","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/37342d9c515125a3","status":"passed","time":{"start":1761308709053,"stop":1761308711270,"duration":2217}},{"uid":"4d518f21da5673da","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/4d518f21da5673da","status":"passed","time":{"start":1761306874761,"stop":1761306877324,"duration":2563}},{"uid":"d58441973ea27e3","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/d58441973ea27e3","status":"passed","time":{"start":1761137175212,"stop":1761137178013,"duration":2801}},{"uid":"f7f885b235504fce","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/f7f885b235504fce","status":"passed","time":{"start":1761135875384,"stop":1761135878081,"duration":2697}},{"uid":"9c8f4ddc779a3397","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/9c8f4ddc779a3397","status":"passed","time":{"start":1761134281188,"stop":1761134283429,"duration":2241}}]},"tags":["backend"]},"source":"580d3a7f32b3a28d.json","parameterValues":["'guest_client'","403"]}