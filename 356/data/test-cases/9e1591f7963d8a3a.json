{"uid":"9e1591f7963d8a3a","name":"Негативный экспорт Y-Doc для document_id=","fullName":"tests.test_backend.document.test_get_y_document#test_get_ydocument_invalid_id","historyId":"67c17837a711787277c3356df1734d1c","time":{"start":1759837464847,"stop":1759837465021,"duration":174},"description":"\n    Негативный сценарий: разные некорректные document_id.\n    ","descriptionHtml":"<pre><code>Негативный сценарий: разные некорректные document_id.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ожидался 400, получен 503\nassert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74', fake_id = '', expected_status = 400\n\n    @pytest.mark.parametrize(\n        'fake_id, expected_status',\n        [\n            ('000000000000000000000000', 400),\n            ('', 400),\n            (None, 400),\n            ('bad_format', 400),\n        ],\n        ids=['not_found', 'empty', 'null', 'bad_format'],\n    )\n    def test_get_ydocument_invalid_id(owner_client, temp_space, fake_id, expected_status):\n        \"\"\"\n        Негативный сценарий: разные некорректные document_id.\n        \"\"\"\n        allure.dynamic.title(f'Негативный экспорт Y-Doc для document_id={fake_id}')\n        with allure.step('Выполняем запрос с некорректным document_id'):\n            endpoint = get_ydocument_endpoint(document_id=fake_id, space_id=temp_space)\n            resp = owner_client.post(**endpoint)\n>           assert resp.status_code == expected_status, f'Ожидался {expected_status}, получен {resp.status_code}'\nE           AssertionError: Ожидался 400, получен 503\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_y_document.py:71: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Негативный сценарий: разные некорректные document_id.\n    ","status":"failed","statusMessage":"AssertionError: Ожидался 400, получен 503\nassert 503 == 400\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74', fake_id = '', expected_status = 400\n\n    @pytest.mark.parametrize(\n        'fake_id, expected_status',\n        [\n            ('000000000000000000000000', 400),\n            ('', 400),\n            (None, 400),\n            ('bad_format', 400),\n        ],\n        ids=['not_found', 'empty', 'null', 'bad_format'],\n    )\n    def test_get_ydocument_invalid_id(owner_client, temp_space, fake_id, expected_status):\n        \"\"\"\n        Негативный сценарий: разные некорректные document_id.\n        \"\"\"\n        allure.dynamic.title(f'Негативный экспорт Y-Doc для document_id={fake_id}')\n        with allure.step('Выполняем запрос с некорректным document_id'):\n            endpoint = get_ydocument_endpoint(document_id=fake_id, space_id=temp_space)\n            resp = owner_client.post(**endpoint)\n>           assert resp.status_code == expected_status, f'Ожидался {expected_status}, получен {resp.status_code}'\nE           AssertionError: Ожидался 400, получен 503\nE           assert 503 == 400\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_get_y_document.py:71: AssertionError","steps":[{"name":"Выполняем запрос с некорректным document_id","time":{"start":1759837464847,"stop":1759837465021,"duration":174},"status":"failed","statusMessage":"AssertionError: Ожидался 400, получен 503\nassert 503 == 400\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_get_y_document.py\", line 71, in test_get_ydocument_invalid_id\n    assert resp.status_code == expected_status, f'Ожидался {expected_status}, получен {resp.status_code}'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_get_y_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_get_y_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"400"},{"name":"fake_id","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"2cb922358a058e","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/2cb922358a058e","status":"passed","time":{"start":1759836390434,"stop":1759836390708,"duration":274}},{"uid":"ca539e4188fe6a79","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/ca539e4188fe6a79","status":"passed","time":{"start":1759835722653,"stop":1759835722840,"duration":187}},{"uid":"664e646071396eea","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/664e646071396eea","status":"passed","time":{"start":1759834852157,"stop":1759834852402,"duration":245}}]},"tags":["backend"]},"source":"9e1591f7963d8a3a.json","parameterValues":["400","''"]}