{"uid":"5e8aafaafbb2bfff","name":"Проверка доступа к siblings Space-документа: создатель - member, просматривающий - guest","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_project_and_space_siblings_docs_access_by_roles","historyId":"e0c23422e906f551b41568ad0f84841c","time":{"start":1759767507838,"stop":1759767509052,"duration":1214},"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n- Типа документа (Space/Project)\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '68e3ebd41140fad5d3deeea8' == '68e3ebd47fd6ea7a1c48ffcc'\n  \n  - 68e3ebd47fd6ea7a1c48ffcc\n  + 68e3ebd41140fad5d3deeea8","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-member_docs_by_guest_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\nclient_fixture = 'guest_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n>                   assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\nE                   AssertionError: Некорректный правый сосед\nE                   assert '68e3ebd41140fad5d3deeea8' == '68e3ebd47fd6ea7a1c48ffcc'\nE                     \nE                     - 68e3ebd47fd6ea7a1c48ffcc\nE                     + 68e3ebd41140fad5d3deeea8\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:107: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1759767275032,"stop":1759767275032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767275033,"stop":1759767275653,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767275653,"stop":1759767276290,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1759767279249,"stop":1759767279709,"duration":460},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1759767279938,"stop":1759767280423,"duration":485},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n    - Типа документа (Space/Project)\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n    ","status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '68e3ebd41140fad5d3deeea8' == '68e3ebd47fd6ea7a1c48ffcc'\n  \n  - 68e3ebd47fd6ea7a1c48ffcc\n  + 68e3ebd41140fad5d3deeea8","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_siblings_docs_access_by_roles[space_doc-member_docs_by_guest_403]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'member_client'\nclient_fixture = 'guest_client', expected_status = 200, kind = 'Space'\ncontainer_fixture = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            ('owner_client', 'owner_client', 200),\n            ('owner_client', 'manager_client', 200),\n            ('owner_client', 'member_client', 200),\n            ('owner_client', 'guest_client', 200),\n            ('manager_client', 'owner_client', 200),\n            ('manager_client', 'manager_client', 200),\n            ('manager_client', 'member_client', 200),\n            ('manager_client', 'guest_client', 200),\n            ('member_client', 'owner_client', 200),\n            ('member_client', 'manager_client', 200),\n            ('member_client', 'member_client', 200),\n            ('member_client', 'guest_client', 200),\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_siblings_docs_access_by_roles(\n        request, main_space, creator_fixture, client_fixture, expected_status, kind, container_fixture\n    ):\n        \"\"\"\n        Проверяет доступ к siblings документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n        - Типа документа (Space/Project)\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n        container_id = request.getfixturevalue(container_fixture)\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings {kind}-документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх {kind}-документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_{kind}_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(kind=kind, kind_id=container_id, space_id=main_space, title=title)\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n            assert siblings_resp.status_code == expected_status\n    \n            if siblings_resp.status_code == 200:\n                payload = siblings_resp.json().get('payload', {})\n                with allure.step('Проверка корректности данных siblings'):\n                    # Проверка наличия обязательных полей\n                    assert 'prevSibling' in payload, 'Отсутствует поле prevSibling'\n                    assert 'nextSibling' in payload, 'Отсутствует поле nextSibling'\n                    assert 'tree' in payload, 'Отсутствует поле tree'\n    \n                    # Проверка корректности siblings\n                    assert payload['prevSibling']['_id'] == doc_ids[0], 'Некорректный левый сосед'\n>                   assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\nE                   AssertionError: Некорректный правый сосед\nE                   assert '68e3ebd41140fad5d3deeea8' == '68e3ebd47fd6ea7a1c48ffcc'\nE                     \nE                     - 68e3ebd47fd6ea7a1c48ffcc\nE                     + 68e3ebd41140fad5d3deeea8\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:107: AssertionError","steps":[{"name":"Создание трёх Space-документов пользователем member","time":{"start":1759767507838,"stop":1759767508639,"duration":801},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Попытка получения siblings для среднего документа пользователем guest","time":{"start":1759767508639,"stop":1759767509052,"duration":413},"status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '68e3ebd41140fad5d3deeea8' == '68e3ebd47fd6ea7a1c48ffcc'\n  \n  - 68e3ebd47fd6ea7a1c48ffcc\n  + 68e3ebd41140fad5d3deeea8\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 107, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n","steps":[{"name":"Проверка корректности данных siblings","time":{"start":1759767509051,"stop":1759767509051,"duration":0},"status":"failed","statusMessage":"AssertionError: Некорректный правый сосед\nassert '68e3ebd41140fad5d3deeea8' == '68e3ebd47fd6ea7a1c48ffcc'\n  \n  - 68e3ebd47fd6ea7a1c48ffcc\n  + 68e3ebd41140fad5d3deeea8\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 107, in test_get_project_and_space_siblings_docs_access_by_roles\n    assert payload['nextSibling']['_id'] == doc_ids[2], 'Некорректный правый сосед'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'guest_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"creator_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":33,"unknown":0,"total":35},"items":[{"uid":"c5717de1cfa1f72e","reportUrl":"https://vaizcom.github.io/autotests/343//#testresult/c5717de1cfa1f72e","status":"passed","time":{"start":1759767454944,"stop":1759767456780,"duration":1836}},{"uid":"79ed60a574c249e","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/79ed60a574c249e","status":"passed","time":{"start":1759753917304,"stop":1759753918969,"duration":1665}},{"uid":"49b626e530b4f4b2","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/49b626e530b4f4b2","status":"passed","time":{"start":1759743880268,"stop":1759743882052,"duration":1784}},{"uid":"2fe024e1ebc7fa5","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/2fe024e1ebc7fa5","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485534381,"stop":1759485534381,"duration":0}},{"uid":"fd9015b52a84b1ec","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/fd9015b52a84b1ec","status":"passed","time":{"start":1759232505838,"stop":1759232507499,"duration":1661}},{"uid":"824463dc80b9fe16","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/824463dc80b9fe16","status":"passed","time":{"start":1759140787040,"stop":1759140788729,"duration":1689}},{"uid":"aa90e8af4b1d1d0d","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/aa90e8af4b1d1d0d","status":"passed","time":{"start":1758891858984,"stop":1758891861321,"duration":2337}},{"uid":"237478884c9f5971","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/237478884c9f5971","status":"passed","time":{"start":1758807810472,"stop":1758807813280,"duration":2808}},{"uid":"cc650a0f67e5ceac","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/cc650a0f67e5ceac","status":"passed","time":{"start":1758806684193,"stop":1758806686222,"duration":2029}},{"uid":"206bd606e27c8cf1","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/206bd606e27c8cf1","status":"passed","time":{"start":1758791264438,"stop":1758791266848,"duration":2410}},{"uid":"16cb586c1b37c389","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/16cb586c1b37c389","status":"passed","time":{"start":1758540572617,"stop":1758540574735,"duration":2118}},{"uid":"73372acc4461d427","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/73372acc4461d427","status":"passed","time":{"start":1758289206154,"stop":1758289209224,"duration":3070}},{"uid":"eca317256f349c9f","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/eca317256f349c9f","status":"passed","time":{"start":1755852373851,"stop":1755852375576,"duration":1725}},{"uid":"607f22bdc35f3be3","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/607f22bdc35f3be3","status":"passed","time":{"start":1755851882218,"stop":1755851884007,"duration":1789}},{"uid":"2ccb65e9d4e0ff59","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/2ccb65e9d4e0ff59","status":"passed","time":{"start":1755848021195,"stop":1755848023758,"duration":2563}},{"uid":"48227f3e6f3c4c4b","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/48227f3e6f3c4c4b","status":"passed","time":{"start":1755777886651,"stop":1755777888658,"duration":2007}},{"uid":"71e4856b97fda90d","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/71e4856b97fda90d","status":"passed","time":{"start":1755774524056,"stop":1755774525974,"duration":1918}},{"uid":"9075418be32e94d6","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/9075418be32e94d6","status":"passed","time":{"start":1755694656648,"stop":1755694659378,"duration":2730}},{"uid":"3f9f8d4c807ab3a","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/3f9f8d4c807ab3a","status":"passed","time":{"start":1755694087367,"stop":1755694089603,"duration":2236}},{"uid":"14b033f135a3466c","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/14b033f135a3466c","status":"passed","time":{"start":1755687156816,"stop":1755687158502,"duration":1686}}]},"tags":["backend"]},"source":"5e8aafaafbb2bfff.json","parameterValues":["'guest_client'","'main_space'","'member_client'","200","'Space'"]}