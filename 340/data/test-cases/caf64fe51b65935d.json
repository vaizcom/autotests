{"uid":"caf64fe51b65935d","name":"Повторное удаление одного токена возвращает корректную ошибку (например, 404 Not Found)","fullName":"tests.test_backend.personal_access_tokens.test_delete_pat#test_delete_personal_access_token_twice","historyId":"d9b5faecf3fdab73e56ce3c433960525","time":{"start":1759744093801,"stop":1759744094233,"duration":432},"status":"failed","statusMessage":"AssertionError: Не удалось создать токен: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2109fa9790>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @allure.title(\"Повторное удаление одного токена возвращает корректную ошибку (например, 404 Not Found)\")\n    def test_delete_personal_access_token_twice(owner_client, main_space):\n        # 1. Создать токен\n        token_name = f\"double_delete_{datetime.now().strftime('%H%M%S')}\"\n        with allure.step(\"Создаем access-токен\"):\n            resp = create_token(owner_client.token, main_space, token_name)\n>           assert resp.status_code == 200, f\"Не удалось создать токен: {resp.text}\"\nE           AssertionError: Не удалось создать токен: <!DOCTYPE html>\nE             <html lang=\"en\">\nE             <head>\nE             <meta charset=\"utf-8\">\nE             <title>Error</title>\nE             </head>\nE             <body>\nE             <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\nE             </body>\nE             </html>\nE             \nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_backend/personal_access_tokens/test_delete_pat.py:56: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759743678061,"stop":1759743678696,"duration":635},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759743678061,"stop":1759743678061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759743678696,"stop":1759743679363,"duration":667},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759743680109,"stop":1759743680673,"duration":564},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Не удалось создать токен: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f2109fa9790>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @allure.title(\"Повторное удаление одного токена возвращает корректную ошибку (например, 404 Not Found)\")\n    def test_delete_personal_access_token_twice(owner_client, main_space):\n        # 1. Создать токен\n        token_name = f\"double_delete_{datetime.now().strftime('%H%M%S')}\"\n        with allure.step(\"Создаем access-токен\"):\n            resp = create_token(owner_client.token, main_space, token_name)\n>           assert resp.status_code == 200, f\"Не удалось создать токен: {resp.text}\"\nE           AssertionError: Не удалось создать токен: <!DOCTYPE html>\nE             <html lang=\"en\">\nE             <head>\nE             <meta charset=\"utf-8\">\nE             <title>Error</title>\nE             </head>\nE             <body>\nE             <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\nE             </body>\nE             </html>\nE             \nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_backend/personal_access_tokens/test_delete_pat.py:56: AssertionError","steps":[{"name":"Создаем access-токен","time":{"start":1759744093801,"stop":1759744094232,"duration":431},"status":"failed","statusMessage":"AssertionError: Не удалось создать токен: <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <title>Error</title>\n  </head>\n  <body>\n  <pre>Cannot POST /v4/CreatePersonalAccessToken</pre>\n  </body>\n  </html>\n  \nassert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/personal_access_tokens/test_delete_pat.py\", line 56, in test_delete_personal_access_token_twice\n    assert resp.status_code == 200, f\"Не удалось создать токен: {resp.text}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.personal_access_tokens"},{"name":"suite","value":"test_delete_pat"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2543-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.personal_access_tokens.test_delete_pat"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["backend"]},"source":"caf64fe51b65935d.json","parameterValues":[]}