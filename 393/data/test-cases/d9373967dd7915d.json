{"uid":"d9373967dd7915d","name":"Проверка доступа к документу в Project для роли member","fullName":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles#test_get_project_and_space_doc_access_by_roles","historyId":"7096e8654b14b3e3813d976ca0b54894","time":{"start":1761747841493,"stop":1761747841674,"duration":181},"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\nдля проверки разных типов клиентов и контейнеров документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-member]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'member_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7ff3c6cb0cc0>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761747760278,"stop":1761747760278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761747760278,"stop":1761747760906,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761747765139,"stop":1761747765458,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761747765458,"stop":1761747765749,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761747765749,"stop":1761747766336,"duration":587},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761747767429,"stop":1761747768079,"duration":650},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1761747841493,"stop":1761747841493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[project_doc-member]>>\nkind = 'Project', container_fixture = 'main_project'\nclient_fixture = 'member_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7ff3c6cb0cc0>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Project', kind_id = '686672af85fb8d104544e798'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем owner: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документу в Project","time":{"start":1761747841493,"stop":1761747841493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Project разными ролями","time":{"start":1761747841493,"stop":1761747841673,"duration":180},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1761747841493,"stop":1761747841673,"duration":180},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1761747841681,"stop":1761747841681,"duration":0},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1761747841681,"stop":1761747841681,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"container_fixture","value":"'main_project'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Project'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"85b273b3cc64e421","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/85b273b3cc64e421","status":"passed","time":{"start":1761746755344,"stop":1761746756785,"duration":1441}},{"uid":"e9461a2aec4cd80f","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/e9461a2aec4cd80f","status":"failed","statusDetails":"AssertionError: Ошибка при создании документа пользователем owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745690671,"stop":1761745690791,"duration":120}},{"uid":"9dd5eaf6ce6714d1","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/9dd5eaf6ce6714d1","status":"passed","time":{"start":1761576608763,"stop":1761576610140,"duration":1377}},{"uid":"cd4d1dc231e6f8c9","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/cd4d1dc231e6f8c9","status":"passed","time":{"start":1761557264076,"stop":1761557265378,"duration":1302}},{"uid":"760d169a50bb4a36","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/760d169a50bb4a36","status":"passed","time":{"start":1761308489512,"stop":1761308490940,"duration":1428}},{"uid":"7c96f927fbae7d79","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/7c96f927fbae7d79","status":"passed","time":{"start":1761306640272,"stop":1761306641917,"duration":1645}},{"uid":"581b9669e1552c11","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/581b9669e1552c11","status":"passed","time":{"start":1761136936930,"stop":1761136938309,"duration":1379}},{"uid":"159a93cd4278fa2d","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/159a93cd4278fa2d","status":"passed","time":{"start":1761135601377,"stop":1761135603423,"duration":2046}},{"uid":"294853f1d751c302","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/294853f1d751c302","status":"passed","time":{"start":1761134047984,"stop":1761134049304,"duration":1320}},{"uid":"9d2fd4634a25439c","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/9d2fd4634a25439c","status":"passed","time":{"start":1761128377712,"stop":1761128379337,"duration":1625}},{"uid":"9a44161df04bb94","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/9a44161df04bb94","status":"passed","time":{"start":1761124487284,"stop":1761124488907,"duration":1623}},{"uid":"7647619fda2be54c","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/7647619fda2be54c","status":"passed","time":{"start":1761119314712,"stop":1761119316086,"duration":1374}},{"uid":"351287e516db1f5f","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/351287e516db1f5f","status":"passed","time":{"start":1761053350620,"stop":1761053351891,"duration":1271}},{"uid":"e6c8b4986dc891f7","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/e6c8b4986dc891f7","status":"passed","time":{"start":1761047242340,"stop":1761047244207,"duration":1867}},{"uid":"c67388f4d15407d2","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/c67388f4d15407d2","status":"passed","time":{"start":1760614659250,"stop":1760614660780,"duration":1530}},{"uid":"85a1c2a19e0e1210","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/85a1c2a19e0e1210","status":"passed","time":{"start":1760599458558,"stop":1760599459994,"duration":1436}},{"uid":"9382f6889d6a20c0","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/9382f6889d6a20c0","status":"passed","time":{"start":1760535488552,"stop":1760535489884,"duration":1332}},{"uid":"f020fac74b06f1e3","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/f020fac74b06f1e3","status":"passed","time":{"start":1760533963329,"stop":1760533965798,"duration":2469}},{"uid":"ca70399b64507db4","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/ca70399b64507db4","status":"passed","time":{"start":1760532524856,"stop":1760532526194,"duration":1338}},{"uid":"57d69a8da4708ddf","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/57d69a8da4708ddf","status":"passed","time":{"start":1760529338566,"stop":1760529341866,"duration":3300}}]},"tags":["backend"]},"source":"d9373967dd7915d.json","parameterValues":["'member_client'","'main_project'","200","'Project'"]}