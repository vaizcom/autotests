{"uid":"d4916bf080382af","name":"Создание документа в роли owner - с передачей kind=Space и kindId (ожидается 200)","fullName":"tests.test_backend.document.test_create_document#test_document_kind_and_id","historyId":"7f7027c0a8ae5177d6ab8ca3225f2ab3","time":{"start":1759837448776,"stop":1759837448953,"duration":177},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\nrequest = <FixtureRequest for <Function test_document_kind_and_id[space]>>\nkind = 'Space', get_fixture = 'temp_space', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'kind, get_fixture, expected_status',\n        [\n            ('Project', 'temp_project', 200),\n            ('Space', 'temp_space', 200),\n            ('Member', 'temp_member', 200),\n            ('WrongKind', 'temp_project', 400),\n            ('Project', 'nonexistent_id', 400),\n        ],\n        ids=['project', 'space', 'member', 'wrong kind', 'wrong id'],\n    )\n    def test_document_kind_and_id(owner_client, temp_space, request, kind, get_fixture, expected_status):\n        allure.dynamic.title(\n            f'Создание документа в роли owner - с передачей kind={kind} и kindId (ожидается {expected_status})'\n        )\n    \n        kind_id = request.getfixturevalue(get_fixture) if get_fixture != 'nonexistent_id' else 'invalid_id'\n    \n        with allure.step(\n            f'Создание документа Оунером с передачей kind={kind} и kindId={kind_id}  (ожидается {expected_status})'\n        ):\n            response = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Kind Test')\n            )\n    \n        with allure.step('Проверка статус-кода ответа'):\n>           assert response.status_code == expected_status\nE           assert 503 == 200\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_create_document.py:188: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1759837145756,"stop":1759837145756,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759837147179,"stop":1759837147495,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1759837154550,"stop":1759837155711,"duration":1161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7f0d403af650>\ntemp_space = '68e4fbe2e49ce50caff67b74'\nrequest = <FixtureRequest for <Function test_document_kind_and_id[space]>>\nkind = 'Space', get_fixture = 'temp_space', expected_status = 200\n\n    @pytest.mark.parametrize(\n        'kind, get_fixture, expected_status',\n        [\n            ('Project', 'temp_project', 200),\n            ('Space', 'temp_space', 200),\n            ('Member', 'temp_member', 200),\n            ('WrongKind', 'temp_project', 400),\n            ('Project', 'nonexistent_id', 400),\n        ],\n        ids=['project', 'space', 'member', 'wrong kind', 'wrong id'],\n    )\n    def test_document_kind_and_id(owner_client, temp_space, request, kind, get_fixture, expected_status):\n        allure.dynamic.title(\n            f'Создание документа в роли owner - с передачей kind={kind} и kindId (ожидается {expected_status})'\n        )\n    \n        kind_id = request.getfixturevalue(get_fixture) if get_fixture != 'nonexistent_id' else 'invalid_id'\n    \n        with allure.step(\n            f'Создание документа Оунером с передачей kind={kind} и kindId={kind_id}  (ожидается {expected_status})'\n        ):\n            response = owner_client.post(\n                **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=temp_space, title='Kind Test')\n            )\n    \n        with allure.step('Проверка статус-кода ответа'):\n>           assert response.status_code == expected_status\nE           assert 503 == 200\nE            +  where 503 = <Response [503]>.status_code\n\ntests/test_backend/document/test_create_document.py:188: AssertionError","steps":[{"name":"Создание документа Оунером с передачей kind=Space и kindId=68e4fbe2e49ce50caff67b74  (ожидается 200)","time":{"start":1759837448776,"stop":1759837448953,"duration":177},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статус-кода ответа","time":{"start":1759837448953,"stop":1759837448953,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 503 == 200\n +  where 503 = <Response [503]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_create_document.py\", line 188, in test_document_kind_and_id\n    assert response.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_space::0","time":{"start":1759837469360,"stop":1759837469533,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_create_document"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2583-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_create_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"200"},{"name":"get_fixture","value":"'temp_space'"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"ce43402b8e72b1dc","reportUrl":"https://vaizcom.github.io/autotests/355//#testresult/ce43402b8e72b1dc","status":"passed","time":{"start":1759836249442,"stop":1759836249795,"duration":353}},{"uid":"def6a25853fd4224","reportUrl":"https://vaizcom.github.io/autotests/354//#testresult/def6a25853fd4224","status":"passed","time":{"start":1759835613040,"stop":1759835613272,"duration":232}},{"uid":"ba5a6ac6a5b9fd75","reportUrl":"https://vaizcom.github.io/autotests/353//#testresult/ba5a6ac6a5b9fd75","status":"passed","time":{"start":1759834721149,"stop":1759834721436,"duration":287}}]},"tags":["backend"]},"source":"d4916bf080382af.json","parameterValues":["200","'temp_space'","'Space'"]}