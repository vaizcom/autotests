{"uid":"7e032ad05e9e87f7","name":"Проверка доступа с некорректным ID документа","fullName":"tests.test_backend.document.access_doc.test_matrix_access_docs#test_access_with_invalid_ids","historyId":"d693a5a165c952fab521505229b2fb23","time":{"start":1761910613239,"stop":1761910613352,"duration":113},"description":"\n    Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n    ","descriptionHtml":"<pre><code>Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fce4b119550>\ndocument_id = 'invalid-id-789', space_id = 'invalid-space-id'\nexpected_status = 400, expected_error_code = 'InvalidForm'\n\n    @allure.title('Проверка доступа с некорректным ID документа')\n    @pytest.mark.parametrize(\n        'document_id, space_id, expected_status, expected_error_code',\n        [\n            ('invalid-id-123', 'valid-space-id', 400, 'InvalidForm'),\n            ('valid-document-id', 'invalid-space-id-456', 400, 'InvalidForm'),\n            ('invalid-id-789', 'invalid-space-id', 400, 'InvalidForm'),\n        ],\n        ids=['invalid document_id', 'invalid space_id', 'invalid both'],\n    )\n    def test_access_with_invalid_ids(owner_client, document_id, space_id, expected_status, expected_error_code):\n        \"\"\"\n        Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n        \"\"\"\n        with allure.step(f'Попытка получить доступ к документу {document_id} в пространстве {space_id}'):\n            response = owner_client.post(**get_document_endpoint(document_id=document_id, space_id=space_id))\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status} и ошибка соответствующая'):\n            assert response.status_code == expected_status, f'Ожидался статус {expected_status}, получен {response.status_code}'\n            error = response.json().get('error')\n>           assert error.get(\n                'code') == expected_error_code, f\"Ожидался код ошибки '{expected_error_code}', получен: {error.get('code')}\"\nE           AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nE           assert 'JwtDoesNotExits' == 'InvalidForm'\nE             \nE             - InvalidForm\nE             + JwtDoesNotExits\n\ntests/test_backend/document/access_doc/test_matrix_access_docs.py:119: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761910495818,"stop":1761910495819,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761910495818,"stop":1761910495818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761910495819,"stop":1761910496047,"duration":228},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n    ","status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fce4b119550>\ndocument_id = 'invalid-id-789', space_id = 'invalid-space-id'\nexpected_status = 400, expected_error_code = 'InvalidForm'\n\n    @allure.title('Проверка доступа с некорректным ID документа')\n    @pytest.mark.parametrize(\n        'document_id, space_id, expected_status, expected_error_code',\n        [\n            ('invalid-id-123', 'valid-space-id', 400, 'InvalidForm'),\n            ('valid-document-id', 'invalid-space-id-456', 400, 'InvalidForm'),\n            ('invalid-id-789', 'invalid-space-id', 400, 'InvalidForm'),\n        ],\n        ids=['invalid document_id', 'invalid space_id', 'invalid both'],\n    )\n    def test_access_with_invalid_ids(owner_client, document_id, space_id, expected_status, expected_error_code):\n        \"\"\"\n        Проверяет, что запросы с некорректными document_id или space_id вызывают ошибку.\n        \"\"\"\n        with allure.step(f'Попытка получить доступ к документу {document_id} в пространстве {space_id}'):\n            response = owner_client.post(**get_document_endpoint(document_id=document_id, space_id=space_id))\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status} и ошибка соответствующая'):\n            assert response.status_code == expected_status, f'Ожидался статус {expected_status}, получен {response.status_code}'\n            error = response.json().get('error')\n>           assert error.get(\n                'code') == expected_error_code, f\"Ожидался код ошибки '{expected_error_code}', получен: {error.get('code')}\"\nE           AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nE           assert 'JwtDoesNotExits' == 'InvalidForm'\nE             \nE             - InvalidForm\nE             + JwtDoesNotExits\n\ntests/test_backend/document/access_doc/test_matrix_access_docs.py:119: AssertionError","steps":[{"name":"Попытка получить доступ к документу invalid-id-789 в пространстве invalid-space-id","time":{"start":1761910613239,"stop":1761910613351,"duration":112},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что статус ответа = 400 и ошибка соответствующая","time":{"start":1761910613351,"stop":1761910613352,"duration":1},"status":"failed","statusMessage":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_matrix_access_docs.py\", line 119, in test_access_with_invalid_ids\n    assert error.get(\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_matrix_access_docs"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2557-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_matrix_access_docs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"document_id","value":"'invalid-id-789'"},{"name":"expected_error_code","value":"'InvalidForm'"},{"name":"expected_status","value":"400"},{"name":"space_id","value":"'invalid-space-id'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":51},"items":[{"uid":"d5f7547baf4fac13","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/d5f7547baf4fac13","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761910004784,"stop":1761910004961,"duration":177}},{"uid":"c2fb69405eaf89bc","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/c2fb69405eaf89bc","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761900036437,"stop":1761900036610,"duration":173}},{"uid":"edb864230ea0faf3","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/edb864230ea0faf3","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761835057211,"stop":1761835057326,"duration":115}},{"uid":"18e690104f2f8555","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/18e690104f2f8555","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761834641529,"stop":1761834641704,"duration":175}},{"uid":"f2edf9abf55cf70d","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/f2edf9abf55cf70d","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761833477597,"stop":1761833477819,"duration":222}},{"uid":"6bb3eb213e4ede8f","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/6bb3eb213e4ede8f","status":"passed","time":{"start":1761821705810,"stop":1761821705943,"duration":133}},{"uid":"99c48a40651e18e0","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/99c48a40651e18e0","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761818765874,"stop":1761818766045,"duration":171}},{"uid":"ffd5ebfee6b42005","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ffd5ebfee6b42005","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761748629864,"stop":1761748629984,"duration":120}},{"uid":"ed93722fead7db6f","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ed93722fead7db6f","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761747905210,"stop":1761747905394,"duration":184}},{"uid":"9a40a7a3eeb5b1b3","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/9a40a7a3eeb5b1b3","status":"passed","time":{"start":1761746870744,"stop":1761746870988,"duration":244}},{"uid":"34ea6eb7a46099d9","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/34ea6eb7a46099d9","status":"failed","statusDetails":"AssertionError: Ожидался код ошибки 'InvalidForm', получен: JwtDoesNotExits\nassert 'JwtDoesNotExits' == 'InvalidForm'\n  \n  - InvalidForm\n  + JwtDoesNotExits","time":{"start":1761745737881,"stop":1761745738001,"duration":120}},{"uid":"cc5382a5f463514b","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/cc5382a5f463514b","status":"passed","time":{"start":1761576711818,"stop":1761576711980,"duration":162}},{"uid":"899996947e0f3e62","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/899996947e0f3e62","status":"passed","time":{"start":1761557362299,"stop":1761557362434,"duration":135}},{"uid":"6579db4d5cd05f6","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/6579db4d5cd05f6","status":"passed","time":{"start":1761308586436,"stop":1761308586583,"duration":147}},{"uid":"4acb01318c7a4b82","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/4acb01318c7a4b82","status":"passed","time":{"start":1761306747891,"stop":1761306748035,"duration":144}},{"uid":"76cb51cc69beb503","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/76cb51cc69beb503","status":"passed","time":{"start":1761137040869,"stop":1761137041020,"duration":151}},{"uid":"93df3c64422ac0d","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/93df3c64422ac0d","status":"passed","time":{"start":1761135717960,"stop":1761135718147,"duration":187}},{"uid":"13a5d1e0ea785b26","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/13a5d1e0ea785b26","status":"passed","time":{"start":1761134145452,"stop":1761134145592,"duration":140}},{"uid":"21310165ce9b1727","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/21310165ce9b1727","status":"passed","time":{"start":1761128506321,"stop":1761128506525,"duration":204}},{"uid":"d883ba83d59ce95c","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/d883ba83d59ce95c","status":"passed","time":{"start":1761124618754,"stop":1761124618961,"duration":207}}]},"tags":["backend"]},"source":"7e032ad05e9e87f7.json","parameterValues":["'invalid-id-789'","'InvalidForm'","400","'invalid-space-id'"]}