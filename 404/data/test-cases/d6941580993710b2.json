{"uid":"d6941580993710b2","name":"Проверка доступа к siblings персонального документа: создатель - guest, просматривающий - owner","fullName":"tests.test_backend.document.access_doc.test_get_siblings_doc_access#test_get_personal_siblings_docs_access_by_roles","historyId":"f38fe6009e2005eae7e867c91ece680f","time":{"start":1761912179860,"stop":1761912180762,"duration":902},"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","descriptionHtml":"<pre><code>Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n- Создателя документа\n- Просматривающего пользователя\n\nПроверки:\n    1. Создание трёх последовательных документов указанной ролью\n    2. Запрос siblings для среднего документа другой ролью\n    3. Проверка статуса ответа и корректности данных siblings\n\nОсобенность: к персональным документам имеет доступ только их владелец\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[guest_docs_by_owner_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'guest_client', client_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n>           assert siblings_resp.status_code == expected_status\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:208: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761912073100,"stop":1761912073100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761912073100,"stop":1761912073571,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761912076138,"stop":1761912076602,"duration":464},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761912076602,"stop":1761912076805,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761912078751,"stop":1761912078998,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_personal","time":{"start":1761912085060,"stop":1761912085493,"duration":433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n    - Создателя документа\n    - Просматривающего пользователя\n\n    Проверки:\n        1. Создание трёх последовательных документов указанной ролью\n        2. Запрос siblings для среднего документа другой ролью\n        3. Проверка статуса ответа и корректности данных siblings\n\n    Особенность: к персональным документам имеет доступ только их владелец\n    ","status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_personal_siblings_docs_access_by_roles[guest_docs_by_owner_403]>>\nmain_space = '6866309d85fb8d104544a61e'\nmain_personal = {'guest': ['686630dd85fb8d104544aac8'], 'manager': ['6866313985fb8d104544ab6c'], 'member': ['6866310b85fb8d104544ab1d'], 'owner': ['6866346d85fb8d104544ae41']}\ncreator_fixture = 'guest_client', client_fixture = 'owner_client'\nexpected_status = 403\n\n    @pytest.mark.parametrize(\n        'creator_fixture, client_fixture, expected_status',\n        [\n            # Owner's personal documents\n            ('owner_client', 'owner_client', 200),  # владелец смотрит свои документы\n            ('owner_client', 'manager_client', 403),  # менеджер пытается смотреть документы владельца\n            ('owner_client', 'member_client', 403),  # участник пытается смотреть документы владельца\n            ('owner_client', 'guest_client', 403),  # гость пытается смотреть документы владельца\n            # Manager's personal documents\n            ('manager_client', 'owner_client', 403),  # владелец пытается смотреть документы менеджера\n            ('manager_client', 'manager_client', 200),  # менеджер смотрит свои документы\n            ('manager_client', 'member_client', 403),  # участник пытается смотреть документы менеджера\n            ('manager_client', 'guest_client', 403),  # гость пытается смотреть документы менеджера\n            # Member's personal documents\n            ('member_client', 'owner_client', 403),  # владелец пытается смотреть документы участника\n            ('member_client', 'manager_client', 403),  # менеджер пытается смотреть документы участника\n            ('member_client', 'member_client', 200),  # участник смотрит свои документы\n            ('member_client', 'guest_client', 403),  # гость пытается смотреть документы участника\n            # Guest's personal documents\n            ('guest_client', 'owner_client', 403),  # владелец пытается смотреть документы гостя\n            ('guest_client', 'manager_client', 403),  # менеджер пытается смотреть документы гостя\n            ('guest_client', 'member_client', 403),  # участник пытается смотреть документы гостя\n            ('guest_client', 'guest_client', 200),  # гость смотрит свои документы\n        ],\n        ids=[\n            'owner_self_docs_200',\n            'owner_docs_by_manager_403',\n            'owner_docs_by_member_403',\n            'owner_docs_by_guest_403',\n            'manager_docs_by_owner_403',\n            'manager_self_docs_200',\n            'manager_docs_by_member_403',\n            'manager_docs_by_guest_403',\n            'member_docs_by_owner_403',\n            'member_docs_by_manager_403',\n            'member_self_docs_200',\n            'member_docs_by_guest_403',\n            'guest_docs_by_owner_403',\n            'guest_docs_by_manager_403',\n            'guest_docs_by_member_403',\n            'guest_self_docs_200',\n        ],\n    )\n    def test_get_personal_siblings_docs_access_by_roles(\n        request, main_space, main_personal, creator_fixture, client_fixture, expected_status\n    ):\n        \"\"\"\n        Проверяет доступ к siblings персональных (Member) документов при разных комбинациях:\n        - Создателя документа\n        - Просматривающего пользователя\n    \n        Проверки:\n            1. Создание трёх последовательных документов указанной ролью\n            2. Запрос siblings для среднего документа другой ролью\n            3. Проверка статуса ответа и корректности данных siblings\n    \n        Особенность: к персональным документам имеет доступ только их владелец\n        \"\"\"\n        creator = request.getfixturevalue(creator_fixture)\n        viewer = request.getfixturevalue(client_fixture)\n        creator_role = creator_fixture.replace('_client', '')\n        viewer_role = client_fixture.replace('_client', '')\n    \n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n    \n        allure.dynamic.title(\n            f'Проверка доступа к siblings персонального документа: создатель - {creator_role}, просматривающий - {viewer_role}'\n        )\n    \n        doc_ids = []\n        with allure.step(f'Создание трёх персональных документов пользователем {creator_role}'):\n            for index in range(3):\n                title = f'{current_date}_{creator_role}_Member_Doc_{index}'\n                create_resp = creator.post(\n                    **create_document_endpoint(\n                        kind='Member', kind_id=main_personal[creator_role][0], space_id=main_space, title=title\n                    )\n                )\n                assert (\n                    create_resp.status_code == 200\n                ), f'Ошибка при создании документа {index}: статус {create_resp.status_code}'\n                doc_id = create_resp.json()['payload']['document']['_id']\n                doc_ids.append(doc_id)\n    \n        middle_doc_id = doc_ids[1]\n        with allure.step(f'Попытка получения siblings для среднего документа пользователем {viewer_role}'):\n            siblings_resp = viewer.post(**get_document_siblings_endpoint(document_id=middle_doc_id, space_id=main_space))\n>           assert siblings_resp.status_code == expected_status\nE           assert 400 == 403\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_get_siblings_doc_access.py:208: AssertionError","steps":[{"name":"Создание трёх персональных документов пользователем guest","time":{"start":1761912179860,"stop":1761912180630,"duration":770},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Попытка получения siblings для среднего документа пользователем owner","time":{"start":1761912180630,"stop":1761912180762,"duration":132},"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_get_siblings_doc_access.py\", line 208, in test_get_personal_siblings_docs_access_by_roles\n    assert siblings_resp.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_siblings_doc_access"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2535-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_siblings_doc_access"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'owner_client'"},{"name":"creator_fixture","value":"'guest_client'"},{"name":"expected_status","value":"403"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":41,"unknown":0,"total":54},"items":[{"uid":"4a95332cdb38f514","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/4a95332cdb38f514","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761911290770,"stop":1761911291744,"duration":974}},{"uid":"7f74c9458eedf065","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/7f74c9458eedf065","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910904707,"stop":1761910905481,"duration":774}},{"uid":"99be8380cf0316f1","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/99be8380cf0316f1","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761910605182,"stop":1761910606110,"duration":928}},{"uid":"92d21c3e95bd6eb5","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/92d21c3e95bd6eb5","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761909994921,"stop":1761909995962,"duration":1041}},{"uid":"2030edceb438b713","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/2030edceb438b713","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761900025803,"stop":1761900026831,"duration":1028}},{"uid":"32d6dfecfd3fdcc7","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/32d6dfecfd3fdcc7","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761835049883,"stop":1761835050752,"duration":869}},{"uid":"1394fefdcc017666","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/1394fefdcc017666","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761834630933,"stop":1761834632598,"duration":1665}},{"uid":"badeb33284932c07","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/badeb33284932c07","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761833466165,"stop":1761833468259,"duration":2094}},{"uid":"d37d5e34d0d450d","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/d37d5e34d0d450d","status":"passed","time":{"start":1761821690007,"stop":1761821691352,"duration":1345}},{"uid":"206830629e2279d0","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/206830629e2279d0","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761818756527,"stop":1761818757510,"duration":983}},{"uid":"a45fef10d65c453e","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/a45fef10d65c453e","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761748621027,"stop":1761748621937,"duration":910}},{"uid":"94f9cb1d4b4bd9a3","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/94f9cb1d4b4bd9a3","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761747894442,"stop":1761747895750,"duration":1308}},{"uid":"f6a111394ba44ab3","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/f6a111394ba44ab3","status":"passed","time":{"start":1761746852653,"stop":1761746854288,"duration":1635}},{"uid":"fa706e50c8289378","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/fa706e50c8289378","status":"failed","statusDetails":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745730321,"stop":1761745731281,"duration":960}},{"uid":"2ec454a46fc0c050","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2ec454a46fc0c050","status":"passed","time":{"start":1761576694460,"stop":1761576695960,"duration":1500}},{"uid":"347d37155cb5844f","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/347d37155cb5844f","status":"passed","time":{"start":1761557347044,"stop":1761557348564,"duration":1520}},{"uid":"a118596c990ff8d6","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/a118596c990ff8d6","status":"passed","time":{"start":1761308571192,"stop":1761308572675,"duration":1483}},{"uid":"374595bc553982b1","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/374595bc553982b1","status":"passed","time":{"start":1761306731956,"stop":1761306733533,"duration":1577}},{"uid":"dee39b571fe701cf","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/dee39b571fe701cf","status":"passed","time":{"start":1761137025219,"stop":1761137026834,"duration":1615}},{"uid":"877daff2a2994cf3","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/877daff2a2994cf3","status":"passed","time":{"start":1761135700101,"stop":1761135701886,"duration":1785}}]},"tags":["backend"]},"source":"d6941580993710b2.json","parameterValues":["'owner_client'","'guest_client'","403"]}