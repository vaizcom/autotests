{"uid":"eb6a4772adb81861","name":"Архивирование Space-документа для роли member","fullName":"tests.test_backend.document.access_doc.test_archive_doc#test_archive_space_doc","historyId":"caa1f26fa1c2a34ffa0bd86c8c25ea11","time":{"start":1761745638094,"stop":1761745638214,"duration":120},"description":"\n    Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\n    Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n    и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n    Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n    Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n    с использованием случайного клиента с повышенными правами.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\nТест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\nи оценивает возможность архивации документа на основе предоставленной роли client_fixture.\nПроверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\nДополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\nс использованием случайного клиента с повышенными правами.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n    \n        Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n        и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n        Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n        Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n        с использованием случайного клиента с повышенными правами.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:56: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761745626380,"stop":1761745626380,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761745626380,"stop":1761745626628,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761745631754,"stop":1761745632203,"duration":449},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761745632203,"stop":1761745632603,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761745634098,"stop":1761745634516,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n\n    Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n    и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n    Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n    Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n    с использованием случайного клиента с повышенными правами.\n    ","status":"failed","statusMessage":"AssertionError: assert 200 == 403","statusTrace":"request = <FixtureRequest for <Function test_archive_space_doc[member]>>\nmain_space = '6866309d85fb8d104544a61e', client_fixture = 'member_client'\nexpected_status = 200\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_archive_space_doc(request, main_space, client_fixture, expected_status):\n        \"\"\"\n        Проверяет функциональность архивации Space-документа с разными ролями и уровнями доступа.\n    \n        Тест создает Space-документ, используя случайного клиента с повышенными правами (владелец, менеджер или участник),\n        и оценивает возможность архивации документа на основе предоставленной роли client_fixture.\n        Проверяется, что возвращаются корректные коды состояния в зависимости от прав пользователя.\n        Дополнительно, в случаях, когда доступ запрещен и ожидаемый статус 403, документ архивируется после теста\n        с использованием случайного клиента с повышенными правами.\n        \"\"\"\n        api_client = request.getfixturevalue(client_fixture)\n        role = client_fixture.replace('_client', '')\n        current_date = datetime.now().strftime('%d.%m_%H:%M:%S')\n        title = f'{current_date} Space Doc For Archive Check'\n    \n        allure.dynamic.title(f'Архивирование Space-документа для роли {role}')\n    \n        selected_client_name = random.choice(['owner_client', 'manager_client', 'member_client'])\n        random_client = request.getfixturevalue(selected_client_name)\n    \n        with allure.step(\n            f'Случайный клиент({selected_client_name}) создаёт Space-документ для архивации (title = {title})'\n        ):\n            create_resp = random_client.post(\n                **create_document_endpoint(kind='Space', kind_id=main_space, space_id=main_space, title=title)\n            )\n    \n            if create_resp.status_code != 200:\n                with allure.step(\n                    f'Не удалось создать документ, статус {create_resp.status_code} — пропуск проверки списка'\n                ):\n>                   assert expected_status == 403\nE                   assert 200 == 403\n\ntests/test_backend/document/access_doc/test_archive_doc.py:56: AssertionError","steps":[{"name":"Случайный клиент(owner_client) создаёт Space-документ для архивации (title = 29.10_13:47:18 Space Doc For Archive Check)","time":{"start":1761745638094,"stop":1761745638213,"duration":119},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 56, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[{"name":"Не удалось создать документ, статус 400 — пропуск проверки списка","time":{"start":1761745638213,"stop":1761745638213,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_archive_doc.py\", line 56, in test_archive_space_doc\n    assert expected_status == 403\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_archive_doc"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2534-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_archive_doc"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":39,"unknown":0,"total":40},"items":[{"uid":"2b6b28b3faff4950","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/2b6b28b3faff4950","status":"passed","time":{"start":1761576502181,"stop":1761576502810,"duration":629}},{"uid":"ba4509cbb1071e55","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/ba4509cbb1071e55","status":"passed","time":{"start":1761557158389,"stop":1761557159166,"duration":777}},{"uid":"e5f6f780b130805c","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/e5f6f780b130805c","status":"passed","time":{"start":1761308383150,"stop":1761308383954,"duration":804}},{"uid":"a5029c2d7c3a22ae","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/a5029c2d7c3a22ae","status":"passed","time":{"start":1761306530832,"stop":1761306531495,"duration":663}},{"uid":"68b4813e6ae871b5","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/68b4813e6ae871b5","status":"passed","time":{"start":1761136825284,"stop":1761136826213,"duration":929}},{"uid":"af83bce7e9178574","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/af83bce7e9178574","status":"passed","time":{"start":1761135478798,"stop":1761135479745,"duration":947}},{"uid":"29d868d0b04e46e9","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/29d868d0b04e46e9","status":"passed","time":{"start":1761133942633,"stop":1761133943272,"duration":639}},{"uid":"af01e5cd9626440f","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/af01e5cd9626440f","status":"passed","time":{"start":1761128243893,"stop":1761128244704,"duration":811}},{"uid":"fa62eb7c303a7d65","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/fa62eb7c303a7d65","status":"passed","time":{"start":1761124349334,"stop":1761124350962,"duration":1628}},{"uid":"f96c5a081cb04edc","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/f96c5a081cb04edc","status":"passed","time":{"start":1761119199714,"stop":1761119200377,"duration":663}},{"uid":"805bd94b34a787c6","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/805bd94b34a787c6","status":"passed","time":{"start":1761053242365,"stop":1761053243163,"duration":798}},{"uid":"50d41319ea30aa78","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/50d41319ea30aa78","status":"passed","time":{"start":1761047130635,"stop":1761047131487,"duration":852}},{"uid":"9317592a510a1af4","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/9317592a510a1af4","status":"passed","time":{"start":1760614537245,"stop":1760614538017,"duration":772}},{"uid":"e1d26bcbc1067ac7","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/e1d26bcbc1067ac7","status":"passed","time":{"start":1760599339245,"stop":1760599340532,"duration":1287}},{"uid":"99320894eb323e26","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/99320894eb323e26","status":"passed","time":{"start":1760535374703,"stop":1760535375529,"duration":826}},{"uid":"cc3823019798ab94","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/cc3823019798ab94","status":"passed","time":{"start":1760533817259,"stop":1760533818981,"duration":1722}},{"uid":"3d58b59a0c36fb4a","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/3d58b59a0c36fb4a","status":"passed","time":{"start":1760532410446,"stop":1760532411080,"duration":634}},{"uid":"769955586fba5863","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/769955586fba5863","status":"passed","time":{"start":1760529233820,"stop":1760529234428,"duration":608}},{"uid":"12b1d56521e610ce","reportUrl":"https://vaizcom.github.io/autotests/373//#testresult/12b1d56521e610ce","status":"passed","time":{"start":1760510599760,"stop":1760510600819,"duration":1059}},{"uid":"b611fe246b9b5ca0","reportUrl":"https://vaizcom.github.io/autotests/372//#testresult/b611fe246b9b5ca0","status":"passed","time":{"start":1760449129954,"stop":1760449130618,"duration":664}}]},"tags":["backend"]},"source":"eb6a4772adb81861.json","parameterValues":["'member_client'","200"]}