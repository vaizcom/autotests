{"uid":"44d53a0b1571bd85","name":"Создание документа — кейс: [empty string] (ожидается 200)","fullName":"tests.test_backend.document.test_create_document#test_document_title_validation","historyId":"3138287b64859e2cf0b114948ec5f7a3","time":{"start":1752481749229,"stop":1752481749497,"duration":268},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fbc7a871590>\ntemp_space = '6874bf400c9b6e0ea511a972'\ntemp_project = '6874bf430c9b6e0ea511a9fc', title = '', expected_status = 200\nexpected_actual_title = ''\nrequest = <FixtureRequest for <Function test_document_title_validation[empty string]>>\n\n    @pytest.mark.parametrize(\n        'title, expected_status, expected_actual_title',\n        [\n            (None, 200, 'Untitled document'),\n            ('', 200, ''),\n            (' ', 200, ' '),\n            ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),\n            ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),\n            # Дополнительно:\n            (123, 400, None),\n            (True, 400, None),\n            ([], 400, None),\n            ('Документ', 200, 'Документ'),\n            ('\uD83D\uDE0A\uD83D\uDCC4✨', 200, '\uD83D\uDE0A\uD83D\uDCC4✨'),\n            ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),\n            ('Title with & < > \" \\'', 200, 'Title with & < > \" \\''),\n        ],\n        ids=[\n            'None',\n            'empty string',\n            'single space',\n            'title = MAX length (2048)',\n            'title > MAX length (2049)',\n            'int as title',\n            'bool as title',\n            'list as title',\n            'cyrillic',\n            'emoji',\n            'html injection',\n            'special chars',\n        ],\n    )\n    @allure.title('Создание документа с различными значениями title — ожидаемый статус {expected_status}')\n    def test_document_title_validation(\n        owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request\n    ):\n        allure.dynamic.title(f'Создание документа — кейс: [{request.node.callspec.id}] (ожидается {expected_status})')\n    \n        with allure.step(f'Отправка запроса [{request.node.callspec.id}] (ожидается {expected_status})'):\n            response = owner_client.post(\n                **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)\n            )\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status}'):\n>           assert response.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/test_create_document.py:80: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1752481599781,"stop":1752481599781,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1752481599781,"stop":1752481599781,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1752481599782,"stop":1752481599782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1752481599782,"stop":1752481600317,"duration":535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1752481599782,"stop":1752481599782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space","time":{"start":1752481600317,"stop":1752481602248,"duration":1931},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_project","time":{"start":1752481602248,"stop":1752481603318,"duration":1070},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fbc7a871590>\ntemp_space = '6874bf400c9b6e0ea511a972'\ntemp_project = '6874bf430c9b6e0ea511a9fc', title = '', expected_status = 200\nexpected_actual_title = ''\nrequest = <FixtureRequest for <Function test_document_title_validation[empty string]>>\n\n    @pytest.mark.parametrize(\n        'title, expected_status, expected_actual_title',\n        [\n            (None, 200, 'Untitled document'),\n            ('', 200, ''),\n            (' ', 200, ' '),\n            ('A' * MAX_DOC_NAME_LENGTH, 200, 'A' * MAX_DOC_NAME_LENGTH),\n            ('A' * (MAX_DOC_NAME_LENGTH + 1), 400, None),\n            # Дополнительно:\n            (123, 400, None),\n            (True, 400, None),\n            ([], 400, None),\n            ('Документ', 200, 'Документ'),\n            ('\uD83D\uDE0A\uD83D\uDCC4✨', 200, '\uD83D\uDE0A\uD83D\uDCC4✨'),\n            ('<script>alert(1)</script>', 200, '<script>alert(1)</script>'),\n            ('Title with & < > \" \\'', 200, 'Title with & < > \" \\''),\n        ],\n        ids=[\n            'None',\n            'empty string',\n            'single space',\n            'title = MAX length (2048)',\n            'title > MAX length (2049)',\n            'int as title',\n            'bool as title',\n            'list as title',\n            'cyrillic',\n            'emoji',\n            'html injection',\n            'special chars',\n        ],\n    )\n    @allure.title('Создание документа с различными значениями title — ожидаемый статус {expected_status}')\n    def test_document_title_validation(\n        owner_client, temp_space, temp_project, title, expected_status, expected_actual_title, request\n    ):\n        allure.dynamic.title(f'Создание документа — кейс: [{request.node.callspec.id}] (ожидается {expected_status})')\n    \n        with allure.step(f'Отправка запроса [{request.node.callspec.id}] (ожидается {expected_status})'):\n            response = owner_client.post(\n                **create_document_endpoint(kind='Project', kind_id=temp_project, space_id=temp_space, title=title)\n            )\n    \n        with allure.step(f'Проверка, что статус ответа = {expected_status}'):\n>           assert response.status_code == expected_status\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/test_create_document.py:80: AssertionError","steps":[{"name":"Отправка запроса [empty string] (ожидается 200)","time":{"start":1752481749229,"stop":1752481749496,"duration":267},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка, что статус ответа = 200","time":{"start":1752481749496,"stop":1752481749497,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/test_create_document.py\", line 80, in test_document_title_validation\n    assert response.status_code == expected_status\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"temp_project::0","time":{"start":1752481913813,"stop":1752481913813,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"temp_space::0","time":{"start":1752481913814,"stop":1752481914579,"duration":765},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document"},{"name":"suite","value":"test_create_document"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2617-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.test_create_document"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_actual_title","value":"''"},{"name":"expected_status","value":"200"},{"name":"title","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":30,"unknown":0,"total":35},"items":[{"uid":"955f4c9964dd1876","reportUrl":"https://vaizcom.github.io/autotests/290//#testresult/955f4c9964dd1876","status":"passed","time":{"start":1752479795162,"stop":1752479795485,"duration":323}},{"uid":"cbf7da89b7d50a26","reportUrl":"https://vaizcom.github.io/autotests/289//#testresult/cbf7da89b7d50a26","status":"passed","time":{"start":1752477941644,"stop":1752477942003,"duration":359}},{"uid":"45a48d3dc000de51","reportUrl":"https://vaizcom.github.io/autotests/288//#testresult/45a48d3dc000de51","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752236810339,"stop":1752236810591,"duration":252}},{"uid":"b3a262bd5eccf650","reportUrl":"https://vaizcom.github.io/autotests/287//#testresult/b3a262bd5eccf650","status":"passed","time":{"start":1752236178668,"stop":1752236178982,"duration":314}},{"uid":"da3c57ddc1fbc3b9","reportUrl":"https://vaizcom.github.io/autotests/286//#testresult/da3c57ddc1fbc3b9","status":"passed","time":{"start":1752235433840,"stop":1752235434205,"duration":365}},{"uid":"db54ac7c1b7a4bf","reportUrl":"https://vaizcom.github.io/autotests/285//#testresult/db54ac7c1b7a4bf","status":"passed","time":{"start":1752235390802,"stop":1752235391129,"duration":327}},{"uid":"6468442f809c7c65","reportUrl":"https://vaizcom.github.io/autotests/283//#testresult/6468442f809c7c65","status":"passed","time":{"start":1752234451304,"stop":1752234451677,"duration":373}},{"uid":"4282f356e627709c","reportUrl":"https://vaizcom.github.io/autotests/284//#testresult/4282f356e627709c","status":"passed","time":{"start":1752234414514,"stop":1752234414979,"duration":465}},{"uid":"2f8594320ba2ca9e","reportUrl":"https://vaizcom.github.io/autotests/281//#testresult/2f8594320ba2ca9e","status":"passed","time":{"start":1752233603119,"stop":1752233603485,"duration":366}},{"uid":"a808bd43096b8665","reportUrl":"https://vaizcom.github.io/autotests/280//#testresult/a808bd43096b8665","status":"passed","time":{"start":1752232659819,"stop":1752232660155,"duration":336}},{"uid":"394193a160461ef3","reportUrl":"https://vaizcom.github.io/autotests/279//#testresult/394193a160461ef3","status":"passed","time":{"start":1752232198614,"stop":1752232198954,"duration":340}},{"uid":"c700ad6b2d493e4d","reportUrl":"https://vaizcom.github.io/autotests/278//#testresult/c700ad6b2d493e4d","status":"passed","time":{"start":1752223590467,"stop":1752223590771,"duration":304}},{"uid":"91ea45fa2b314fff","reportUrl":"https://vaizcom.github.io/autotests/277//#testresult/91ea45fa2b314fff","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1752218330554,"stop":1752218330808,"duration":254}},{"uid":"7ed18e8915c39f5d","reportUrl":"https://vaizcom.github.io/autotests/276//#testresult/7ed18e8915c39f5d","status":"passed","time":{"start":1752151100038,"stop":1752151100374,"duration":336}},{"uid":"8740bd93f3bf38a","reportUrl":"https://vaizcom.github.io/autotests/275//#testresult/8740bd93f3bf38a","status":"passed","time":{"start":1752148946766,"stop":1752148947074,"duration":308}},{"uid":"ad9080822cb22711","reportUrl":"https://vaizcom.github.io/autotests/274//#testresult/ad9080822cb22711","status":"passed","time":{"start":1752138424448,"stop":1752138424791,"duration":343}},{"uid":"ea45cea47fe7ddfc","reportUrl":"https://vaizcom.github.io/autotests/273//#testresult/ea45cea47fe7ddfc","status":"passed","time":{"start":1752137298641,"stop":1752137299017,"duration":376}},{"uid":"981f86310fb9a8b6","reportUrl":"https://vaizcom.github.io/autotests/272//#testresult/981f86310fb9a8b6","status":"passed","time":{"start":1752133936859,"stop":1752133937225,"duration":366}},{"uid":"ec0850bdadec90d9","reportUrl":"https://vaizcom.github.io/autotests/271//#testresult/ec0850bdadec90d9","status":"passed","time":{"start":1752066521243,"stop":1752066521544,"duration":301}},{"uid":"7cc5367248a87923","reportUrl":"https://vaizcom.github.io/autotests/270//#testresult/7cc5367248a87923","status":"passed","time":{"start":1752065528032,"stop":1752065528377,"duration":345}}]},"tags":["backend"]},"source":"44d53a0b1571bd85.json","parameterValues":["''","200","''"]}