{"uid":"dd6c14ad40c8590a","name":"Тестирование создания подзадачи разными пользовательскими ролями: клиент=manager_client, ожидаемый статус=200","fullName":"tests.test_backend.task_service.create_task.access_task.test_create_sub#test_create_subtask_per_role","historyId":"23e88346548341637e71bcdc01207d0b","time":{"start":1761921883494,"stop":1761921883613,"duration":119},"description":"\n    Тестирование создания подзадачи разными пользовательскими ролями и проверка\n    ожидаемого поведения на основе прав доступа роли.\n\n    Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n    подзадачу для родительской задачи. Также проверяются корректные связи между\n    родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n\n    ","descriptionHtml":"<pre><code>Тестирование создания подзадачи разными пользовательскими ролями и проверка\nожидаемого поведения на основе прав доступа роли.\n\nЭтот тест оценивает может ли клиент с разными уровнями доступа создавать\nподзадачу для родительской задачи. Также проверяются корректные связи между\nродительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n</code></pre>\n","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fc7d133bfd0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fc7d0f951c0>\nclient_fixture = 'manager_client', expected_status = 200\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания подзадачи разными пользовательскими ролями и проверка ожидаемого поведения\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_subtask_per_role(\n        owner_client, main_space, main_board, create_task_in_main, client_fixture, expected_status\n    ):\n        \"\"\"\n        Тестирование создания подзадачи разными пользовательскими ролями и проверка\n        ожидаемого поведения на основе прав доступа роли.\n    \n        Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n        подзадачу для родительской задачи. Также проверяются корректные связи между\n        родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n    \n        \"\"\"\n        allure.dynamic.title(\n            f\"Тестирование создания подзадачи разными пользовательскими ролями: клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n        parent_id = subtask_id = None\n    \n        try:\n            with allure.step(\"Создание родительской задачи через owner_client\"):\n>               parent_task = create_task_in_main(\n                    \"owner_client\",\n                    name=\"Main create_task for subtask access test\"\n                )\n\ntests/test_backend/task_service/create_task/access_task/test_create_sub.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/conftest.py:32: in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\ntests/test_backend/task_service/create_task/utils.py:52: in get_random_type_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard\n\n/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1761921763684,"stop":1761921763684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761921763685,"stop":1761921763685,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761921763685,"stop":1761921764117,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761921767245,"stop":1761921767518,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761921767518,"stop":1761921767725,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1761921767725,"stop":1761921768196,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1761921771027,"stop":1761921771249,"duration":222},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_task_in_main","time":{"start":1761921883494,"stop":1761921883494,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тестирование создания подзадачи разными пользовательскими ролями и проверка\n    ожидаемого поведения на основе прав доступа роли.\n\n    Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n    подзадачу для родительской задачи. Также проверяются корректные связи между\n    родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n\n    ","status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard","statusTrace":"owner_client = <tests.core.client.APIClient object at 0x7fc7d133bfd0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fc7d0f951c0>\nclient_fixture = 'manager_client', expected_status = 200\n\n    @allure.parent_suite(\"access_task\")\n    @allure.title(\"Тестирование создания подзадачи разными пользовательскими ролями и проверка ожидаемого поведения\")\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 403),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    def test_create_subtask_per_role(\n        owner_client, main_space, main_board, create_task_in_main, client_fixture, expected_status\n    ):\n        \"\"\"\n        Тестирование создания подзадачи разными пользовательскими ролями и проверка\n        ожидаемого поведения на основе прав доступа роли.\n    \n        Этот тест оценивает может ли клиент с разными уровнями доступа создавать\n        подзадачу для родительской задачи. Также проверяются корректные связи между\n        родительской задачей и подзадачей, включая поля `parentTask` и `subtasks`.\n    \n        \"\"\"\n        allure.dynamic.title(\n            f\"Тестирование создания подзадачи разными пользовательскими ролями: клиент={client_fixture}, ожидаемый статус={expected_status}\"\n        )\n        parent_id = subtask_id = None\n    \n        try:\n            with allure.step(\"Создание родительской задачи через owner_client\"):\n>               parent_task = create_task_in_main(\n                    \"owner_client\",\n                    name=\"Main create_task for subtask access test\"\n                )\n\ntests/test_backend/task_service/create_task/access_task/test_create_sub.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_backend/task_service/create_task/conftest.py:32: in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\ntests/test_backend/task_service/create_task/utils.py:52: in get_random_type_id\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard\n\n/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","steps":[{"name":"Создание родительской задачи через owner_client","time":{"start":1761921883494,"stop":1761921883612,"duration":118},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/access_task/test_create_sub.py\", line 42, in test_create_subtask_per_role\n    parent_task = create_task_in_main(\n                  ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/conftest.py\", line 32, in _create_task\n    random_type_id = kwargs.get(\"types\") or [get_random_type_id(client, main_board, main_space)]\n                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/autotests/autotests/tests/test_backend/task_service/create_task/utils.py\", line 52, in get_random_type_id\n    response.raise_for_status()\n  File \"/opt/hostedtoolcache/Python/3.11.14/x64/lib/python3.11/site-packages/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"access_task"},{"name":"tag","value":"backend"},{"name":"suite","value":"test_create_sub"},{"name":"host","value":"runnervmf2e7y"},{"name":"thread","value":"2549-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task_service.create_task.access_task.test_create_sub"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'manager_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":14,"skipped":0,"passed":9,"unknown":0,"total":23},"items":[{"uid":"d7f099bd5798109a","reportUrl":"https://vaizcom.github.io/autotests/404//#testresult/d7f099bd5798109a","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard","time":{"start":1761912194715,"stop":1761912194843,"duration":128}},{"uid":"73bf3d37c1188885","reportUrl":"https://vaizcom.github.io/autotests/403//#testresult/73bf3d37c1188885","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard","time":{"start":1761911308775,"stop":1761911308951,"duration":176}},{"uid":"ded6851840000f46","reportUrl":"https://vaizcom.github.io/autotests/402//#testresult/ded6851840000f46","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761910918364,"stop":1761910918477,"duration":113}},{"uid":"f1b4f14881c2cc9c","reportUrl":"https://vaizcom.github.io/autotests/401//#testresult/f1b4f14881c2cc9c","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761910620018,"stop":1761910620230,"duration":212}},{"uid":"55bd2aa4e61915","reportUrl":"https://vaizcom.github.io/autotests/400//#testresult/55bd2aa4e61915","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761910013745,"stop":1761910013921,"duration":176}},{"uid":"7f124e10c7b5e84","reportUrl":"https://vaizcom.github.io/autotests/399//#testresult/7f124e10c7b5e84","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/GetBoard","time":{"start":1761900045245,"stop":1761900045419,"duration":174}},{"uid":"f1c0d434ec80d105","reportUrl":"https://vaizcom.github.io/autotests/398//#testresult/f1c0d434ec80d105","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://api.vaiz.dev/v4/GetBoard","time":{"start":1761835063745,"stop":1761835063872,"duration":127}},{"uid":"c44a20cdbca5da63","reportUrl":"https://vaizcom.github.io/autotests/397//#testresult/c44a20cdbca5da63","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-uat.vaiz.dev/v4/GetBoard","time":{"start":1761834650861,"stop":1761834651044,"duration":183}},{"uid":"53150da5149c3e61","reportUrl":"https://vaizcom.github.io/autotests/396//#testresult/53150da5149c3e61","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761833486761,"stop":1761833486948,"duration":187}},{"uid":"ba86eca0f77afc2d","reportUrl":"https://vaizcom.github.io/autotests/395//#testresult/ba86eca0f77afc2d","status":"passed","time":{"start":1761821833489,"stop":1761821835943,"duration":2454}},{"uid":"3b30fc94ee88c65d","reportUrl":"https://vaizcom.github.io/autotests/394//#testresult/3b30fc94ee88c65d","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761818774576,"stop":1761818774747,"duration":171}},{"uid":"ba7573820661cb87","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/ba7573820661cb87","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761748637485,"stop":1761748637606,"duration":121}},{"uid":"efb4bb0b16190cd3","reportUrl":"https://vaizcom.github.io/autotests/393//#testresult/efb4bb0b16190cd3","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761747914850,"stop":1761747915038,"duration":188}},{"uid":"4312a92deb1a1453","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/4312a92deb1a1453","status":"passed","time":{"start":1761747047067,"stop":1761747051317,"duration":4250}},{"uid":"14b160879a896dea","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/14b160879a896dea","status":"broken","statusDetails":"requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://vaiz-api-ms.vaiz.dev/v4/GetBoard","time":{"start":1761745744864,"stop":1761745744978,"duration":114}},{"uid":"673e0d61a7a351dd","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/673e0d61a7a351dd","status":"passed","time":{"start":1761576867142,"stop":1761576870043,"duration":2901}},{"uid":"aa5a9b9bb49e026b","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/aa5a9b9bb49e026b","status":"passed","time":{"start":1761557484345,"stop":1761557487121,"duration":2776}},{"uid":"67467cc305ac8c4c","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/67467cc305ac8c4c","status":"passed","time":{"start":1761308703405,"stop":1761308706211,"duration":2806}},{"uid":"75b1aa939013e378","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/75b1aa939013e378","status":"passed","time":{"start":1761306869535,"stop":1761306872245,"duration":2710}},{"uid":"2aa2293a92c10a19","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/2aa2293a92c10a19","status":"passed","time":{"start":1761137169683,"stop":1761137172610,"duration":2927}}]},"tags":["backend"]},"source":"dd6c14ad40c8590a.json","parameterValues":["'manager_client'","200"]}