{"uid":"e889695a3108e3b5","name":"Проверка доступа к документу в Space для роли member","fullName":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles#test_get_project_and_space_doc_access_by_roles","historyId":"7ae42f27d4420dfff058e649fe7b2524","time":{"start":1759767446453,"stop":1759767447266,"duration":813},"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","descriptionHtml":"<pre><code>Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\nдля проверки разных типов клиентов и контейнеров документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[space_doc-member]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'member_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7ff2f3ef39c0>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Space', kind_id = '6866309d85fb8d104544a61e'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем member: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1759767275032,"stop":1759767275032,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1759767275033,"stop":1759767275653,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1759767275033,"stop":1759767275033,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1759767275653,"stop":1759767276290,"duration":637},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1759767276593,"stop":1759767277104,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1759767278005,"stop":1759767278446,"duration":441},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1759767279249,"stop":1759767279709,"duration":460},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_main_documents","time":{"start":1759767446453,"stop":1759767446453,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n    для проверки разных типов клиентов и контейнеров документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_get_project_and_space_doc_access_by_roles[space_doc-member]>>\nkind = 'Space', container_fixture = 'main_space'\nclient_fixture = 'member_client', expected_status = 200\ncreate_main_documents = <function create_main_documents.<locals>._create_docs at 0x7ff2f3ef39c0>\nmain_space = '6866309d85fb8d104544a61e'\n\n    @pytest.mark.parametrize(\n        'client_fixture, expected_status',\n        [\n            ('owner_client', 200),\n            ('manager_client', 200),\n            ('member_client', 200),\n            ('guest_client', 200),\n        ],\n        ids=['owner', 'manager', 'member', 'guest'],\n    )\n    @pytest.mark.parametrize(\n        'kind, container_fixture',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_get_project_and_space_doc_access_by_roles(\n        request, kind, container_fixture, client_fixture, expected_status, create_main_documents, main_space\n    ):\n        \"\"\"\n        Проверяем что разные роли могут получить документы из пространства и проекта. Тест параметризован\n        для проверки разных типов клиентов и контейнеров документов.\n        \"\"\"\n        with allure.step(f'Подготовка тестовых данных для проверки доступа к документу в {kind}'):\n            api_client = request.getfixturevalue(client_fixture)\n            container_id = request.getfixturevalue(container_fixture)\n            role = client_fixture.replace('_client', '')\n    \n        allure.dynamic.title(f'Проверка доступа к документу в {kind} для роли {role}')\n    \n        creator_roles = {'owner_client': 'owner', 'manager_client': 'manager', 'member_client': 'member'}\n    \n>       docs = create_main_documents(kind, container_id, creator_roles)\n\ntests/test_backend/document/access_doc/test_get_doc_access_by_roles.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nkind = 'Space', kind_id = '6866309d85fb8d104544a61e'\ncreator_roles = {'manager_client': 'manager', 'member_client': 'member', 'owner_client': 'owner'}\n\n    def _create_docs(kind, kind_id, creator_roles):\n        \"\"\"\n        Внутренняя функция для создания документов\n        Args:\n            kind (str): Тип документа (Space/Project/Member)\n            kind_id (str): ID контейнера (space_id/project_id/member_id)\n            creator_roles (dict): Словарь {fixture_name: role_name} для создания документов\n        \"\"\"\n        with allure.step(f'Создание тестовых документов в {kind} разными ролями'):\n            for creator_fixture, creator_role in creator_roles.items():\n                creator_client = request.getfixturevalue(creator_fixture)\n    \n                with allure.step(f'Создание документа пользователем {creator_role}'):\n                    title = f'{kind} doc by {creator_role} {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n                    create_resp = creator_client.post(\n                        **create_document_endpoint(kind=kind, kind_id=kind_id, space_id=main_space, title=title)\n                    )\n>                   assert create_resp.status_code == 200, (\n                        f'Ошибка при создании документа пользователем {creator_role}: '\n                        f'статус {create_resp.status_code}'\n                    )\nE                   AssertionError: Ошибка при создании документа пользователем member: статус 400\nE                   assert 400 == 200\nE                    +  where 400 = <Response [400]>.status_code\n\ntests/conftest.py:305: AssertionError","steps":[{"name":"Подготовка тестовых данных для проверки доступа к документу в Space","time":{"start":1759767446453,"stop":1759767446453,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание тестовых документов в Space разными ролями","time":{"start":1759767446453,"stop":1759767447265,"duration":812},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[{"name":"Создание документа пользователем owner","time":{"start":1759767446453,"stop":1759767446750,"duration":297},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание документа пользователем manager","time":{"start":1759767446750,"stop":1759767447023,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создание документа пользователем member","time":{"start":1759767447023,"stop":1759767447265,"duration":242},"status":"failed","statusMessage":"AssertionError: Ошибка при создании документа пользователем member: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/conftest.py\", line 305, in _create_docs\n    assert create_resp.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"create_main_documents::0","time":{"start":1759767447273,"stop":1759767447825,"duration":552},"status":"passed","steps":[{"name":"Очистка тестовых данных","time":{"start":1759767447273,"stop":1759767447825,"duration":552},"status":"passed","steps":[{"name":"Удаление документа \"Space doc by owner 2025.10.06_16:17:26\" (создан owner)","time":{"start":1759767447273,"stop":1759767447537,"duration":264},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Удаление документа \"Space doc by manager 2025.10.06_16:17:26\" (создан manager)","time":{"start":1759767447537,"stop":1759767447825,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_get_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2552-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_get_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"client_fixture","value":"'member_client'"},{"name":"container_fixture","value":"'main_space'"},{"name":"expected_status","value":"200"},{"name":"kind","value":"'Space'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":38,"unknown":0,"total":40},"items":[{"uid":"ad5d6584a4d7cd4f","reportUrl":"https://vaizcom.github.io/autotests/343//#testresult/ad5d6584a4d7cd4f","status":"passed","time":{"start":1759767401610,"stop":1759767402917,"duration":1307}},{"uid":"e68000dbefe33994","reportUrl":"https://vaizcom.github.io/autotests/341//#testresult/e68000dbefe33994","status":"passed","time":{"start":1759753858421,"stop":1759753859757,"duration":1336}},{"uid":"272150bb9da0f2df","reportUrl":"https://vaizcom.github.io/autotests/340//#testresult/272150bb9da0f2df","status":"passed","time":{"start":1759743824656,"stop":1759743826106,"duration":1450}},{"uid":"f68ee4f642613ff9","reportUrl":"https://vaizcom.github.io/autotests/339//#testresult/f68ee4f642613ff9","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.vaiz.dev', port=443): Max retries exceeded with url: /v4/Login (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7fb5f6e8f010>, 'Connection to api.vaiz.dev timed out. (connect timeout=None)'))","time":{"start":1759485530946,"stop":1759485530946,"duration":0}},{"uid":"c22c669687efefdd","reportUrl":"https://vaizcom.github.io/autotests/338//#testresult/c22c669687efefdd","status":"passed","time":{"start":1759232450253,"stop":1759232451677,"duration":1424}},{"uid":"eca1000551cd7f6a","reportUrl":"https://vaizcom.github.io/autotests/337//#testresult/eca1000551cd7f6a","status":"passed","time":{"start":1759140733083,"stop":1759140734488,"duration":1405}},{"uid":"9bc68710d0162dba","reportUrl":"https://vaizcom.github.io/autotests/335//#testresult/9bc68710d0162dba","status":"passed","time":{"start":1758891792022,"stop":1758891793828,"duration":1806}},{"uid":"cc2325f5fd781bb8","reportUrl":"https://vaizcom.github.io/autotests/334//#testresult/cc2325f5fd781bb8","status":"passed","time":{"start":1758807738519,"stop":1758807740216,"duration":1697}},{"uid":"63438fb24eb9963","reportUrl":"https://vaizcom.github.io/autotests/333//#testresult/63438fb24eb9963","status":"passed","time":{"start":1758806615015,"stop":1758806616647,"duration":1632}},{"uid":"a9e8ab1872624dad","reportUrl":"https://vaizcom.github.io/autotests/332//#testresult/a9e8ab1872624dad","status":"passed","time":{"start":1758791186589,"stop":1758791188460,"duration":1871}},{"uid":"d3008302e56646fd","reportUrl":"https://vaizcom.github.io/autotests/331//#testresult/d3008302e56646fd","status":"passed","time":{"start":1758540511587,"stop":1758540512984,"duration":1397}},{"uid":"349f3cd6e32112ee","reportUrl":"https://vaizcom.github.io/autotests/330//#testresult/349f3cd6e32112ee","status":"passed","time":{"start":1758289131313,"stop":1758289133050,"duration":1737}},{"uid":"d071bd9fe8d09669","reportUrl":"https://vaizcom.github.io/autotests/329//#testresult/d071bd9fe8d09669","status":"passed","time":{"start":1755852315981,"stop":1755852318093,"duration":2112}},{"uid":"d997801a78bdad32","reportUrl":"https://vaizcom.github.io/autotests/328//#testresult/d997801a78bdad32","status":"passed","time":{"start":1755851820810,"stop":1755851822624,"duration":1814}},{"uid":"df50348a8d6a36fa","reportUrl":"https://vaizcom.github.io/autotests/327//#testresult/df50348a8d6a36fa","status":"passed","time":{"start":1755847955956,"stop":1755847957995,"duration":2039}},{"uid":"707b29cfe5cdd79f","reportUrl":"https://vaizcom.github.io/autotests/326//#testresult/707b29cfe5cdd79f","status":"passed","time":{"start":1755777821082,"stop":1755777822731,"duration":1649}},{"uid":"f98e06bf19de065a","reportUrl":"https://vaizcom.github.io/autotests/325//#testresult/f98e06bf19de065a","status":"passed","time":{"start":1755774464408,"stop":1755774465916,"duration":1508}},{"uid":"6cfb36476b899329","reportUrl":"https://vaizcom.github.io/autotests/324//#testresult/6cfb36476b899329","status":"passed","time":{"start":1755694583960,"stop":1755694586084,"duration":2124}},{"uid":"5120c7c0d9d2bbcb","reportUrl":"https://vaizcom.github.io/autotests/323//#testresult/5120c7c0d9d2bbcb","status":"passed","time":{"start":1755694019779,"stop":1755694021470,"duration":1691}},{"uid":"a5c12147e9a93642","reportUrl":"https://vaizcom.github.io/autotests/322//#testresult/a5c12147e9a93642","status":"passed","time":{"start":1755687095513,"stop":1755687096908,"duration":1395}}]},"tags":["backend"]},"source":"e889695a3108e3b5.json","parameterValues":["'member_client'","'main_space'","200","'Space'"]}