{"uid":"b093df4751b48e9","name":"Редактирование Space-документа: создание manager, редактирование member","fullName":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles#test_edit_project_and_space_docs_different_roles","historyId":"1d22ee6e5e96f8e21ab755eb6d76f90e","time":{"start":1761747818695,"stop":1761747819663,"duration":968},"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","descriptionHtml":"<pre><code>Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\nмогут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\nдокументы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\nтестирования различных комбинаций ролей создателей и редакторов документов.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[space_doc-manager_to_member]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\neditor_fixture = 'member_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n                assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\n    \n                if expected_status == 200:\n                    with allure.step('Проверка видимости изменений документа для всех ролей'):\n                        # Собираем всех клиентов, которые должны видеть документ\n                        with allure.step('Получение клиентов для проверки'):\n                            clients_to_check = {\n                                'owner': request.getfixturevalue('owner_client'),\n                                'manager': request.getfixturevalue('manager_client'),\n                                'member': request.getfixturevalue('member_client'),\n                                'guest': request.getfixturevalue('guest_client'),\n                            }\n    \n                        # Проверяем видимость изменений для каждого клиента\n                        for role, client in clients_to_check.items():\n                            with allure.step(f'Проверка для роли {role}'):\n                                with allure.step(f'Запрос документа от имени {role}'):\n                                    get_response = client.post(\n                                        **get_document_endpoint(document_id=doc_id, space_id=main_space)\n                                    )\n    \n                                with allure.step(f'Проверка статуса ответа для {role}'):\n>                                   assert get_response.status_code == 200, (\n                                        f'Ошибка при получении документа для роли {role}: '\n                                        f'статус {get_response.status_code}'\n                                    )\nE                                   AssertionError: Ошибка при получении документа для роли owner: статус 400\nE                                   assert 400 == 200\nE                                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:122: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1761747760277,"stop":1761747760277,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1761747760278,"stop":1761747760278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"owner_client","time":{"start":1761747760278,"stop":1761747760906,"duration":628},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1761747765139,"stop":1761747765458,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1761747765458,"stop":1761747765749,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"manager_client","time":{"start":1761747766550,"stop":1761747766846,"duration":296},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1761747767429,"stop":1761747768079,"duration":650},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"guest_client","time":{"start":1761747768642,"stop":1761747768959,"duration":317},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n    могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n    документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n    тестирования различных комбинаций ролей создателей и редакторов документов.\n    ","status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"request = <FixtureRequest for <Function test_edit_project_and_space_docs_different_roles[space_doc-manager_to_member]>>\nmain_space = '6866309d85fb8d104544a61e', creator_fixture = 'manager_client'\neditor_fixture = 'member_client', expected_status = 200, doc_type = 'Space'\ndoc_container = 'main_space'\n\n    @pytest.mark.parametrize(\n        'creator_fixture, editor_fixture, expected_status',\n        [\n            # Owner создает документ\n            ('owner_client', 'owner_client', 200),  # владелец редактирует свой документ\n            ('owner_client', 'manager_client', 200),  # владелец создает, менеджер редактирует\n            ('owner_client', 'member_client', 200),  # владелец создает, участник редактирует\n            ('owner_client', 'guest_client', 403),  # владелец создает, гость редактирует\n            # Manager создает документ\n            ('manager_client', 'owner_client', 200),  # менеджер создает, владелец редактирует\n            ('manager_client', 'manager_client', 200),  # менеджер редактирует свой документ\n            ('manager_client', 'member_client', 200),  # менеджер создает, участник редактирует\n            ('manager_client', 'guest_client', 403),  # менеджер создает, гость редактирует\n            # Member создает документ\n            ('member_client', 'owner_client', 200),  # участник создает, владелец редактирует\n            ('member_client', 'manager_client', 200),  # участник создает, менеджер редактирует\n            ('member_client', 'member_client', 200),  # участник редактирует свой документ\n            ('member_client', 'guest_client', 403),  # участник создает, гость редактирует\n        ],\n        ids=[\n            'owner_self_edit',\n            'owner_to_manager',\n            'owner_to_member',\n            'owner_to_guest',\n            'manager_to_owner',\n            'manager_self_edit',\n            'manager_to_member',\n            'manager_to_guest',\n            'member_to_owner',\n            'member_to_manager',\n            'member_self_edit',\n            'member_to_guest',\n        ],\n    )\n    @pytest.mark.parametrize(\n        'doc_type, doc_container',\n        [\n            ('Space', 'main_space'),\n            ('Project', 'main_project'),\n        ],\n        ids=['space_doc', 'project_doc'],\n    )\n    def test_edit_project_and_space_docs_different_roles(\n        request, main_space, creator_fixture, editor_fixture, expected_status, doc_type, doc_container\n    ):\n        \"\"\"\n        Проверяет функциональность создания и редактирования документов для разных ролей в системе. Тест проверяет,\n        могут ли пользователи с определенными ролями (владелец, менеджер, участник и гость) создавать и редактировать\n        документы, обеспечивая правильное поведение контроля доступа на основе ролей. Использует параметризацию для\n        тестирования различных комбинаций ролей создателей и редакторов документов.\n        \"\"\"\n        creator_client = request.getfixturevalue(creator_fixture)\n        editor_client = request.getfixturevalue(editor_fixture)\n    \n        container_id = request.getfixturevalue(doc_container)\n        creator_role = creator_fixture.replace('_client', '')\n        editor_role = editor_fixture.replace('_client', '')\n    \n        document_title = f'{datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")} Doc For Editing'\n        edited_title = f'Edited Doc {datetime.now().strftime(\"%Y.%m.%d_%H:%M:%S\")}'\n        doc_id = None\n    \n        allure.dynamic.title(f'Редактирование {doc_type}-документа: создание {creator_role}, редактирование {editor_role}')\n    \n        try:\n            # Создание документа первой ролью\n            with allure.step(f'Создание {doc_type}-документа пользователем с ролью {creator_role}'):\n                create_response = creator_client.post(\n                    **create_document_endpoint(\n                        kind=doc_type, kind_id=container_id, space_id=main_space, title=document_title\n                    )\n                )\n                assert create_response.status_code == 200, (\n                    f'Ошибка при создании документа пользователем {creator_role}: ' f'статус {create_response.status_code}'\n                )\n                doc_id = create_response.json()['payload']['document']['_id']\n    \n            # Редактирование документа второй ролью\n            with allure.step(f'Редактирование документа пользователем с ролью {editor_role}'):\n                edit_response = editor_client.post(\n                    **edit_document_endpoint(document_id=doc_id, title=edited_title, icon='+1', space_id=main_space)\n                )\n                assert edit_response.status_code == expected_status, (\n                    f'Неожиданный статус при редактировании: {edit_response.status_code}, ' f'ожидался: {expected_status}'\n                )\n    \n                if expected_status == 200:\n                    with allure.step('Проверка видимости изменений документа для всех ролей'):\n                        # Собираем всех клиентов, которые должны видеть документ\n                        with allure.step('Получение клиентов для проверки'):\n                            clients_to_check = {\n                                'owner': request.getfixturevalue('owner_client'),\n                                'manager': request.getfixturevalue('manager_client'),\n                                'member': request.getfixturevalue('member_client'),\n                                'guest': request.getfixturevalue('guest_client'),\n                            }\n    \n                        # Проверяем видимость изменений для каждого клиента\n                        for role, client in clients_to_check.items():\n                            with allure.step(f'Проверка для роли {role}'):\n                                with allure.step(f'Запрос документа от имени {role}'):\n                                    get_response = client.post(\n                                        **get_document_endpoint(document_id=doc_id, space_id=main_space)\n                                    )\n    \n                                with allure.step(f'Проверка статуса ответа для {role}'):\n>                                   assert get_response.status_code == 200, (\n                                        f'Ошибка при получении документа для роли {role}: '\n                                        f'статус {get_response.status_code}'\n                                    )\nE                                   AssertionError: Ошибка при получении документа для роли owner: статус 400\nE                                   assert 400 == 200\nE                                    +  where 400 = <Response [400]>.status_code\n\ntests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py:122: AssertionError","steps":[{"name":"Создание Space-документа пользователем с ролью manager","time":{"start":1761747818695,"stop":1761747818969,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Редактирование документа пользователем с ролью member","time":{"start":1761747818969,"stop":1761747819393,"duration":424},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Проверка видимости изменений документа для всех ролей","time":{"start":1761747819217,"stop":1761747819393,"duration":176},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Получение клиентов для проверки","time":{"start":1761747819217,"stop":1761747819217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка для роли owner","time":{"start":1761747819217,"stop":1761747819393,"duration":176},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[{"name":"Запрос документа от имени owner","time":{"start":1761747819217,"stop":1761747819392,"duration":175},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка статуса ответа для owner","time":{"start":1761747819392,"stop":1761747819393,"duration":1},"status":"failed","statusMessage":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/document/access_doc/test_edit_doc_access_by_roles.py\", line 122, in test_edit_project_and_space_docs_different_roles\n    assert get_response.status_code == 200, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":5,"attachmentsCount":0,"hasContent":true},{"name":"Архивация документа","time":{"start":1761747819393,"stop":1761747819663,"duration":270},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.document.access_doc"},{"name":"suite","value":"test_edit_doc_access_by_roles"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2581-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.document.access_doc.test_edit_doc_access_by_roles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"creator_fixture","value":"'manager_client'"},{"name":"doc_container","value":"'main_space'"},{"name":"doc_type","value":"'Space'"},{"name":"editor_fixture","value":"'member_client'"},{"name":"expected_status","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":40,"unknown":0,"total":42},"items":[{"uid":"173e71cee82b0e76","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/173e71cee82b0e76","status":"passed","time":{"start":1761746699960,"stop":1761746702246,"duration":2286}},{"uid":"8759564b19a836a2","reportUrl":"https://vaizcom.github.io/autotests/392//#testresult/8759564b19a836a2","status":"failed","statusDetails":"AssertionError: Ошибка при получении документа для роли owner: статус 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1761745673484,"stop":1761745674445,"duration":961}},{"uid":"6d5b1db1fe33ef89","reportUrl":"https://vaizcom.github.io/autotests/391//#testresult/6d5b1db1fe33ef89","status":"passed","time":{"start":1761576563837,"stop":1761576565234,"duration":1397}},{"uid":"306170eec8090cc5","reportUrl":"https://vaizcom.github.io/autotests/390//#testresult/306170eec8090cc5","status":"passed","time":{"start":1761557219209,"stop":1761557220840,"duration":1631}},{"uid":"cdbbda75a1b15b3b","reportUrl":"https://vaizcom.github.io/autotests/389//#testresult/cdbbda75a1b15b3b","status":"passed","time":{"start":1761308444854,"stop":1761308446252,"duration":1398}},{"uid":"3482f7045e56debf","reportUrl":"https://vaizcom.github.io/autotests/388//#testresult/3482f7045e56debf","status":"passed","time":{"start":1761306591270,"stop":1761306592725,"duration":1455}},{"uid":"52392ca0a57d7b1b","reportUrl":"https://vaizcom.github.io/autotests/387//#testresult/52392ca0a57d7b1b","status":"passed","time":{"start":1761136889598,"stop":1761136891196,"duration":1598}},{"uid":"832a5bbfb278c2df","reportUrl":"https://vaizcom.github.io/autotests/386//#testresult/832a5bbfb278c2df","status":"passed","time":{"start":1761135550188,"stop":1761135551913,"duration":1725}},{"uid":"ef7bde84d55f2694","reportUrl":"https://vaizcom.github.io/autotests/385//#testresult/ef7bde84d55f2694","status":"passed","time":{"start":1761134002164,"stop":1761134003575,"duration":1411}},{"uid":"1e90854071e3fce2","reportUrl":"https://vaizcom.github.io/autotests/384//#testresult/1e90854071e3fce2","status":"passed","time":{"start":1761128320281,"stop":1761128322183,"duration":1902}},{"uid":"474de66b04f11358","reportUrl":"https://vaizcom.github.io/autotests/383//#testresult/474de66b04f11358","status":"passed","time":{"start":1761124428587,"stop":1761124430725,"duration":2138}},{"uid":"a402a84fdf41cb4b","reportUrl":"https://vaizcom.github.io/autotests/382//#testresult/a402a84fdf41cb4b","status":"passed","time":{"start":1761119265667,"stop":1761119267209,"duration":1542}},{"uid":"c6b1462da7acf460","reportUrl":"https://vaizcom.github.io/autotests/381//#testresult/c6b1462da7acf460","status":"passed","time":{"start":1761053305114,"stop":1761053306703,"duration":1589}},{"uid":"e19ebec5c0b3d9cc","reportUrl":"https://vaizcom.github.io/autotests/380//#testresult/e19ebec5c0b3d9cc","status":"passed","time":{"start":1761047195019,"stop":1761047196829,"duration":1810}},{"uid":"77c56d725253f774","reportUrl":"https://vaizcom.github.io/autotests/379//#testresult/77c56d725253f774","status":"passed","time":{"start":1760614606986,"stop":1760614608637,"duration":1651}},{"uid":"77f19bf7b36f87a3","reportUrl":"https://vaizcom.github.io/autotests/378//#testresult/77f19bf7b36f87a3","status":"passed","time":{"start":1760599406301,"stop":1760599408122,"duration":1821}},{"uid":"bc147892973cb4e7","reportUrl":"https://vaizcom.github.io/autotests/377//#testresult/bc147892973cb4e7","status":"passed","time":{"start":1760535441254,"stop":1760535442929,"duration":1675}},{"uid":"f7b5e584f3d0a2ef","reportUrl":"https://vaizcom.github.io/autotests/376//#testresult/f7b5e584f3d0a2ef","status":"passed","time":{"start":1760533903347,"stop":1760533905288,"duration":1941}},{"uid":"24d9ab01933e9344","reportUrl":"https://vaizcom.github.io/autotests/375//#testresult/24d9ab01933e9344","status":"passed","time":{"start":1760532477093,"stop":1760532478464,"duration":1371}},{"uid":"faf8629a796b8fa","reportUrl":"https://vaizcom.github.io/autotests/374//#testresult/faf8629a796b8fa","status":"passed","time":{"start":1760529293644,"stop":1760529295028,"duration":1384}}]},"tags":["backend"]},"source":"b093df4751b48e9.json","parameterValues":["'manager_client'","'main_space'","'Space'","'member_client'","200"]}