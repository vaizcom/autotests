{"uid":"5830f83d0ac81a25","name":"test_create_task_and_verify_on_board","fullName":"tests.test_backend.task.test_create_task_on_board#test_create_task_and_verify_on_board","historyId":"fa2eb3b9877c9e99b92dd9efae1b6f38","time":{"start":1760017676304,"stop":1760017677851,"duration":1547},"description":"\n    Тест создает задачу с указанными бордой, группой и индексом=0, и проверяет:\n      - корректность задачи,\n      - что задача только в одной группе, нет дублей, верный индекс=0.\n      - random client_fixture\n    ","descriptionHtml":"<pre><code>Тест создает задачу с указанными бордой, группой и индексом=0, и проверяет:\n  - корректность задачи,\n  - что задача только в одной группе, нет дублей, верный индекс=0.\n  - random client_fixture\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Ошибка: индекс задачи в группе 6866731185fb8d104544e827 = 1, ожидалось 0. taskOrderByGroups[6866731185fb8d104544e827] = ['68e77cc62b66e4965012913b', '68e7bd0d2b66e4965014f8b8']\nassert 1 == 0","statusTrace":"request = <FixtureRequest for <Function test_create_task_and_verify_on_board>>\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fed645999e0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\n\n    def test_create_task_and_verify_on_board(request, create_task_in_main, main_space, main_board):\n        \"\"\"\n        Тест создает задачу с указанными бордой, группой и индексом=0, и проверяет:\n          - корректность задачи,\n          - что задача только в одной группе, нет дублей, верный индекс=0.\n          - random client_fixture\n        \"\"\"\n        random_client = random.choice([\"owner_client\", \"manager_client\", \"member_client\"])\n        client = get_client(request, random_client)\n        random_group_id = get_random_group_id(client, main_board, main_space)\n        task_index = 0\n    \n        with allure.step(f\"Создаем задачу от случайного пользователя: {random_client}\"):\n            task = create_task_in_main(\n                client_fixture=random_client,\n                group=random_group_id,\n                index=task_index\n            )\n            task_id = task[\"_id\"]\n    \n        with allure.step(\"Проверяем созданную задачу\"):\n            assert task[\"board\"] == main_board, \"Ошибка: неверная борда задачи\"\n            assert task[\"group\"] == random_group_id, \"Ошибка: неверная группа задачи\"\n    \n        with allure.step(\"Получаем данные борды через get_board_endpoint\"):\n            response = client.post(**get_board_endpoint(board_id=main_board, space_id=main_space))\n            response.raise_for_status()\n            board_data = response.json()[\"payload\"][\"board\"]\n    \n        with allure.step(\"Проверяем 'taskOrderByGroups'\"):\n            assert isinstance(board_data[\"taskOrderByGroups\"], dict), \"'taskOrderByGroups' должен быть dict\"\n            for group_id_key, ids_list in board_data[\"taskOrderByGroups\"].items():\n                assert isinstance(ids_list, list), f\"'taskOrderByGroups[{group_id_key}]' должен быть списком\"\n                for task_id_item in ids_list:\n                    assert isinstance(task_id_item, str), f\"task_id должен быть строкой, найдено: {task_id_item}\"\n    \n        with allure.step(\"Проверяем, что задача есть только в одной группе и нет дублей\"):\n            found_in_groups = []\n            for group_id_key, ids_list in board_data[\"taskOrderByGroups\"].items():\n                if task_id in ids_list:\n                    found_in_groups.append(group_id_key)\n            assert found_in_groups == [random_group_id], (\n                f\"Ошибка: задача присутствует в других группах: {found_in_groups}, ожидалась только {random_group_id}\"\n            )\n            ids_in_group = board_data[\"taskOrderByGroups\"].get(random_group_id, [])\n            assert ids_in_group.count(task_id) == 1, (\n                f\"Ошибка: задача {task_id} содержится в группе {random_group_id} более одного раза: {ids_in_group}\"\n            )\n    \n        with allure.step(\"Проверяем корректность индекса задачи в группе\"):\n            ids_in_group = board_data[\"taskOrderByGroups\"].get(random_group_id, [])\n            position_in_group = ids_in_group.index(task_id) if task_id in ids_in_group else None\n>           assert position_in_group == task_index, (\n                f\"Ошибка: индекс задачи в группе {random_group_id} = {position_in_group}, ожидалось {task_index}. \"\n                f\"taskOrderByGroups[{random_group_id}] = {ids_in_group}\"\n            )\nE           AssertionError: Ошибка: индекс задачи в группе 6866731185fb8d104544e827 = 1, ожидалось 0. taskOrderByGroups[6866731185fb8d104544e827] = ['68e77cc62b66e4965012913b', '68e7bd0d2b66e4965014f8b8']\nE           assert 1 == 0\n\ntests/test_backend/task/test_create_task_on_board.py:63: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1760017222698,"stop":1760017222698,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1760017222698,"stop":1760017222698,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1760017222698,"stop":1760017222698,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1760017222698,"stop":1760017222698,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_client","time":{"start":1760017222698,"stop":1760017223278,"duration":580},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_space","time":{"start":1760017223278,"stop":1760017223580,"duration":302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_project","time":{"start":1760017223580,"stop":1760017223828,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"member_client","time":{"start":1760017227655,"stop":1760017227978,"duration":323},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"main_board","time":{"start":1760017229140,"stop":1760017229383,"duration":243},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_task_in_main","time":{"start":1760017676304,"stop":1760017676304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"\n    Тест создает задачу с указанными бордой, группой и индексом=0, и проверяет:\n      - корректность задачи,\n      - что задача только в одной группе, нет дублей, верный индекс=0.\n      - random client_fixture\n    ","status":"failed","statusMessage":"AssertionError: Ошибка: индекс задачи в группе 6866731185fb8d104544e827 = 1, ожидалось 0. taskOrderByGroups[6866731185fb8d104544e827] = ['68e77cc62b66e4965012913b', '68e7bd0d2b66e4965014f8b8']\nassert 1 == 0","statusTrace":"request = <FixtureRequest for <Function test_create_task_and_verify_on_board>>\ncreate_task_in_main = <function create_task_in_main.<locals>._create_task at 0x7fed645999e0>\nmain_space = '6866309d85fb8d104544a61e', main_board = '6866731185fb8d104544e826'\n\n    def test_create_task_and_verify_on_board(request, create_task_in_main, main_space, main_board):\n        \"\"\"\n        Тест создает задачу с указанными бордой, группой и индексом=0, и проверяет:\n          - корректность задачи,\n          - что задача только в одной группе, нет дублей, верный индекс=0.\n          - random client_fixture\n        \"\"\"\n        random_client = random.choice([\"owner_client\", \"manager_client\", \"member_client\"])\n        client = get_client(request, random_client)\n        random_group_id = get_random_group_id(client, main_board, main_space)\n        task_index = 0\n    \n        with allure.step(f\"Создаем задачу от случайного пользователя: {random_client}\"):\n            task = create_task_in_main(\n                client_fixture=random_client,\n                group=random_group_id,\n                index=task_index\n            )\n            task_id = task[\"_id\"]\n    \n        with allure.step(\"Проверяем созданную задачу\"):\n            assert task[\"board\"] == main_board, \"Ошибка: неверная борда задачи\"\n            assert task[\"group\"] == random_group_id, \"Ошибка: неверная группа задачи\"\n    \n        with allure.step(\"Получаем данные борды через get_board_endpoint\"):\n            response = client.post(**get_board_endpoint(board_id=main_board, space_id=main_space))\n            response.raise_for_status()\n            board_data = response.json()[\"payload\"][\"board\"]\n    \n        with allure.step(\"Проверяем 'taskOrderByGroups'\"):\n            assert isinstance(board_data[\"taskOrderByGroups\"], dict), \"'taskOrderByGroups' должен быть dict\"\n            for group_id_key, ids_list in board_data[\"taskOrderByGroups\"].items():\n                assert isinstance(ids_list, list), f\"'taskOrderByGroups[{group_id_key}]' должен быть списком\"\n                for task_id_item in ids_list:\n                    assert isinstance(task_id_item, str), f\"task_id должен быть строкой, найдено: {task_id_item}\"\n    \n        with allure.step(\"Проверяем, что задача есть только в одной группе и нет дублей\"):\n            found_in_groups = []\n            for group_id_key, ids_list in board_data[\"taskOrderByGroups\"].items():\n                if task_id in ids_list:\n                    found_in_groups.append(group_id_key)\n            assert found_in_groups == [random_group_id], (\n                f\"Ошибка: задача присутствует в других группах: {found_in_groups}, ожидалась только {random_group_id}\"\n            )\n            ids_in_group = board_data[\"taskOrderByGroups\"].get(random_group_id, [])\n            assert ids_in_group.count(task_id) == 1, (\n                f\"Ошибка: задача {task_id} содержится в группе {random_group_id} более одного раза: {ids_in_group}\"\n            )\n    \n        with allure.step(\"Проверяем корректность индекса задачи в группе\"):\n            ids_in_group = board_data[\"taskOrderByGroups\"].get(random_group_id, [])\n            position_in_group = ids_in_group.index(task_id) if task_id in ids_in_group else None\n>           assert position_in_group == task_index, (\n                f\"Ошибка: индекс задачи в группе {random_group_id} = {position_in_group}, ожидалось {task_index}. \"\n                f\"taskOrderByGroups[{random_group_id}] = {ids_in_group}\"\n            )\nE           AssertionError: Ошибка: индекс задачи в группе 6866731185fb8d104544e827 = 1, ожидалось 0. taskOrderByGroups[6866731185fb8d104544e827] = ['68e77cc62b66e4965012913b', '68e7bd0d2b66e4965014f8b8']\nE           assert 1 == 0\n\ntests/test_backend/task/test_create_task_on_board.py:63: AssertionError","steps":[{"name":"Получение клиента для member_client","time":{"start":1760017676304,"stop":1760017676304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Запрашиваем данные борды с ID: 6866731185fb8d104544e826","time":{"start":1760017676304,"stop":1760017676557,"duration":253},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем наличие списка групп","time":{"start":1760017676557,"stop":1760017676557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Рандомно выбираем группу из списка","time":{"start":1760017676557,"stop":1760017676557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Создаем задачу от случайного пользователя: member_client","time":{"start":1760017676557,"stop":1760017677370,"duration":813},"status":"passed","steps":[{"name":"Получение клиента для member_client","time":{"start":1760017676558,"stop":1760017676558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Запрашиваем данные борды с ID: 6866731185fb8d104544e826","time":{"start":1760017676558,"stop":1760017676801,"duration":243},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем наличие typesList","time":{"start":1760017676801,"stop":1760017676801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Рандомно выбираем `type` из typesList","time":{"start":1760017676801,"stop":1760017676801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true},{"name":"Проверяем созданную задачу","time":{"start":1760017677370,"stop":1760017677370,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Получаем данные борды через get_board_endpoint","time":{"start":1760017677370,"stop":1760017677850,"duration":480},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем 'taskOrderByGroups'","time":{"start":1760017677850,"stop":1760017677850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем, что задача есть только в одной группе и нет дублей","time":{"start":1760017677850,"stop":1760017677850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверяем корректность индекса задачи в группе","time":{"start":1760017677850,"stop":1760017677850,"duration":0},"status":"failed","statusMessage":"AssertionError: Ошибка: индекс задачи в группе 6866731185fb8d104544e827 = 1, ожидалось 0. taskOrderByGroups[6866731185fb8d104544e827] = ['68e77cc62b66e4965012913b', '68e7bd0d2b66e4965014f8b8']\nassert 1 == 0\n","statusTrace":"  File \"/home/runner/work/autotests/autotests/tests/test_backend/task/test_create_task_on_board.py\", line 63, in test_create_task_and_verify_on_board\n    assert position_in_group == task_index, (\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":14,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"backend"},{"name":"parentSuite","value":"tests.test_backend.task"},{"name":"suite","value":"test_create_task_on_board"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2613-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_backend.task.test_create_task_on_board"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":5,"unknown":0,"total":6},"items":[{"uid":"a8450a9a95777b5","reportUrl":"https://vaizcom.github.io/autotests/363//#testresult/a8450a9a95777b5","status":"passed","time":{"start":1760014750347,"stop":1760014751438,"duration":1091}},{"uid":"b234ffffc232d10f","reportUrl":"https://vaizcom.github.io/autotests/362//#testresult/b234ffffc232d10f","status":"passed","time":{"start":1760013857971,"stop":1760013859753,"duration":1782}},{"uid":"570b2c844d3423c9","reportUrl":"https://vaizcom.github.io/autotests/361//#testresult/570b2c844d3423c9","status":"passed","time":{"start":1759931794852,"stop":1759931795978,"duration":1126}},{"uid":"9a0742895e6de3d6","reportUrl":"https://vaizcom.github.io/autotests/360//#testresult/9a0742895e6de3d6","status":"passed","time":{"start":1759916065364,"stop":1759916066260,"duration":896}},{"uid":"e4bfec7573589654","reportUrl":"https://vaizcom.github.io/autotests/359//#testresult/e4bfec7573589654","status":"passed","time":{"start":1759909338542,"stop":1759909339888,"duration":1346}}]},"tags":["backend"]},"source":"5830f83d0ac81a25.json","parameterValues":[]}